(
	{name='AtomParser::AtomParser'; match='AtomParser'; definition='AtomParser()'; description=''; file='/wp-includes/atomlib.php, line: 90'; type='method';}, 
	{name='AtomParser::_default'; match='_default'; definition='_default($parser, $data)'; description=''; file='/wp-includes/atomlib.php, line: 298'; type='method';}, 
	{name='AtomParser::_p'; match='_p'; definition='_p($msg)'; description=''; file='/wp-includes/atomlib.php, line: 98'; type='method';}, 
	{name='AtomParser::cdata'; match='cdata'; definition='cdata($parser, $data)'; description=''; file='/wp-includes/atomlib.php, line: 291'; type='method';}, 
	{name='AtomParser::end_element'; match='end_element'; definition='end_element($parser, $name)'; description=''; file='/wp-includes/atomlib.php, line: 228'; type='method';}, 
	{name='AtomParser::end_ns'; match='end_ns'; definition='end_ns($parser, $prefix)'; description=''; file='/wp-includes/atomlib.php, line: 287'; type='method';}, 
	{name='AtomParser::error_handler'; match='error_handler'; definition='error_handler($log_level, $log_text, $error_file, $error_line)'; description=''; file='/wp-includes/atomlib.php, line: 104'; type='method';}, 
	{name='AtomParser::is_declared_content_ns'; match='is_declared_content_ns'; definition='is_declared_content_ns($new_mapping)'; description=''; file='/wp-includes/atomlib.php, line: 335'; type='method';}, 
	{name='AtomParser::ns_to_prefix'; match='ns_to_prefix'; definition='ns_to_prefix($qname, $attr=false)'; description=''; file='/wp-includes/atomlib.php, line: 303'; type='method';}, 
	{name='AtomParser::parse'; match='parse'; definition='parse()'; description=''; file='/wp-includes/atomlib.php, line: 108'; type='method';}, 
	{name='AtomParser::start_element'; match='start_element'; definition='start_element($parser, $name, $attrs)'; description=''; file='/wp-includes/atomlib.php, line: 149'; type='method';}, 
	{name='AtomParser::start_ns'; match='start_ns'; definition='start_ns($parser, $prefix, $uri)'; description=''; file='/wp-includes/atomlib.php, line: 282'; type='method';}, 
	{name='AtomParser::xml_escape'; match='xml_escape'; definition='xml_escape($string)'; description=''; file='/wp-includes/atomlib.php, line: 347'; type='method';}, 
	{name='AtomServer::__construct'; match='__construct'; definition='__construct()'; description='Constructor - Sets up object properties. 
'; file='/wp-app.php, line: 224'; return='<code>AtomServer</code> '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::auth_required'; match='auth_required'; definition='auth_required($msg)'; description='Set &apos;Auth Required&apos; (401) headers. 
'; file='/wp-app.php, line: 1376'; params='@param string $msg Status header content and HTML content.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::authenticate'; match='authenticate'; definition='authenticate()'; description='Access credential through various methods and perform login. 
'; file='/wp-app.php, line: 1450'; return='bool '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::bad_request'; match='bad_request'; definition='bad_request()'; description='Set &apos;Bad Request&apos; (400) status header. 
'; file='/wp-app.php, line: 1231'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::client_error'; match='client_error'; definition='client_error($msg=\'Client Error\')'; description='Set &apos;Client Error&apos; (400) status header. 
'; file='/wp-app.php, line: 1335'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::create_attachment'; match='create_attachment'; definition='create_attachment()'; description='Create new attachment. 
'; file='/wp-app.php, line: 594'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::create_post'; match='create_post'; definition='create_post()'; description='Create new post. 
'; file='/wp-app.php, line: 389'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::created'; match='created'; definition='created($post_ID, $content, $post_type=\'post\')'; description='Set created status headers (201). 
Sets the &apos;content-type&apos;, &apos;content-location&apos;, and &apos;location&apos;. 
'; file='/wp-app.php, line: 1349'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::delete_attachment'; match='delete_attachment'; definition='delete_attachment($postID)'; description='Remove attachment. 
'; file='/wp-app.php, line: 701'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::delete_post'; match='delete_post'; definition='delete_post($postID)'; description='Remove post. 
'; file='/wp-app.php, line: 544'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::echo_entry'; match='echo_entry'; definition='echo_entry()'; description='Display post content XML. 
'; file='/wp-app.php, line: 1150'; since='2.3.0 '; type='method';}, 
	{name='AtomServer::escape'; match='escape'; definition='escape($array)'; description='Sanitize content for database usage. 
'; file='/wp-app.php, line: 1429'; params='@param array $array Sanitize array and multi-dimension array.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::forbidden'; match='forbidden'; definition='forbidden($reason=\'\')'; description='Set &apos;Forbidden&apos; (403) status header. 
'; file='/wp-app.php, line: 1268'; since='2.6.0 '; type='method';}, 
	{name='AtomServer::get_accepted_content_type'; match='get_accepted_content_type'; definition='get_accepted_content_type($types=null)'; description='Retrieve accepted content types. 
'; file='/wp-app.php, line: 1488'; params='@param array $types Optional. Content Types.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_attachment'; match='get_attachment'; definition='get_attachment($postID=null)'; description='Retrieve attachment. 
'; file='/wp-app.php, line: 575'; params='@param int $postID Optional. Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_attachments'; match='get_attachments'; definition='get_attachments($page=1, $post_type=\'attachment\')'; description='Display attachment XML. 
'; file='/wp-app.php, line: 1033'; params='@param int $page Page ID.  
@param string $post_type Optional, default is \'attachment\'. Post type.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_attachments_url'; match='get_attachments_url'; definition='get_attachments_url($page=null)'; description='Retrieve attachment URL. 
'; file='/wp-app.php, line: 895'; params='@param int $page Page ID.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_categories_url'; match='get_categories_url'; definition='get_categories_url($deprecated=\'\')'; description='Retrieve categories URL. 
'; file='/wp-app.php, line: 872'; params='@param mixed $deprecated Not used.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_categories_xml'; match='get_categories_xml'; definition='get_categories_xml()'; description='Retrieve categories list in XML format. 
'; file='/wp-app.php, line: 361'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_entries_url'; match='get_entries_url'; definition='get_entries_url($page=null)'; description='Retrieve entries URL. 
'; file='/wp-app.php, line: 842'; params='@param int $page Page ID.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_entry'; match='get_entry'; definition='get_entry($postID, $post_type=\'post\')'; description='Display entry XML. 
'; file='/wp-app.php, line: 1117'; params='@param int $postID Post ID.  
@param string $post_type Optional, default is post. Post type.  '; return='string. '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_entry_url'; match='get_entry_url'; definition='get_entry_url($postID=null)'; description='Retrieve entry URL. 
'; file='/wp-app.php, line: 933'; params='@param int $postID Post ID.  '; return='string '; since='2.7.0 '; type='method';}, 
	{name='AtomServer::get_feed'; match='get_feed'; definition='get_feed($page=1, $post_type=\'post\')'; description='Retrieve feed XML. 
'; file='/wp-app.php, line: 1049'; params='@param int $page Page ID.  
@param string $post_type Optional, default is post. Post type.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_file'; match='get_file'; definition='get_file($postID)'; description='Retrieve attachment from post. 
'; file='/wp-app.php, line: 737'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_media_url'; match='get_media_url'; definition='get_media_url($postID=null)'; description='Retrieve media URL. 
'; file='/wp-app.php, line: 964'; params='@param int $postID Post ID.  '; return='string '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_post'; match='get_post'; definition='get_post($postID)'; description='Retrieve post. 
'; file='/wp-app.php, line: 468'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_posts'; match='get_posts'; definition='get_posts($page=1, $post_type=\'post\')'; description='Display posts XML. 
'; file='/wp-app.php, line: 1019'; params='@param int $page Optional. Page ID.  
@param string $post_type Optional, default is \'post\'. Post Type.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_publish_time'; match='get_publish_time'; definition='get_publish_time($published)'; description='Retrieve published time to display in XML. 
'; file='/wp-app.php, line: 1590'; params='@param string $published Time string.  '; return='string '; since='2.3.0 '; type='method';}, 
	{name='AtomServer::get_service'; match='get_service'; definition='get_service()'; description='Retrieve XML for ATOMPUB service. 
'; file='/wp-app.php, line: 320'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::get_service_url'; match='get_service_url'; definition='get_service_url()'; description='Retrieve service URL. 
'; file='/wp-app.php, line: 921'; return='string '; since='2.3.0 '; type='method';}, 
	{name='AtomServer::handle_request'; match='handle_request'; definition='handle_request()'; description='Handle ATOMPUB request. 
'; file='/wp-app.php, line: 260'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::internal_error'; match='internal_error'; definition='internal_error($msg=\'Internal Server Error\')'; description='Display &apos;Internal Server Error&apos; (500) status header. 
'; file='/wp-app.php, line: 1218'; params='@param string $msg Optional. Status string.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::invalid_media'; match='invalid_media'; definition='invalid_media()'; description='Set &apos;Unsupported Media Type&apos; (415) status header. 
'; file='/wp-app.php, line: 1256'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::length_required'; match='length_required'; definition='length_required()'; description='Set &apos;Length Required&apos; (411) status header. 
'; file='/wp-app.php, line: 1243'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::no_content'; match='no_content'; definition='no_content()'; description='Set &apos;No Content&apos; (204) status header. 
'; file='/wp-app.php, line: 1203'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::not_allowed'; match='not_allowed'; definition='not_allowed($allow)'; description='Set &apos;Not Allowed&apos; (405) status header. 
'; file='/wp-app.php, line: 1293'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::not_found'; match='not_found'; definition='not_found()'; description='Set &apos;Not Found&apos; (404) status header. 
'; file='/wp-app.php, line: 1281'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::ok'; match='ok'; definition='ok()'; description='Set &apos;OK&apos; (200) status header. 
'; file='/wp-app.php, line: 1191'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::output'; match='output'; definition='output($xml, $ctype=\'application/atom+xml\')'; description='Display XML and set headers with content type. 
'; file='/wp-app.php, line: 1408'; params='@param string $xml Display feed content.  
@param string $ctype Optional, default is \'atom+xml\'. Feed content type.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::process_conditionals'; match='process_conditionals'; definition='process_conditionals()'; description='Process conditionals for posts. 
'; file='/wp-app.php, line: 1519'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::put_attachment'; match='put_attachment'; definition='put_attachment($postID)'; description='Update attachment. 
'; file='/wp-app.php, line: 655'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::put_file'; match='put_file'; definition='put_file($postID)'; description='Upload file to blog and add attachment to post. 
'; file='/wp-app.php, line: 783'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::put_post'; match='put_post'; definition='put_post($postID)'; description='Update post. 
'; file='/wp-app.php, line: 488'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::redirect'; match='redirect'; definition='redirect($url)'; description='Display Redirect (302) content and set status headers. 
'; file='/wp-app.php, line: 1305'; since='2.3.0 '; type='method';}, 
	{name='AtomServer::rfc3339_str2time'; match='rfc3339_str2time'; definition='rfc3339_str2time($str)'; description='Convert RFC3339 time string to timestamp. 
'; file='/wp-app.php, line: 1570'; params='@param string $str String to time.  '; return='bool|int false if format is incorrect. '; since='2.3.0 '; type='method';}, 
	{name='AtomServer::set_current_entry'; match='set_current_entry'; definition='set_current_entry($postID)'; description='Set the current entry to post ID. 
'; file='/wp-app.php, line: 994'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::the_attachments_url'; match='the_attachments_url'; definition='the_attachments_url($page=null)'; description='Display attachment URL. 
'; file='/wp-app.php, line: 910'; params='@param int $page Page ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::the_categories_url'; match='the_categories_url'; definition='the_categories_url()'; description='Display category URL. 
'; file='/wp-app.php, line: 883'; since='2.2.0 '; type='method';}, 
	{name='AtomServer::the_entries_url'; match='the_entries_url'; definition='the_entries_url($page=null)'; description='Display entries URL. 
'; file='/wp-app.php, line: 860'; params='@param int $page Page ID.  '; since='2.2.0 '; type='method';}, 
	{name='AtomServer::the_entry_url'; match='the_entry_url'; definition='the_entry_url($postID=null)'; description='Display entry URL. 
'; file='/wp-app.php, line: 952'; params='@param int $postID Post ID.  '; since='2.7.0 '; type='method';}, 
	{name='AtomServer::the_media_url'; match='the_media_url'; definition='the_media_url($postID=null)'; description='Display the media URL. 
'; file='/wp-app.php, line: 983'; params='@param int $postID Post ID.  '; since='2.2.0 '; type='method';}, 
	{name='Bulk_Plugin_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1182'; type='method';}, 
	{name='Bulk_Plugin_Upgrader_Skin::add_strings'; match='add_strings'; definition='add_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1186'; type='method';}, 
	{name='Bulk_Plugin_Upgrader_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1195'; type='method';}, 
	{name='Bulk_Plugin_Upgrader_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1191'; type='method';}, 
	{name='Bulk_Plugin_Upgrader_Skin::bulk_footer'; match='bulk_footer'; definition='bulk_footer()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1198'; type='method';}, 
	{name='Bulk_Theme_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1214'; type='method';}, 
	{name='Bulk_Theme_Upgrader_Skin::add_strings'; match='add_strings'; definition='add_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1218'; type='method';}, 
	{name='Bulk_Theme_Upgrader_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1227'; type='method';}, 
	{name='Bulk_Theme_Upgrader_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1223'; type='method';}, 
	{name='Bulk_Theme_Upgrader_Skin::bulk_footer'; match='bulk_footer'; definition='bulk_footer()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1230'; type='method';}, 
	{name='Bulk_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1077'; type='method';}, 
	{name='Bulk_Upgrader_Skin::add_strings'; match='add_strings'; definition='add_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1084'; type='method';}, 
	{name='Bulk_Upgrader_Skin::after'; match='after'; definition='after($title=\'\')'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1149'; type='method';}, 
	{name='Bulk_Upgrader_Skin::before'; match='before'; definition='before($title=\'\')'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1141'; type='method';}, 
	{name='Bulk_Upgrader_Skin::bulk_footer'; match='bulk_footer'; definition='bulk_footer()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1137'; type='method';}, 
	{name='Bulk_Upgrader_Skin::bulk_header'; match='bulk_header'; definition='bulk_header()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1133'; type='method';}, 
	{name='Bulk_Upgrader_Skin::error'; match='error'; definition='error($error)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1117'; type='method';}, 
	{name='Bulk_Upgrader_Skin::feedback'; match='feedback'; definition='feedback($string)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1092'; type='method';}, 
	{name='Bulk_Upgrader_Skin::flush_output'; match='flush_output'; definition='flush_output()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1173'; type='method';}, 
	{name='Bulk_Upgrader_Skin::footer'; match='footer'; definition='footer()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1114'; type='method';}, 
	{name='Bulk_Upgrader_Skin::header'; match='header'; definition='header()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1110'; type='method';}, 
	{name='Bulk_Upgrader_Skin::reset'; match='reset'; definition='reset()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1168'; type='method';}, 
	{name='Core_Upgrader::upgrade'; match='upgrade'; definition='upgrade($current)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 869'; type='method';}, 
	{name='Core_Upgrader::upgrade_strings'; match='upgrade_strings'; definition='upgrade_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 861'; type='method';}, 
	{name='Custom_Background::__construct'; match='__construct'; definition='__construct($admin_header_callback=\'\', $admin_image_div_callback=\'\')'; description='Constructor - Register administration header callback. 
'; file='/wp-admin/custom-background.php, line: 53'; params='@param callback $admin_header_callback  
@param callback $admin_image_div_callback Optional custom image div output callback.  '; return='<code>Custom_Background</code> '; since='3.0.0 '; type='method';}, 
	{name='Custom_Background::admin_load'; match='admin_load'; definition='admin_load()'; description='Set up the enqueue for the CSS &amp; JavaScript files. 
'; file='/wp-admin/custom-background.php, line: 82'; since='3.0.0 '; type='method';}, 
	{name='Custom_Background::admin_page'; match='admin_page'; definition='admin_page()'; description='Display the custom background page. 
'; file='/wp-admin/custom-background.php, line: 165'; since='3.0.0 '; type='method';}, 
	{name='Custom_Background::handle_upload'; match='handle_upload'; definition='handle_upload()'; description='Handle an Image upload for the background image. 
'; file='/wp-admin/custom-background.php, line: 318'; since='3.0.0 '; type='method';}, 
	{name='Custom_Background::init'; match='init'; definition='init()'; description='Set up the hooks for the Custom Background admin page. 
'; file='/wp-admin/custom-background.php, line: 63'; since='3.0.0 '; type='method';}, 
	{name='Custom_Background::take_action'; match='take_action'; definition='take_action()'; description='Execute custom background modification. 
'; file='/wp-admin/custom-background.php, line: 99'; since='3.0.0 '; type='method';}, 
	{name='Custom_Image_Header::__construct'; match='__construct'; definition='__construct($admin_header_callback, $admin_image_div_callback=\'\')'; description='Constructor - Register administration header callback. 
'; file='/wp-admin/custom-header.php, line: 72'; params='@param callback $admin_header_callback  
@param callback $admin_image_div_callback Optional custom image div output callback.  '; return='<code>Custom_Image_Header</code> '; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::admin_page'; match='admin_page'; definition='admin_page()'; description='Display the page based on the current step. 
'; file='/wp-admin/custom-header.php, line: 778'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::css_includes'; match='css_includes'; definition='css_includes()'; description='Set up the enqueue for the CSS files 
'; file='/wp-admin/custom-header.php, line: 147'; since='2.7 '; type='method';}, 
	{name='Custom_Image_Header::finished'; match='finished'; definition='finished()'; description='Display last step of custom header image page. 
'; file='/wp-admin/custom-header.php, line: 768'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::header_text'; match='header_text'; definition='header_text()'; description='Check if header text is allowed 
'; file='/wp-admin/custom-header.php, line: 161'; since='3.0.0 '; type='method';}, 
	{name='Custom_Image_Header::help'; match='help'; definition='help()'; description='Adds contextual help. 
'; file='/wp-admin/custom-header.php, line: 101'; since='3.0.0 '; type='method';}, 
	{name='Custom_Image_Header::init'; match='init'; definition='init()'; description='Set up the hooks for the Custom Header admin page. 
'; file='/wp-admin/custom-header.php, line: 82'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::js'; match='js'; definition='js()'; description='Execute Javascript depending on step. 
'; file='/wp-admin/custom-header.php, line: 296'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::js_1'; match='js_1'; definition='js_1()'; description='Display Javascript based on Step 1 and 3. 
'; file='/wp-admin/custom-header.php, line: 309'; since='2.6.0 '; type='method';}, 
	{name='Custom_Image_Header::js_2'; match='js_2'; definition='js_2()'; description='Display Javascript based on Step 2. 
'; file='/wp-admin/custom-header.php, line: 402'; since='2.6.0 '; type='method';}, 
	{name='Custom_Image_Header::js_includes'; match='js_includes'; definition='js_includes()'; description='Set up the enqueue for the JavaScript files. 
'; file='/wp-admin/custom-header.php, line: 133'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::process_default_headers'; match='process_default_headers'; definition='process_default_headers()'; description='Process the default headers 
'; file='/wp-admin/custom-header.php, line: 234'; since='3.0.0 '; type='method';}, 
	{name='Custom_Image_Header::show_header_selector'; match='show_header_selector'; definition='show_header_selector($type=\'default\')'; description='Display UI for selecting one of several default headers. 
Show the random image option if this theme has multiple header images. Random image option is on by default if no header has been set. 
'; file='/wp-admin/custom-header.php, line: 259'; since='3.0.0 '; type='method';}, 
	{name='Custom_Image_Header::step'; match='step'; definition='step()'; description='Get the current step. 
'; file='/wp-admin/custom-header.php, line: 117'; return='int Current step '; since='2.6.0 '; type='method';}, 
	{name='Custom_Image_Header::step_1'; match='step_1'; definition='step_1()'; description='Display first step of custom header image page. 
'; file='/wp-admin/custom-header.php, line: 462'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::step_2'; match='step_2'; definition='step_2()'; description='Display second step of custom header image page. 
'; file='/wp-admin/custom-header.php, line: 627'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::step_3'; match='step_3'; definition='step_3()'; description='Display third step of custom header image page. 
'; file='/wp-admin/custom-header.php, line: 713'; since='2.1.0 '; type='method';}, 
	{name='Custom_Image_Header::take_action'; match='take_action'; definition='take_action()'; description='Execute custom header modification. 
'; file='/wp-admin/custom-header.php, line: 173'; since='2.6.0 '; type='method';}, 
	{name='EnchantSpell::checkWords'; match='checkWords'; definition='checkWords($lang, $words)'; description='Spellchecks an array of words. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/EnchantSpell.php, line: 20'; params='@param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1  
@param Array $words Array of words to check.  '; return='Array of misspelled words. '; type='method';}, 
	{name='EnchantSpell::getSuggestions'; match='getSuggestions'; definition='getSuggestions($lang, $word)'; description='Returns suggestions for a specific word. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/EnchantSpell.php, line: 49'; params='@param String $lang Selected language code (like en_US or de_DE). Shortcodes like \"en\" and \"de\" work with enchant >= 1.4.1  
@param String $word Specific word to get suggestions for.  '; return='Array of suggestions for the specified word. '; type='method';}, 
	{name='File_Upload_Upgrader::__construct'; match='__construct'; definition='__construct($form, $urlholder)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1433'; type='method';}, 
	{name='Gettext_Translations::gettext_select_plural_form'; match='gettext_select_plural_form'; definition='gettext_select_plural_form($count)'; description='The gettext implmentation of select_plural_form. 
It lives in this class, because there are more than one descendand, which will use it and they can&apos;t share it effectively. '; file='/wp-includes/pomo/translations.php, line: 121'; type='method';}, 
	{name='Gettext_Translations::make_headers'; match='make_headers'; definition='make_headers($translation)'; description=''; file='/wp-includes/pomo/translations.php, line: 184'; type='method';}, 
	{name='Gettext_Translations::make_plural_form_function'; match='make_plural_form_function'; definition='make_plural_form_function($nplurals, $expression)'; description='Makes a function, which will return the right translation index, according to the plural forms header '; file='/wp-includes/pomo/translations.php, line: 144'; type='method';}, 
	{name='Gettext_Translations::nplurals_and_expression_from_header'; match='nplurals_and_expression_from_header'; definition='nplurals_and_expression_from_header($header)'; description=''; file='/wp-includes/pomo/translations.php, line: 130'; type='method';}, 
	{name='Gettext_Translations::parenthesize_plural_exression'; match='parenthesize_plural_exression'; definition='parenthesize_plural_exression($expression)'; description='Adds parantheses to the inner parts of ternary operators in plural expressions, because PHP evaluates ternary oerators from left to right 
'; file='/wp-includes/pomo/translations.php, line: 159'; params='@param string $expression the expression without parentheses  '; return='string the expression with parentheses added '; type='method';}, 
	{name='Gettext_Translations::set_header'; match='set_header'; definition='set_header($header, $value)'; description=''; file='/wp-includes/pomo/translations.php, line: 197'; type='method';}, 
	{name='GoogleSpell::_getMatches'; match='_getMatches'; definition='_getMatches($lang, $str)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/GoogleSpell.php, line: 53'; type='method';}, 
	{name='GoogleSpell::_unhtmlentities'; match='_unhtmlentities'; definition='_unhtmlentities($string)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/GoogleSpell.php, line: 108'; type='method';}, 
	{name='GoogleSpell::checkWords'; match='checkWords'; definition='checkWords($lang, $words)'; description='Spellchecks an array of words. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/GoogleSpell.php, line: 18'; params='@param {String} $lang Language code like sv or en.  
@param {Array} $words Array of words to spellcheck.  '; return='{Array} Array of misspelled words. '; type='method';}, 
	{name='GoogleSpell::getSuggestions'; match='getSuggestions'; definition='getSuggestions($lang, $word)'; description='Returns suggestions of for a specific word. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/GoogleSpell.php, line: 36'; params='@param {String} $lang Language code like sv or en.  
@param {String} $word Specific word to get suggestions for.  '; return='{Array} Array of suggestions for the specified word. '; type='method';}, 
	{name='IXR_Base64::IXR_Base64'; match='IXR_Base64'; definition='IXR_Base64($data)'; description=''; file='/wp-includes/class-IXR.php, line: 858'; type='method';}, 
	{name='IXR_Base64::getXml'; match='getXml'; definition='getXml()'; description=''; file='/wp-includes/class-IXR.php, line: 863'; type='method';}, 
	{name='IXR_Client::IXR_Client'; match='IXR_Client'; definition='IXR_Client($server, $path=false, $port=80, $timeout=15)'; description=''; file='/wp-includes/class-IXR.php, line: 613'; type='method';}, 
	{name='IXR_Client::getErrorCode'; match='getErrorCode'; definition='getErrorCode()'; description=''; file='/wp-includes/class-IXR.php, line: 731'; type='method';}, 
	{name='IXR_Client::getErrorMessage'; match='getErrorMessage'; definition='getErrorMessage()'; description=''; file='/wp-includes/class-IXR.php, line: 736'; type='method';}, 
	{name='IXR_Client::getResponse'; match='getResponse'; definition='getResponse()'; description=''; file='/wp-includes/class-IXR.php, line: 720'; type='method';}, 
	{name='IXR_Client::isError'; match='isError'; definition='isError()'; description=''; file='/wp-includes/class-IXR.php, line: 726'; type='method';}, 
	{name='IXR_Client::query'; match='query'; definition='query()'; description=''; file='/wp-includes/class-IXR.php, line: 635'; type='method';}, 
	{name='IXR_ClientMulticall::IXR_ClientMulticall'; match='IXR_ClientMulticall'; definition='IXR_ClientMulticall($server, $path=false, $port=80)'; description=''; file='/wp-includes/class-IXR.php, line: 1042'; type='method';}, 
	{name='IXR_ClientMulticall::addCall'; match='addCall'; definition='addCall()'; description=''; file='/wp-includes/class-IXR.php, line: 1048'; type='method';}, 
	{name='IXR_ClientMulticall::query'; match='query'; definition='query()'; description=''; file='/wp-includes/class-IXR.php, line: 1059'; type='method';}, 
	{name='IXR_Date::IXR_Date'; match='IXR_Date'; definition='IXR_Date($time)'; description=''; file='/wp-includes/class-IXR.php, line: 800'; type='method';}, 
	{name='IXR_Date::getIso'; match='getIso'; definition='getIso()'; description=''; file='/wp-includes/class-IXR.php, line: 832'; type='method';}, 
	{name='IXR_Date::getTimestamp'; match='getTimestamp'; definition='getTimestamp()'; description=''; file='/wp-includes/class-IXR.php, line: 842'; type='method';}, 
	{name='IXR_Date::getXml'; match='getXml'; definition='getXml()'; description=''; file='/wp-includes/class-IXR.php, line: 837'; type='method';}, 
	{name='IXR_Date::parseIso'; match='parseIso'; definition='parseIso($iso)'; description=''; file='/wp-includes/class-IXR.php, line: 821'; type='method';}, 
	{name='IXR_Date::parseTimestamp'; match='parseTimestamp'; definition='parseTimestamp($timestamp)'; description=''; file='/wp-includes/class-IXR.php, line: 810'; type='method';}, 
	{name='IXR_Error::IXR_Error'; match='IXR_Error'; definition='IXR_Error($code, $message)'; description=''; file='/wp-includes/class-IXR.php, line: 754'; type='method';}, 
	{name='IXR_Error::getXml'; match='getXml'; definition='getXml()'; description=''; file='/wp-includes/class-IXR.php, line: 760'; type='method';}, 
	{name='IXR_IntrospectionServer::IXR_IntrospectionServer'; match='IXR_IntrospectionServer'; definition='IXR_IntrospectionServer()'; description=''; file='/wp-includes/class-IXR.php, line: 880'; type='method';}, 
	{name='IXR_IntrospectionServer::addCallback'; match='addCallback'; definition='addCallback($method, $callback, $args, $help)'; description=''; file='/wp-includes/class-IXR.php, line: 914'; type='method';}, 
	{name='IXR_IntrospectionServer::call'; match='call'; definition='call($methodname, $args)'; description=''; file='/wp-includes/class-IXR.php, line: 921'; type='method';}, 
	{name='IXR_IntrospectionServer::methodHelp'; match='methodHelp'; definition='methodHelp($method)'; description=''; file='/wp-includes/class-IXR.php, line: 1026'; type='method';}, 
	{name='IXR_IntrospectionServer::methodSignature'; match='methodSignature'; definition='methodSignature($method)'; description=''; file='/wp-includes/class-IXR.php, line: 986'; type='method';}, 
	{name='IXR_Message::IXR_Message'; match='IXR_Message'; definition='IXR_Message($message)'; description=''; file='/wp-includes/class-IXR.php, line: 198'; type='method';}, 
	{name='IXR_Message::cdata'; match='cdata'; definition='cdata($parser, $cdata)'; description=''; file='/wp-includes/class-IXR.php, line: 266'; type='method';}, 
	{name='IXR_Message::parse'; match='parse'; definition='parse()'; description=''; file='/wp-includes/class-IXR.php, line: 203'; type='method';}, 
	{name='IXR_Message::tag_close'; match='tag_close'; definition='tag_close($parser, $tag)'; description=''; file='/wp-includes/class-IXR.php, line: 271'; type='method';}, 
	{name='IXR_Message::tag_open'; match='tag_open'; definition='tag_open($parser, $tag, $attr)'; description=''; file='/wp-includes/class-IXR.php, line: 244'; type='method';}, 
	{name='IXR_Request::IXR_Request'; match='IXR_Request'; definition='IXR_Request($method, $args)'; description=''; file='/wp-includes/class-IXR.php, line: 560'; type='method';}, 
	{name='IXR_Request::getLength'; match='getLength'; definition='getLength()'; description=''; file='/wp-includes/class-IXR.php, line: 580'; type='method';}, 
	{name='IXR_Request::getXml'; match='getXml'; definition='getXml()'; description=''; file='/wp-includes/class-IXR.php, line: 585'; type='method';}, 
	{name='IXR_Server::IXR_Server'; match='IXR_Server'; definition='IXR_Server($callbacks=false, $data=false, $wait=false)'; description=''; file='/wp-includes/class-IXR.php, line: 357'; type='method';}, 
	{name='IXR_Server::call'; match='call'; definition='call($methodname, $args)'; description=''; file='/wp-includes/class-IXR.php, line: 420'; type='method';}, 
	{name='IXR_Server::error'; match='error'; definition='error($error, $message=false)'; description=''; file='/wp-includes/class-IXR.php, line: 459'; type='method';}, 
	{name='IXR_Server::getCapabilities'; match='getCapabilities'; definition='getCapabilities($args)'; description=''; file='/wp-includes/class-IXR.php, line: 504'; type='method';}, 
	{name='IXR_Server::hasMethod'; match='hasMethod'; definition='hasMethod($method)'; description=''; file='/wp-includes/class-IXR.php, line: 480'; type='method';}, 
	{name='IXR_Server::listMethods'; match='listMethods'; definition='listMethods($args)'; description=''; file='/wp-includes/class-IXR.php, line: 516'; type='method';}, 
	{name='IXR_Server::multiCall'; match='multiCall'; definition='multiCall($methodcalls)'; description=''; file='/wp-includes/class-IXR.php, line: 523'; type='method';}, 
	{name='IXR_Server::output'; match='output'; definition='output($xml)'; description=''; file='/wp-includes/class-IXR.php, line: 468'; type='method';}, 
	{name='IXR_Server::serve'; match='serve'; definition='serve($data=false)'; description=''; file='/wp-includes/class-IXR.php, line: 369'; type='method';}, 
	{name='IXR_Server::setCallbacks'; match='setCallbacks'; definition='setCallbacks()'; description=''; file='/wp-includes/class-IXR.php, line: 509'; type='method';}, 
	{name='IXR_Server::setCapabilities'; match='setCapabilities'; definition='setCapabilities()'; description=''; file='/wp-includes/class-IXR.php, line: 485'; type='method';}, 
	{name='IXR_Value::IXR_Value'; match='IXR_Value'; definition='IXR_Value($data, $type=false)'; description=''; file='/wp-includes/class-IXR.php, line: 53'; type='method';}, 
	{name='IXR_Value::calculateType'; match='calculateType'; definition='calculateType()'; description=''; file='/wp-includes/class-IXR.php, line: 73'; type='method';}, 
	{name='IXR_Value::getXml'; match='getXml'; definition='getXml()'; description=''; file='/wp-includes/class-IXR.php, line: 110'; type='method';}, 
	{name='IXR_Value::isStruct'; match='isStruct'; definition='isStruct($array)'; description='Checks whether or not the supplied array is a struct or not 
'; file='/wp-includes/class-IXR.php, line: 158'; params='@param unknown_type $array  '; return='boolean '; type='method';}, 
	{name='MagpieRSS::MagpieRSS'; match='MagpieRSS'; definition='MagpieRSS($source)'; description=''; file='/wp-includes/rss.php, line: 54'; type='method';}, 
	{name='MagpieRSS::append'; match='append'; definition='append($el, $text)'; description=''; file='/wp-includes/rss.php, line: 285'; type='method';}, 
	{name='MagpieRSS::append_content'; match='append_content'; definition='append_content($text)'; description=''; file='/wp-includes/rss.php, line: 275'; type='method';}, 
	{name='MagpieRSS::concat'; match='concat'; definition='concat($str1, $str2=\"\")'; description=''; file='/wp-includes/rss.php, line: 268'; type='method';}, 
	{name='MagpieRSS::error'; match='error'; definition='error($errormsg, $lvl=E_USER_WARNING)'; description=''; file='/wp-includes/rss.php, line: 379'; type='method';}, 
	{name='MagpieRSS::feed_cdata'; match='feed_cdata'; definition='feed_cdata($p, $text)'; description=''; file='/wp-includes/rss.php, line: 211'; type='method';}, 
	{name='MagpieRSS::feed_end_element'; match='feed_end_element'; definition='feed_end_element($p, $el)'; description=''; file='/wp-includes/rss.php, line: 223'; type='method';}, 
	{name='MagpieRSS::feed_start_element'; match='feed_start_element'; definition='feed_start_element($p, $element, $attrs)'; description=''; file='/wp-includes/rss.php, line: 97'; type='method';}, 
	{name='MagpieRSS::is_atom'; match='is_atom'; definition='is_atom()'; description=''; file='/wp-includes/rss.php, line: 366'; type='method';}, 
	{name='MagpieRSS::is_rss'; match='is_rss'; definition='is_rss()'; description=''; file='/wp-includes/rss.php, line: 357'; type='method';}, 
	{name='MagpieRSS::map_attrs'; match='map_attrs'; definition='map_attrs($k, $v)'; description=''; file='/wp-includes/rss.php, line: 375'; type='method';}, 
	{name='MagpieRSS::normalize'; match='normalize'; definition='normalize()'; description=''; file='/wp-includes/rss.php, line: 329'; type='method';}, 
	{name='Moxiecode_JSON::Moxiecode_JSON'; match='Moxiecode_JSON'; definition='Moxiecode_JSON()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 363'; type='method';}, 
	{name='Moxiecode_JSON::_encodeArray'; match='_encodeArray'; definition='_encodeArray($input)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 575'; type='method';}, 
	{name='Moxiecode_JSON::_utf82utf16'; match='_utf82utf16'; definition='_utf82utf16($utf8)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 557'; type='method';}, 
	{name='Moxiecode_JSON::addArray'; match='addArray'; definition='addArray($key)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 432'; type='method';}, 
	{name='Moxiecode_JSON::decode'; match='decode'; definition='decode($input)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 366'; type='method';}, 
	{name='Moxiecode_JSON::encode'; match='encode'; definition='encode($input)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 456'; type='method';}, 
	{name='Moxiecode_JSON::encodeString'; match='encodeString'; definition='encodeString($input)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 484'; type='method';}, 
	{name='Moxiecode_JSON::getDelim'; match='getDelim'; definition='getDelim($index, $reader)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 444'; type='method';}, 
	{name='Moxiecode_JSON::readValue'; match='readValue'; definition='readValue($reader)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 372'; type='method';}, 
	{name='Moxiecode_JSONReader::Moxiecode_JSONReader'; match='Moxiecode_JSONReader'; definition='Moxiecode_JSONReader($data)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 32'; type='method';}, 
	{name='Moxiecode_JSONReader::_int2utf8'; match='_int2utf8'; definition='_int2utf8($int)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 270'; type='method';}, 
	{name='Moxiecode_JSONReader::_readBool'; match='_readBool'; definition='_readBool($chr)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 159'; type='method';}, 
	{name='Moxiecode_JSONReader::_readNull'; match='_readNull'; definition='_readNull()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 176'; type='method';}, 
	{name='Moxiecode_JSONReader::_readNumber'; match='_readNumber'; definition='_readNumber($start)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 291'; type='method';}, 
	{name='Moxiecode_JSONReader::_readString'; match='_readString'; definition='_readString($quote)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 189'; type='method';}, 
	{name='Moxiecode_JSONReader::getLocation'; match='getLocation'; definition='getLocation()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 45'; type='method';}, 
	{name='Moxiecode_JSONReader::getToken'; match='getToken'; definition='getToken()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 41'; type='method';}, 
	{name='Moxiecode_JSONReader::getTokenName'; match='getTokenName'; definition='getTokenName()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 49'; type='method';}, 
	{name='Moxiecode_JSONReader::getValue'; match='getValue'; definition='getValue()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 85'; type='method';}, 
	{name='Moxiecode_JSONReader::peek'; match='peek'; definition='peek()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 349'; type='method';}, 
	{name='Moxiecode_JSONReader::read'; match='read'; definition='read($len=1)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 331'; type='method';}, 
	{name='Moxiecode_JSONReader::readAway'; match='readAway'; definition='readAway()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 322'; type='method';}, 
	{name='Moxiecode_JSONReader::readToken'; match='readToken'; definition='readToken()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 89'; type='method';}, 
	{name='Moxiecode_JSONReader::skip'; match='skip'; definition='skip($len)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/JSON.php, line: 345'; type='method';}, 
	{name='Moxiecode_Logger::Moxiecode_Logger'; match='Moxiecode_Logger'; definition='Moxiecode_Logger()'; description='Constructs a new logger instance. '; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 34'; type='method';}, 
	{name='Moxiecode_Logger::_logMsg'; match='_logMsg'; definition='_logMsg($level, $message)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 186'; type='method';}, 
	{name='Moxiecode_Logger::debug'; match='debug'; definition='debug($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 141'; type='method';}, 
	{name='Moxiecode_Logger::error'; match='error'; definition='error($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 156'; type='method';}, 
	{name='Moxiecode_Logger::fatal'; match='fatal'; definition='fatal($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 161'; type='method';}, 
	{name='Moxiecode_Logger::getFileName'; match='getFileName'; definition='getFileName()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 101'; type='method';}, 
	{name='Moxiecode_Logger::getFormat'; match='getFormat'; definition='getFormat()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 109'; type='method';}, 
	{name='Moxiecode_Logger::getLevel'; match='getLevel'; definition='getLevel()'; description='Returns the current log level for example MC_LOGGER_DEBUG. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 85'; return='int Current log level for example MC_LOGGER_DEBUG. '; type='method';}, 
	{name='Moxiecode_Logger::getMaxFiles'; match='getMaxFiles'; definition='getMaxFiles()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 137'; type='method';}, 
	{name='Moxiecode_Logger::getMaxSize'; match='getMaxSize'; definition='getMaxSize()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 129'; type='method';}, 
	{name='Moxiecode_Logger::getPath'; match='getPath'; definition='getPath()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 93'; type='method';}, 
	{name='Moxiecode_Logger::info'; match='info'; definition='info($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 146'; type='method';}, 
	{name='Moxiecode_Logger::isDebugEnabled'; match='isDebugEnabled'; definition='isDebugEnabled()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 166'; type='method';}, 
	{name='Moxiecode_Logger::isErrorEnabled'; match='isErrorEnabled'; definition='isErrorEnabled()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 178'; type='method';}, 
	{name='Moxiecode_Logger::isFatalEnabled'; match='isFatalEnabled'; definition='isFatalEnabled()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 182'; type='method';}, 
	{name='Moxiecode_Logger::isInfoEnabled'; match='isInfoEnabled'; definition='isInfoEnabled()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 170'; type='method';}, 
	{name='Moxiecode_Logger::isWarnEnabled'; match='isWarnEnabled'; definition='isWarnEnabled()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 174'; type='method';}, 
	{name='Moxiecode_Logger::setFileName'; match='setFileName'; definition='setFileName($file_name)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 97'; type='method';}, 
	{name='Moxiecode_Logger::setFormat'; match='setFormat'; definition='setFormat($format)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 105'; type='method';}, 
	{name='Moxiecode_Logger::setLevel'; match='setLevel'; definition='setLevel($level)'; description='Sets the current log level, use the MC_LOGGER constants. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 48'; params='@param int $level Log level instance for example MC_LOGGER_DEBUG.  '; type='method';}, 
	{name='Moxiecode_Logger::setMaxFiles'; match='setMaxFiles'; definition='setMaxFiles($max_files)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 133'; type='method';}, 
	{name='Moxiecode_Logger::setMaxSize'; match='setMaxSize'; definition='setMaxSize($size)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 113'; type='method';}, 
	{name='Moxiecode_Logger::setPath'; match='setPath'; definition='setPath($path)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 89'; type='method';}, 
	{name='Moxiecode_Logger::toOSPath'; match='toOSPath'; definition='toOSPath($path)'; description='Converts a Unix path to OS specific path. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 263'; params='@param String $path Unix path to convert.  '; type='method';}, 
	{name='Moxiecode_Logger::warn'; match='warn'; definition='warn($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/utils/Logger.php, line: 151'; type='method';}, 
	{name='PHPMailer::AddAddress'; match='AddAddress'; definition='AddAddress($address, $name=\'\')'; description='Adds a &quot;To&quot; address. '; file='/wp-includes/class-phpmailer.php, line: 407'; params='@param string $address  
@param string $name  '; return='boolean true on success, false if address already used '; type='method';}, 
	{name='PHPMailer::AddAnAddress'; match='AddAnAddress'; definition='AddAnAddress($kind, $address, $name=\'\')'; description='Adds an address to one of the recipient arrays Addresses that have been added already return false, but do not throw exceptions '; file='/wp-includes/class-phpmailer.php, line: 452'; params='@param string $kind One of \'to\', \'cc\', \'bcc\', \'ReplyTo\'  
@param string $address The email address to send to  
@param string $name  '; return='boolean true on success, false if address already used or invalid in some way '; type='method';}, 
	{name='PHPMailer::AddAttachment'; match='AddAttachment'; definition='AddAttachment($path, $name=\'\', $encoding=\'base64\', $type=\'application/octet-stream\')'; description='Adds an attachment from a path on the filesystem. Returns false if the file could not be found or accessed. '; file='/wp-includes/class-phpmailer.php, line: 1344'; params='@param string $path Path to the attachment.  
@param string $name Overrides the attachment name.  
@param string $encoding File encoding (see $Encoding).  
@param string $type File extension (MIME) type.  '; return='bool '; type='method';}, 
	{name='PHPMailer::AddBCC'; match='AddBCC'; definition='AddBCC($address, $name=\'\')'; description='Adds a &quot;Bcc&quot; address. Note: this function works with the <code>SMTP</code> mailer on win32, not with the &quot;mail&quot; mailer. '; file='/wp-includes/class-phpmailer.php, line: 429'; params='@param string $address  
@param string $name  '; return='boolean true on success, false if address already used '; type='method';}, 
	{name='PHPMailer::AddCC'; match='AddCC'; definition='AddCC($address, $name=\'\')'; description='Adds a &quot;Cc&quot; address. Note: this function works with the <code>SMTP</code> mailer on win32, not with the &quot;mail&quot; mailer. '; file='/wp-includes/class-phpmailer.php, line: 418'; params='@param string $address  
@param string $name  '; return='boolean true on success, false if address already used '; type='method';}, 
	{name='PHPMailer::AddCustomHeader'; match='AddCustomHeader'; definition='AddCustomHeader($custom_header)'; description='Adds a custom header. '; file='/wp-includes/class-phpmailer.php, line: 1994'; return='void '; type='method';}, 
	{name='PHPMailer::AddEmbeddedImage'; match='AddEmbeddedImage'; definition='AddEmbeddedImage($path, $cid, $name=\'\', $encoding=\'base64\', $type=\'application/octet-stream\')'; description='Adds an embedded attachment. This can include images, sounds, and just about any other document. Make sure to set the $type to an image type. For JPEG images use &quot;image/jpeg&quot; and for GIF images use &quot;image/gif&quot;. '; file='/wp-includes/class-phpmailer.php, line: 1783'; params='@param string $path Path to the attachment.  
@param string $cid Content ID of the attachment. Use this to identify the Id for accessing the image in an HTML form.  
@param string $name Overrides the attachment name.  
@param string $encoding File encoding (see $Encoding).  
@param string $type File extension (MIME) type.  '; return='bool '; type='method';}, 
	{name='PHPMailer::AddReplyTo'; match='AddReplyTo'; definition='AddReplyTo($address, $name=\'\')'; description='Adds a &quot;Reply-to&quot; address. '; file='/wp-includes/class-phpmailer.php, line: 439'; params='@param string $address  
@param string $name  '; return='boolean '; type='method';}, 
	{name='PHPMailer::AddStringAttachment'; match='AddStringAttachment'; definition='AddStringAttachment($string, $filename, $encoding=\'base64\', $type=\'application/octet-stream\')'; description='Adds a string or binary attachment (non-filesystem) to the list. This method can be used to attach ascii or binary data, such as a BLOB record from a database. '; file='/wp-includes/class-phpmailer.php, line: 1756'; params='@param string $string String attachment data.  
@param string $filename Name of the attachment.  
@param string $encoding File encoding (see $Encoding).  
@param string $type File extension (MIME) type.  '; return='void '; type='method';}, 
	{name='PHPMailer::AddrAppend'; match='AddrAppend'; definition='AddrAppend($type, $addr)'; description='Creates recipient headers. '; file='/wp-includes/class-phpmailer.php, line: 897'; return='string '; type='method';}, 
	{name='PHPMailer::AddrFormat'; match='AddrFormat'; definition='AddrFormat($addr)'; description='Formats an address correctly. '; file='/wp-includes/class-phpmailer.php, line: 914'; return='string '; type='method';}, 
	{name='PHPMailer::AttachAll'; match='AttachAll'; definition='AttachAll()'; description='Attaches all fs, string, and binary attachments to the message. Returns an empty string on failure. '; file='/wp-includes/class-phpmailer.php, line: 1392'; return='string '; type='method';}, 
	{name='PHPMailer::Base64EncodeWrapMB'; match='Base64EncodeWrapMB'; definition='Base64EncodeWrapMB($str)'; description='Correctly encodes and wraps long multibyte strings for mail headers without breaking lines within a character. Adapted from a function by paravoid at http://uk.php.net/manual/en/function.mb-encode-mimeheader.php '; file='/wp-includes/class-phpmailer.php, line: 1599'; params='@param string $str multi-byte text to wrap encode  '; return='string '; type='method';}, 
	{name='PHPMailer::ClearAddresses'; match='ClearAddresses'; definition='ClearAddresses()'; description='Clears all recipients assigned in the TO array. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1832'; return='void '; type='method';}, 
	{name='PHPMailer::ClearAllRecipients'; match='ClearAllRecipients'; definition='ClearAllRecipients()'; description='Clears all recipients assigned in the TO, CC and BCC array. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1874'; return='void '; type='method';}, 
	{name='PHPMailer::ClearAttachments'; match='ClearAttachments'; definition='ClearAttachments()'; description='Clears all previously set filesystem, string, and binary attachments. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1886'; return='void '; type='method';}, 
	{name='PHPMailer::ClearBCCs'; match='ClearBCCs'; definition='ClearBCCs()'; description='Clears all recipients assigned in the BCC array. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1854'; return='void '; type='method';}, 
	{name='PHPMailer::ClearCCs'; match='ClearCCs'; definition='ClearCCs()'; description='Clears all recipients assigned in the CC array. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1843'; return='void '; type='method';}, 
	{name='PHPMailer::ClearCustomHeaders'; match='ClearCustomHeaders'; definition='ClearCustomHeaders()'; description='Clears all custom headers. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1894'; return='void '; type='method';}, 
	{name='PHPMailer::ClearReplyTos'; match='ClearReplyTos'; definition='ClearReplyTos()'; description='Clears all recipients assigned in the ReplyTo array. Returns void. '; file='/wp-includes/class-phpmailer.php, line: 1865'; return='void '; type='method';}, 
	{name='PHPMailer::CreateBody'; match='CreateBody'; definition='CreateBody()'; description='Assembles the message body. Returns an empty string on failure. '; file='/wp-includes/class-phpmailer.php, line: 1190'; return='string The assembled message body '; type='method';}, 
	{name='PHPMailer::CreateHeader'; match='CreateHeader'; definition='CreateHeader()'; description='Assembles message header. '; file='/wp-includes/class-phpmailer.php, line: 1073'; return='string The assembled header '; type='method';}, 
	{name='PHPMailer::DKIM_Add'; match='DKIM_Add'; definition='DKIM_Add($headers_line, $subject, $body)'; description='Create the DKIM header, body, as new header 
'; file='/wp-includes/class-phpmailer.php, line: 2271'; params='@param string $headers_line Header lines  
@param string $subject Subject  
@param string $body Body  '; type='method';}, 
	{name='PHPMailer::DKIM_BodyC'; match='DKIM_BodyC'; definition='DKIM_BodyC($body)'; description='Generate DKIM Canonicalization Body 
'; file='/wp-includes/class-phpmailer.php, line: 2251'; params='@param string $body Message Body  '; type='method';}, 
	{name='PHPMailer::DKIM_HeaderC'; match='DKIM_HeaderC'; definition='DKIM_HeaderC($s)'; description='Generate DKIM Canonicalization Header 
'; file='/wp-includes/class-phpmailer.php, line: 2232'; params='@param string $s Header  '; type='method';}, 
	{name='PHPMailer::DKIM_QP'; match='DKIM_QP'; definition='DKIM_QP($txt)'; description='Set the private key file and password to sign the message. 
'; file='/wp-includes/class-phpmailer.php, line: 2194'; params='@param string $key_filename Parameter File Name  
@param string $key_pass Password for private key  '; type='method';}, 
	{name='PHPMailer::DKIM_Sign'; match='DKIM_Sign'; definition='DKIM_Sign($s)'; description='Generate DKIM signature 
'; file='/wp-includes/class-phpmailer.php, line: 2214'; params='@param string $s Header  '; type='method';}, 
	{name='PHPMailer::EncodeFile'; match='EncodeFile'; definition='EncodeFile($path, $encoding=\'base64\')'; description='Encodes attachment in requested format. Returns an empty string on failure. @see EncodeFile() '; file='/wp-includes/class-phpmailer.php, line: 1459'; params='@param string $path The full path to the file  
@param string $encoding The encoding to use; one of \'base64\', \'7bit\', \'8bit\', \'binary\', \'quoted-printable\'  '; return='string '; type='method';}, 
	{name='PHPMailer::EncodeHeader'; match='EncodeHeader'; definition='EncodeHeader($str, $position=\'text\')'; description='Encode a header string to best (shortest) of Q, B, quoted or none. '; file='/wp-includes/class-phpmailer.php, line: 1522'; return='string '; type='method';}, 
	{name='PHPMailer::EncodeQ'; match='EncodeQ'; definition='EncodeQ($str, $position=\'text\')'; description='Encode string to q encoding. <code>string $str the text to encode string $position Where the text is going to be used, see the RFC for what that means access 245. string </code> '; file='/wp-includes/class-phpmailer.php, line: 1721'; type='method';}, 
	{name='PHPMailer::EncodeQP'; match='EncodeQP'; definition='EncodeQP($string, $line_max=76, $space_conv=false)'; description='Encode string to RFC2045 (6.7) quoted-printable format Uses a PHP5 stream filter to do the encoding about 64x faster than the old version Also results in same content as you started with after decoding @see <code>EncodeQPphp()</code> @author Marcus Bointon '; file='/wp-includes/class-phpmailer.php, line: 1692'; params='@param string $string the text to encode  
@param integer $line_max Number of chars allowed on a line before wrapping  
@param boolean $space_conv Dummy param for compatibility with existing EncodeQP function  '; return='string '; type='method';}, 
	{name='PHPMailer::EncodeQPphp'; match='EncodeQPphp'; definition='EncodeQPphp($input=\'\', $line_max=76, $space_conv=false)'; description='Encode string to quoted-printable. Only uses standard PHP, slow, but will always work '; file='/wp-includes/class-phpmailer.php, line: 1639'; params='@param string $string the text to encode  
@param integer $line_max Number of chars allowed on a line before wrapping  '; return='string '; type='method';}, 
	{name='PHPMailer::EncodeString'; match='EncodeString'; definition='EncodeString($str, $encoding=\'base64\')'; description='Encodes string to requested format. Returns an empty string on failure. '; file='/wp-includes/class-phpmailer.php, line: 1491'; params='@param string $str The text to encode  
@param string $encoding The encoding to use; one of \'base64\', \'7bit\', \'8bit\', \'binary\', \'quoted-printable\'  '; return='string '; type='method';}, 
	{name='PHPMailer::EndBoundary'; match='EndBoundary'; definition='EndBoundary($boundary)'; description='Returns the end of a message boundary. '; file='/wp-includes/class-phpmailer.php, line: 1287'; type='method';}, 
	{name='PHPMailer::FixEOL'; match='FixEOL'; definition='FixEOL($str)'; description='Changes every end of line from CR or LF to CRLF. '; file='/wp-includes/class-phpmailer.php, line: 1982'; return='string '; type='method';}, 
	{name='PHPMailer::GetAttachments'; match='GetAttachments'; definition='GetAttachments()'; description='Return the current array of attachments '; file='/wp-includes/class-phpmailer.php, line: 1382'; return='array '; type='method';}, 
	{name='PHPMailer::GetBoundary'; match='GetBoundary'; definition='GetBoundary($boundary, $charSet, $contentType, $encoding)'; description='Returns the start of a message boundary. '; file='/wp-includes/class-phpmailer.php, line: 1263'; type='method';}, 
	{name='PHPMailer::GetMailMIME'; match='GetMailMIME'; definition='GetMailMIME()'; description='Returns the message MIME. '; file='/wp-includes/class-phpmailer.php, line: 1156'; return='string '; type='method';}, 
	{name='PHPMailer::GetTranslations'; match='GetTranslations'; definition='GetTranslations()'; description='Return the current array of language strings '; file='/wp-includes/class-phpmailer.php, line: 884'; return='array '; type='method';}, 
	{name='PHPMailer::HasMultiBytes'; match='HasMultiBytes'; definition='HasMultiBytes($str)'; description='Checks if a string contains multibyte characters. '; file='/wp-includes/class-phpmailer.php, line: 1583'; params='@param string $str multi-byte text to wrap encode  '; return='bool '; type='method';}, 
	{name='PHPMailer::HeaderLine'; match='HeaderLine'; definition='HeaderLine($name, $value)'; description='Returns a formatted header line. '; file='/wp-includes/class-phpmailer.php, line: 1317'; return='string '; type='method';}, 
	{name='PHPMailer::InlineImageExists'; match='InlineImageExists'; definition='InlineImageExists()'; description='Returns true if an inline attachment is present. '; file='/wp-includes/class-phpmailer.php, line: 1815'; return='bool '; type='method';}, 
	{name='PHPMailer::IsError'; match='IsError'; definition='IsError()'; description='Returns true if an error occurred. '; file='/wp-includes/class-phpmailer.php, line: 1973'; return='bool '; type='method';}, 
	{name='PHPMailer::IsHTML'; match='IsHTML'; definition='IsHTML($ishtml=true)'; description='Sets message type to HTML. '; file='/wp-includes/class-phpmailer.php, line: 351'; params='@param bool $ishtml  '; return='void '; type='method';}, 
	{name='PHPMailer::IsMail'; match='IsMail'; definition='IsMail()'; description='Sets Mailer to send message using PHP mail() function. '; file='/wp-includes/class-phpmailer.php, line: 371'; return='void '; type='method';}, 
	{name='PHPMailer::IsQmail'; match='IsQmail'; definition='IsQmail()'; description='Sets Mailer to send message using the qmail MTA. '; file='/wp-includes/class-phpmailer.php, line: 390'; return='void '; type='method';}, 
	{name='PHPMailer::IsSMTP'; match='IsSMTP'; definition='IsSMTP()'; description='Sets Mailer to send message using <code>SMTP</code> . '; file='/wp-includes/class-phpmailer.php, line: 363'; return='void '; type='method';}, 
	{name='PHPMailer::IsSendmail'; match='IsSendmail'; definition='IsSendmail()'; description='Sets Mailer to send message using the $Sendmail program. '; file='/wp-includes/class-phpmailer.php, line: 379'; return='void '; type='method';}, 
	{name='PHPMailer::Lang'; match='Lang'; definition='Lang($key)'; description='Returns a message in the appropriate language. '; file='/wp-includes/class-phpmailer.php, line: 1956'; return='string '; type='method';}, 
	{name='PHPMailer::MailSend'; match='MailSend'; definition='MailSend($header, $body)'; description='Sends mail using the PHP mail() function. '; file='/wp-includes/class-phpmailer.php, line: 644'; params='@param string $header The message headers  
@param string $body The message body  '; return='bool '; type='method';}, 
	{name='PHPMailer::MsgHTML'; match='MsgHTML'; definition='MsgHTML($message, $basedir=\'\')'; description='Evaluates the message and returns modifications for inline images and backgrounds '; file='/wp-includes/class-phpmailer.php, line: 2003'; return='$message '; type='method';}, 
	{name='PHPMailer::SecureHeader'; match='SecureHeader'; definition='SecureHeader($str)'; description='Strips newlines to prevent header injection. '; file='/wp-includes/class-phpmailer.php, line: 2168'; params='@param string $str String  '; return='string '; type='method';}, 
	{name='PHPMailer::Send'; match='Send'; definition='Send()'; description='Creates message and assigns Mailer. If the message is not sent successfully then it returns false. Use the ErrorInfo variable to view description of the error. '; file='/wp-includes/class-phpmailer.php, line: 545'; return='bool '; type='method';}, 
	{name='PHPMailer::SendmailSend'; match='SendmailSend'; definition='SendmailSend($header, $body)'; description='Sends mail using the $Sendmail program. '; file='/wp-includes/class-phpmailer.php, line: 598'; params='@param string $header The message headers  
@param string $body The message body  '; return='bool '; type='method';}, 
	{name='PHPMailer::ServerHostname'; match='ServerHostname'; definition='ServerHostname()'; description='Returns the server hostname or &apos;localhost.localdomain&apos; if unknown. '; file='/wp-includes/class-phpmailer.php, line: 1939'; return='string '; type='method';}, 
	{name='PHPMailer::SetError'; match='SetError'; definition='SetError($msg)'; description='Adds the error message to the error container. '; file='/wp-includes/class-phpmailer.php, line: 1907'; return='void '; type='method';}, 
	{name='PHPMailer::SetFrom'; match='SetFrom'; definition='SetFrom($address, $name=\'\', $auto=1)'; description='Set the From and FromName properties '; file='/wp-includes/class-phpmailer.php, line: 488'; params='@param string $address  
@param string $name  '; return='boolean '; type='method';}, 
	{name='PHPMailer::SetLanguage'; match='SetLanguage'; definition='SetLanguage($langcode=\'en\', $lang_path=\'language/\')'; description='Sets the language for all class error messages. Returns false if it cannot load the language file. The default language is English. '; file='/wp-includes/class-phpmailer.php, line: 850'; params='@param string $langcode ISO 639-1 2-character language code (e.g. Portuguese: \"br\")  
@param string $lang_path Path to the language file directory  '; type='method';}, 
	{name='PHPMailer::SetMessageType'; match='SetMessageType'; definition='SetMessageType()'; description='Sets the message type. '; file='/wp-includes/class-phpmailer.php, line: 1296'; return='void '; type='method';}, 
	{name='PHPMailer::SetWordWrap'; match='SetWordWrap'; definition='SetWordWrap()'; description='Set the body wrapping. '; file='/wp-includes/class-phpmailer.php, line: 1052'; return='void '; type='method';}, 
	{name='PHPMailer::Sign'; match='Sign'; definition='Sign($cert_filename, $key_filename, $key_pass)'; description='Set the private key file and password to sign the message. 
'; file='/wp-includes/class-phpmailer.php, line: 2181'; params='@param string $key_filename Parameter File Name  
@param string $key_pass Password for private key  '; type='method';}, 
	{name='PHPMailer::SmtpClose'; match='SmtpClose'; definition='SmtpClose()'; description='Closes the active <code>SMTP</code> session if one exists. '; file='/wp-includes/class-phpmailer.php, line: 834'; return='void '; type='method';}, 
	{name='PHPMailer::SmtpConnect'; match='SmtpConnect'; definition='SmtpConnect()'; description='Initiates a connection to an <code>SMTP</code> server. Returns false if the operation failed. '; file='/wp-includes/class-phpmailer.php, line: 772'; return='bool '; uses=' '; type='method';}, 
	{name='PHPMailer::SmtpSend'; match='SmtpSend'; definition='SmtpSend($header, $body)'; description='Sends mail via <code>SMTP</code> using PhpSMTP Returns false if there is a bad MAIL FROM, RCPT, or DATA input. '; file='/wp-includes/class-phpmailer.php, line: 701'; params='@param string $header The message headers  
@param string $body The message body  '; return='bool '; uses=' '; type='method';}, 
	{name='PHPMailer::TextLine'; match='TextLine'; definition='TextLine($value)'; description='Returns a formatted mail line. '; file='/wp-includes/class-phpmailer.php, line: 1326'; return='string '; type='method';}, 
	{name='PHPMailer::UTF8CharBoundary'; match='UTF8CharBoundary'; definition='UTF8CharBoundary($encodedText, $maxLength)'; description='Finds last character boundary prior to maxLength in a utf-8 quoted (printable) encoded string. Original written by Colin Brown. '; file='/wp-includes/class-phpmailer.php, line: 1014'; params='@param string $encodedText utf-8 QP text  
@param int $maxLength find last character boundary prior to this length  '; return='int '; type='method';}, 
	{name='PHPMailer::WrapText'; match='WrapText'; definition='WrapText($message, $length, $qp_mode=false)'; description='Wraps message for use with mailers that do not automatically perform wrapping and for quoted-printable. Original written by philippe. '; file='/wp-includes/class-phpmailer.php, line: 932'; params='@param string $message The message to wrap  
@param integer $length The line length to wrap to  
@param boolean $qp_mode Whether to run in Quoted-Printable mode  '; return='string '; type='method';}, 
	{name='PHPMailer::__construct'; match='__construct'; definition='__construct($exceptions=false)'; description='Constructor '; file='/wp-includes/class-phpmailer.php, line: 342'; params='@param boolean $exceptions Should we throw external exceptions?  '; type='method';}, 
	{name='PHPMailer::doCallback'; match='doCallback'; definition='doCallback($isSent, $to, $cc, $bcc, $subject, $body)'; description=''; file='/wp-includes/class-phpmailer.php, line: 2306'; type='method';}, 
	{name='PHPMailer::set'; match='set'; definition='set($name, $value=\'\')'; description='Set (or reset) Class Objects (variables) 
Usage Example: $page-&gt;set(&apos;X-Priority&apos;, &apos;3&apos;); 
'; file='/wp-includes/class-phpmailer.php, line: 2146'; params='@param string $name Parameter Name  
@param mixed $value Parameter Value NOTE: will not work with arrays, there are no arrays to set/reset  '; type='method';}, 
	{name='POP3::POP3'; match='POP3'; definition='POP3($server=\'\', $timeout=\'\')'; description=''; file='/wp-includes/class-pop3.php, line: 47'; type='method';}, 
	{name='POP3::apop'; match='apop'; definition='apop($login, $pass)'; description=''; file='/wp-includes/class-pop3.php, line: 155'; type='method';}, 
	{name='POP3::connect'; match='connect'; definition='connect($server, $port=110)'; description=''; file='/wp-includes/class-pop3.php, line: 71'; type='method';}, 
	{name='POP3::delete'; match='delete'; definition='delete($msgNum=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 572'; type='method';}, 
	{name='POP3::get'; match='get'; definition='get($msgNum)'; description=''; file='/wp-includes/class-pop3.php, line: 340'; type='method';}, 
	{name='POP3::is_ok'; match='is_ok'; definition='is_ok($cmd=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 599'; type='method';}, 
	{name='POP3::last'; match='last'; definition='last($type=\"count\")'; description=''; file='/wp-includes/class-pop3.php, line: 378'; type='method';}, 
	{name='POP3::login'; match='login'; definition='login($login=\"\", $pass=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 199'; type='method';}, 
	{name='POP3::parse_banner'; match='parse_banner'; definition='parse_banner($server_text)'; description=''; file='/wp-includes/class-pop3.php, line: 619'; type='method';}, 
	{name='POP3::pass'; match='pass'; definition='pass($pass=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 130'; type='method';}, 
	{name='POP3::pop_list'; match='pop_list'; definition='pop_list($msgNum=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 265'; type='method';}, 
	{name='POP3::popstat'; match='popstat'; definition='popstat()'; description=''; file='/wp-includes/class-pop3.php, line: 490'; type='method';}, 
	{name='POP3::quit'; match='quit'; definition='quit()'; description=''; file='/wp-includes/class-pop3.php, line: 470'; type='method';}, 
	{name='POP3::reset'; match='reset'; definition='reset()'; description=''; file='/wp-includes/class-pop3.php, line: 409'; type='method';}, 
	{name='POP3::send_cmd'; match='send_cmd'; definition='send_cmd($cmd=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 434'; type='method';}, 
	{name='POP3::strip_clf'; match='strip_clf'; definition='strip_clf($text=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 608'; type='method';}, 
	{name='POP3::top'; match='top'; definition='top($msgNum, $numLines=\"0\")'; description=''; file='/wp-includes/class-pop3.php, line: 223'; type='method';}, 
	{name='POP3::uidl'; match='uidl'; definition='uidl($msgNum=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 506'; type='method';}, 
	{name='POP3::update_timer'; match='update_timer'; definition='update_timer()'; description=''; file='/wp-includes/class-pop3.php, line: 65'; type='method';}, 
	{name='POP3::user'; match='user'; definition='user($user=\"\")'; description=''; file='/wp-includes/class-pop3.php, line: 111'; type='method';}, 
	{name='PSpell::_getPLink'; match='_getPLink'; definition='_getPLink($lang)'; description='Opens a link for pspell. '; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpell.php, line: 49'; type='method';}, 
	{name='PSpell::checkWords'; match='checkWords'; definition='checkWords($lang, $words)'; description='Spellchecks an array of words. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpell.php, line: 18'; params='@param {String} $lang Language code like sv or en.  
@param {Array} $words Array of words to spellcheck.  '; return='{Array} Array of misspelled words. '; type='method';}, 
	{name='PSpell::getSuggestions'; match='getSuggestions'; definition='getSuggestions($lang, $word)'; description='Returns suggestions of for a specific word. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpell.php, line: 37'; params='@param {String} $lang Language code like sv or en.  
@param {String} $word Specific word to get suggestions for.  '; return='{Array} Array of suggestions for the specified word. '; type='method';}, 
	{name='PSpellShell::_getCMD'; match='_getCMD'; definition='_getCMD($lang)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpellShell.php, line: 103'; type='method';}, 
	{name='PSpellShell::checkWords'; match='checkWords'; definition='checkWords($lang, $words)'; description='Spellchecks an array of words. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpellShell.php, line: 18'; params='@param {String} $lang Language code like sv or en.  
@param {Array} $words Array of words to spellcheck.  '; return='{Array} Array of misspelled words. '; type='method';}, 
	{name='PSpellShell::getSuggestions'; match='getSuggestions'; definition='getSuggestions($lang, $word)'; description='Returns suggestions of for a specific word. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/PSpellShell.php, line: 60'; params='@param {String} $lang Language code like sv or en.  
@param {String} $word Specific word to get suggestions for.  '; return='{Array} Array of suggestions for the specified word. '; type='method';}, 
	{name='PasswordHash::CheckPassword'; match='CheckPassword'; definition='CheckPassword($password, $stored_hash)'; description=''; file='/wp-includes/class-phpass.php, line: 251'; type='method';}, 
	{name='PasswordHash::HashPassword'; match='HashPassword'; definition='HashPassword($password)'; description=''; file='/wp-includes/class-phpass.php, line: 216'; type='method';}, 
	{name='PasswordHash::PasswordHash'; match='PasswordHash'; definition='PasswordHash($iteration_count_log2, $portable_hashes)'; description=''; file='/wp-includes/class-phpass.php, line: 43'; type='method';}, 
	{name='PasswordHash::crypt_private'; match='crypt_private'; definition='crypt_private($password, $setting)'; description=''; file='/wp-includes/class-phpass.php, line: 112'; type='method';}, 
	{name='PasswordHash::encode64'; match='encode64'; definition='encode64($input, $count)'; description=''; file='/wp-includes/class-phpass.php, line: 79'; type='method';}, 
	{name='PasswordHash::gensalt_blowfish'; match='gensalt_blowfish'; definition='gensalt_blowfish($input)'; description=''; file='/wp-includes/class-phpass.php, line: 175'; type='method';}, 
	{name='PasswordHash::gensalt_extended'; match='gensalt_extended'; definition='gensalt_extended($input)'; description=''; file='/wp-includes/class-phpass.php, line: 157'; type='method';}, 
	{name='PasswordHash::gensalt_private'; match='gensalt_private'; definition='gensalt_private($input)'; description=''; file='/wp-includes/class-phpass.php, line: 102'; type='method';}, 
	{name='PasswordHash::get_random_bytes'; match='get_random_bytes'; definition='get_random_bytes($count)'; description=''; file='/wp-includes/class-phpass.php, line: 56'; type='method';}, 
	{name='PclZip::PclZip'; match='PclZip'; definition='PclZip($p_zipname)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 216'; type='method';}, 
	{name='PclZip::add'; match='add'; definition='add($p_filelist)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 455'; type='method';}, 
	{name='PclZip::create'; match='create'; definition='create($p_filelist)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 272'; type='method';}, 
	{name='PclZip::delete'; match='delete'; definition='delete()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1007'; type='method';}, 
	{name='PclZip::deleteByIndex'; match='deleteByIndex'; definition='deleteByIndex($p_index)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1066'; type='method';}, 
	{name='PclZip::duplicate'; match='duplicate'; definition='duplicate($p_archive)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1163'; type='method';}, 
	{name='PclZip::errorCode'; match='errorCode'; definition='errorCode()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1273'; type='method';}, 
	{name='PclZip::errorInfo'; match='errorInfo'; definition='errorInfo($p_full=false)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1335'; type='method';}, 
	{name='PclZip::errorName'; match='errorName'; definition='errorName($p_with_code=false)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1289'; type='method';}, 
	{name='PclZip::extract'; match='extract'; definition='extract()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 701'; type='method';}, 
	{name='PclZip::extractByIndex'; match='extractByIndex'; definition='extractByIndex($p_index)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 858'; type='method';}, 
	{name='PclZip::listContent'; match='listContent'; definition='listContent()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 644'; type='method';}, 
	{name='PclZip::merge'; match='merge'; definition='merge($p_archive_to_add)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1222'; type='method';}, 
	{name='PclZip::privAdd'; match='privAdd'; definition='privAdd($p_filedescr_list, $p_result_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2160'; type='method';}, 
	{name='PclZip::privAddFile'; match='privAddFile'; definition='privAddFile($p_filedescr, $p_header, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2526'; type='method';}, 
	{name='PclZip::privAddFileList'; match='privAddFileList'; definition='privAddFileList($p_filedescr_list, $p_result_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2464'; type='method';}, 
	{name='PclZip::privAddFileUsingTempFile'; match='privAddFileUsingTempFile'; definition='privAddFileUsingTempFile($p_filedescr, $p_header, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2797'; type='method';}, 
	{name='PclZip::privAddList'; match='privAddList'; definition='privAddList($p_filedescr_list, $p_result_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2400'; type='method';}, 
	{name='PclZip::privCalculateStoredFilename'; match='privCalculateStoredFilename'; definition='privCalculateStoredFilename($p_filedescr, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2909'; type='method';}, 
	{name='PclZip::privCheckFileHeaders'; match='privCheckFileHeaders'; definition='privCheckFileHeaders($p_local_header, $p_central_header)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4482'; type='method';}, 
	{name='PclZip::privCheckFormat'; match='privCheckFormat'; definition='privCheckFormat($p_level=0)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1374'; type='method';}, 
	{name='PclZip::privCloseFd'; match='privCloseFd'; definition='privCloseFd()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2373'; type='method';}, 
	{name='PclZip::privConvertHeader2FileInfo'; match='privConvertHeader2FileInfo'; definition='privConvertHeader2FileInfo($p_header, $p_info)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3235'; type='method';}, 
	{name='PclZip::privCreate'; match='privCreate'; definition='privCreate($p_filedescr_list, $p_result_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2125'; type='method';}, 
	{name='PclZip::privDeleteByRule'; match='privDeleteByRule'; definition='privDeleteByRule($p_result_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4676'; type='method';}, 
	{name='PclZip::privDirCheck'; match='privDirCheck'; definition='privDirCheck($p_dir, $p_is_dir=false)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4986'; type='method';}, 
	{name='PclZip::privDisableMagicQuotes'; match='privDisableMagicQuotes'; definition='privDisableMagicQuotes()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5321'; type='method';}, 
	{name='PclZip::privDuplicate'; match='privDuplicate'; definition='privDuplicate($p_archive_filename)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5226'; type='method';}, 
	{name='PclZip::privErrorLog'; match='privErrorLog'; definition='privErrorLog($p_error_code=0, $p_error_string=\'\')'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5286'; type='method';}, 
	{name='PclZip::privErrorReset'; match='privErrorReset'; definition='privErrorReset()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5303'; type='method';}, 
	{name='PclZip::privExtractByRule'; match='privExtractByRule'; definition='privExtractByRule($p_file_list, $p_path, $p_remove_path, $p_remove_all_path, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3274'; type='method';}, 
	{name='PclZip::privExtractFile'; match='privExtractFile'; definition='privExtractFile($p_entry, $p_path, $p_remove_path, $p_remove_all_path, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3614'; type='method';}, 
	{name='PclZip::privExtractFileAsString'; match='privExtractFileAsString'; definition='privExtractFileAsString($p_entry, $p_string, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4150'; type='method';}, 
	{name='PclZip::privExtractFileInOutput'; match='privExtractFileInOutput'; definition='privExtractFileInOutput($p_entry, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4039'; type='method';}, 
	{name='PclZip::privExtractFileUsingTempFile'; match='privExtractFileUsingTempFile'; definition='privExtractFileUsingTempFile($p_entry, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3963'; type='method';}, 
	{name='PclZip::privFileDescrExpand'; match='privFileDescrExpand'; definition='privFileDescrExpand($p_filedescr_list, $p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2000'; type='method';}, 
	{name='PclZip::privFileDescrParseAtt'; match='privFileDescrParseAtt'; definition='privFileDescrParseAtt($p_file_list, $p_filedescr, $v_options, $v_requested_options=false)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1871'; type='method';}, 
	{name='PclZip::privList'; match='privList'; definition='privList($p_list)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3148'; type='method';}, 
	{name='PclZip::privMerge'; match='privMerge'; definition='privMerge($p_archive_to_add)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5041'; type='method';}, 
	{name='PclZip::privOpenFd'; match='privOpenFd'; definition='privOpenFd($p_mode)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 2339'; type='method';}, 
	{name='PclZip::privOptionDefaultThreshold'; match='privOptionDefaultThreshold'; definition='privOptionDefaultThreshold($p_options)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1827'; type='method';}, 
	{name='PclZip::privParseOptions'; match='privParseOptions'; definition='privParseOptions($p_options_list, $p_size, $v_result_list, $v_requested_options=false)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1427'; type='method';}, 
	{name='PclZip::privReadCentralFileHeader'; match='privReadCentralFileHeader'; definition='privReadCentralFileHeader($p_header)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4374'; type='method';}, 
	{name='PclZip::privReadEndCentralDir'; match='privReadEndCentralDir'; definition='privReadEndCentralDir($p_central_dir)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4519'; type='method';}, 
	{name='PclZip::privReadFileHeader'; match='privReadFileHeader'; definition='privReadFileHeader($p_header)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 4271'; type='method';}, 
	{name='PclZip::privSwapBackMagicQuotes'; match='privSwapBackMagicQuotes'; definition='privSwapBackMagicQuotes()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5355'; type='method';}, 
	{name='PclZip::privWriteCentralFileHeader'; match='privWriteCentralFileHeader'; definition='privWriteCentralFileHeader($p_header)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3066'; type='method';}, 
	{name='PclZip::privWriteCentralHeader'; match='privWriteCentralHeader'; definition='privWriteCentralHeader($p_nb_entries, $p_size, $p_offset, $p_comment)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3119'; type='method';}, 
	{name='PclZip::privWriteFileHeader'; match='privWriteFileHeader'; definition='privWriteFileHeader($p_header)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 3021'; type='method';}, 
	{name='PclZip::properties'; match='properties'; definition='properties()'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 1090'; type='method';}, 
	{name='PclZipUtilCopyBlock'; match='PclZipUtilCopyBlock'; definition='PclZipUtilCopyBlock($p_src, $p_dest, $p_size, $p_mode=0)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5548'; type='function';}, 
	{name='PclZipUtilOptionText'; match='PclZipUtilOptionText'; definition='PclZipUtilOptionText($p_option)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5640'; type='function';}, 
	{name='PclZipUtilPathInclusion'; match='PclZipUtilPathInclusion'; definition='PclZipUtilPathInclusion($p_dir, $p_path)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5471'; type='function';}, 
	{name='PclZipUtilPathReduction'; match='PclZipUtilPathReduction'; definition='PclZipUtilPathReduction($p_dir)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5390'; type='function';}, 
	{name='PclZipUtilRename'; match='PclZipUtilRename'; definition='PclZipUtilRename($p_src, $p_dest)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5610'; type='function';}, 
	{name='PclZipUtilTranslateWinPath'; match='PclZipUtilTranslateWinPath'; definition='PclZipUtilTranslateWinPath($p_path, $p_remove_disk_letter=true)'; description=''; file='/wp-admin/includes/class-pclzip.php, line: 5671'; type='function';}, 
	{name='Plugin_Installer_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1256'; type='method';}, 
	{name='Plugin_Installer_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1271'; type='method';}, 
	{name='Plugin_Installer_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1266'; type='method';}, 
	{name='Plugin_Upgrader::bulk_upgrade'; match='bulk_upgrade'; definition='bulk_upgrade($plugins)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 449'; type='method';}, 
	{name='Plugin_Upgrader::deactivate_plugin_before_upgrade'; match='deactivate_plugin_before_upgrade'; definition='deactivate_plugin_before_upgrade($return, $plugin)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 549'; type='method';}, 
	{name='Plugin_Upgrader::delete_old_plugin'; match='delete_old_plugin'; definition='delete_old_plugin($removed, $local_destination, $remote_destination, $plugin)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 566'; type='method';}, 
	{name='Plugin_Upgrader::install'; match='install'; definition='install($package)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 389'; type='method';}, 
	{name='Plugin_Upgrader::install_strings'; match='install_strings'; definition='install_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 380'; type='method';}, 
	{name='Plugin_Upgrader::plugin_info'; match='plugin_info'; definition='plugin_info()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 533'; type='method';}, 
	{name='Plugin_Upgrader::upgrade'; match='upgrade'; definition='upgrade($plugin)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 407'; type='method';}, 
	{name='Plugin_Upgrader::upgrade_strings'; match='upgrade_strings'; definition='upgrade_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 368'; type='method';}, 
	{name='Plugin_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1025'; type='method';}, 
	{name='Plugin_Upgrader_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1037'; type='method';}, 
	{name='Plugin_Upgrader_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1058'; type='method';}, 
	{name='RSSCache::RSSCache'; match='RSSCache'; definition='RSSCache($base=\'\', $age=\'\')'; description=''; file='/wp-includes/rss.php, line: 713'; type='method';}, 
	{name='RSSCache::check_cache'; match='check_cache'; definition='check_cache($url)'; description=''; file='/wp-includes/rss.php, line: 765'; type='method';}, 
	{name='RSSCache::debug'; match='debug'; definition='debug($debugmsg, $lvl=E_USER_NOTICE)'; description=''; file='/wp-includes/rss.php, line: 819'; type='method';}, 
	{name='RSSCache::error'; match='error'; definition='error($errormsg, $lvl=E_USER_WARNING)'; description=''; file='/wp-includes/rss.php, line: 806'; type='method';}, 
	{name='RSSCache::file_name'; match='file_name'; definition='file_name($url)'; description=''; file='/wp-includes/rss.php, line: 798'; type='method';}, 
	{name='RSSCache::get'; match='get'; definition='get($url)'; description=''; file='/wp-includes/rss.php, line: 744'; type='method';}, 
	{name='RSSCache::serialize'; match='serialize'; definition='serialize($rss)'; description=''; file='/wp-includes/rss.php, line: 781'; type='method';}, 
	{name='RSSCache::set'; match='set'; definition='set($url, $rss)'; description=''; file='/wp-includes/rss.php, line: 730'; type='method';}, 
	{name='RSSCache::unserialize'; match='unserialize'; definition='unserialize($data)'; description=''; file='/wp-includes/rss.php, line: 788'; type='method';}, 
	{name='SMTP::Authenticate'; match='Authenticate'; definition='Authenticate($username, $password)'; description='Performs <code>SMTP</code> authentication. Must be run after running the <code>Hello()</code> method. Returns true if successfully authenticated. '; file='/wp-includes/class-smtp.php, line: 210'; return='bool '; type='method';}, 
	{name='SMTP::Close'; match='Close'; definition='Close()'; description='Closes the socket and cleans up the state of the class. It is not considered good to use this function without first trying to use QUIT. '; file='/wp-includes/class-smtp.php, line: 293'; return='void '; type='method';}, 
	{name='SMTP::Connect'; match='Connect'; definition='Connect($host, $port=0, $tval=30)'; description='Connect to the server specified on the port specified. If the port is not specified use the default SMTP_PORT. If tval is specified then a connection will try and be established with the server for that number of seconds. If tval is not specified the default is 30 seconds to try on the connection. 
<code>SMTP</code> CODE SUCCESS: 220 <code>SMTP</code> CODE FAILURE: 421 '; file='/wp-includes/class-smtp.php, line: 112'; return='bool '; type='method';}, 
	{name='SMTP::Connected'; match='Connected'; definition='Connected()'; description='Returns true if connected to a server otherwise false '; file='/wp-includes/class-smtp.php, line: 270'; return='bool '; type='method';}, 
	{name='SMTP::Data'; match='Data'; definition='Data($msg_data)'; description='Issues a data command and sends the msg_data to the server finializing the mail transaction. $msg_data is the message that is to be send with the headers. Each header needs to be on a single line followed by a &lt;CRLF&gt; with the message headers and the message body being seperated by and additional &lt;CRLF&gt;. 
Implements rfc 821: DATA &lt;CRLF&gt; 
<code>SMTP</code> CODE INTERMEDIATE: 354 [data] &lt;CRLF&gt;.&lt;CRLF&gt; <code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE FAILURE: 552,554,451,452 <code>SMTP</code> CODE FAILURE: 451,554 <code>SMTP</code> CODE ERROR : 500,501,503,421 '; file='/wp-includes/class-smtp.php, line: 326'; return='bool '; type='method';}, 
	{name='SMTP::Hello'; match='Hello'; definition='Hello($host=\'\')'; description='Sends the HELO command to the smtp server. This makes sure that we and the server are in the same known state. 
Implements from rfc 821: HELO &lt;SP&gt; &lt;domain&gt; &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE ERROR : 500, 501, 504, 421 '; file='/wp-includes/class-smtp.php, line: 463'; return='bool '; type='method';}, 
	{name='SMTP::Mail'; match='Mail'; definition='Mail($from)'; description='Starts a mail transaction from the email address specified in $from. Returns true if successful or false otherwise. If True the mail transaction is started and then one or more Recipient commands may be called followed by a Data command. 
Implements rfc 821: MAIL &lt;SP&gt; FROM:&lt;reverse-path&gt; &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE SUCCESS: 552,451,452 <code>SMTP</code> CODE SUCCESS: 500,501,421 '; file='/wp-includes/class-smtp.php, line: 533'; return='bool '; type='method';}, 
	{name='SMTP::Quit'; match='Quit'; definition='Quit($close_on_error=true)'; description='Sends the quit command to the server and then closes the socket if there is no error or the $close_on_error argument is true. 
Implements from rfc 821: QUIT &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 221 <code>SMTP</code> CODE ERROR : 500 '; file='/wp-includes/class-smtp.php, line: 576'; return='bool '; type='method';}, 
	{name='SMTP::Recipient'; match='Recipient'; definition='Recipient($to)'; description='Sends the command RCPT to the <code>SMTP</code> server with the TO: argument of $to. Returns true if the recipient was accepted false if it was rejected. 
Implements from rfc 821: RCPT &lt;SP&gt; TO:&lt;forward-path&gt; &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250,251 <code>SMTP</code> CODE FAILURE: 550,551,552,553,450,451,452 <code>SMTP</code> CODE ERROR : 500,501,503,421 '; file='/wp-includes/class-smtp.php, line: 629'; return='bool '; type='method';}, 
	{name='SMTP::Reset'; match='Reset'; definition='Reset()'; description='Sends the RSET command to abort and transaction that is currently in progress. Returns true if successful false otherwise. 
Implements rfc 821: RSET &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE ERROR : 500,501,504,421 '; file='/wp-includes/class-smtp.php, line: 672'; return='bool '; type='method';}, 
	{name='SMTP::SendAndMail'; match='SendAndMail'; definition='SendAndMail($from)'; description='Starts a mail transaction from the email address specified in $from. Returns true if successful or false otherwise. If True the mail transaction is started and then one or more Recipient commands may be called followed by a Data command. This command will send the message to the users terminal if they are logged in and send them an email. 
Implements rfc 821: SAML &lt;SP&gt; FROM:&lt;reverse-path&gt; &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE SUCCESS: 552,451,452 <code>SMTP</code> CODE SUCCESS: 500,501,502,421 '; file='/wp-includes/class-smtp.php, line: 720'; return='bool '; type='method';}, 
	{name='SMTP::SendHello'; match='SendHello'; definition='SendHello($hello, $host)'; description='Sends a HELO/EHLO command. '; file='/wp-includes/class-smtp.php, line: 493'; return='bool '; type='method';}, 
	{name='SMTP::StartTLS'; match='StartTLS'; definition='StartTLS()'; description='Initiate a TLS communication with the server. 
<code>SMTP</code> CODE 220 Ready to start TLS <code>SMTP</code> CODE 501 Syntax error (no parameters allowed) <code>SMTP</code> CODE 454 TLS not available due to temporary reason '; file='/wp-includes/class-smtp.php, line: 168'; return='bool success '; type='method';}, 
	{name='SMTP::Turn'; match='Turn'; definition='Turn()'; description='This is an optional command for <code>SMTP</code> that this class does not support. This method is here to make the RFC821 Definition complete for this class and __may__ be implimented in the future 
Implements from rfc 821: TURN &lt;CRLF&gt; 
<code>SMTP</code> CODE SUCCESS: 250 <code>SMTP</code> CODE FAILURE: 502 <code>SMTP</code> CODE ERROR : 500, 503 '; file='/wp-includes/class-smtp.php, line: 764'; return='bool '; type='method';}, 
	{name='SMTP::__construct'; match='__construct'; definition='__construct()'; description='Initialize the class so that the data is in a known state. '; file='/wp-includes/class-smtp.php, line: 87'; return='void '; type='method';}, 
	{name='SMTP::getError'; match='getError'; definition='getError()'; description='Get the current error '; file='/wp-includes/class-smtp.php, line: 778'; return='array '; type='method';}, 
	{name='SMTP::get_lines'; match='get_lines'; definition='get_lines()'; description='Read in as many lines as possible either before eof or socket timeout occurs on the operation. With <code>SMTP</code> we can tell if we have more lines to read if the 4th character is &apos;-&apos; symbol. If it is a space then we don&apos;t need to read anything else. '; file='/wp-includes/class-smtp.php, line: 795'; return='string '; type='method';}, 
	{name='Services_JSON::Services_JSON'; match='Services_JSON'; definition='Services_JSON($use=0)'; description='constructs a new JSON instance 
possible values: SERVICES_JSON_LOOSE_TYPE: loose typing. &quot;{...}&quot; syntax creates associative arrays instead of objects in <code>decode()</code> . SERVICES_JSON_SUPPRESS_ERRORS: error suppression. Values which can&apos;t be encoded (e.g. resources) appear as NULL instead of throwing errors. By default, a deeply-nested resource will bubble up with an error, so all return values from <code>encode()</code> should be checked with <code>isError()</code> '; file='/wp-includes/class-json.php, line: 134'; params='@param int $use object behavior flags; combine with boolean-OR '; type='method';}, 
	{name='Services_JSON::_encode'; match='_encode'; definition='_encode($var)'; description='PRIVATE CODE that does the work of encodes an arbitrary variable into JSON format 
'; file='/wp-includes/class-json.php, line: 269'; params='@param mixed $var any number, boolean, string, array, or object to be encoded. see argument 1 to  '; return='mixed JSON string representation of input var or an error if a problem occurs '; type='method';}, 
	{name='Services_JSON::decode'; match='decode'; definition='decode($str)'; description='decodes a JSON string into appropriate variable 
'; file='/wp-includes/class-json.php, line: 542'; params='@param string $str JSON-formatted string '; return='mixed number, boolean, string, array, or object corresponding to given JSON input string. See argument 1 to <code>Services_JSON()</code> above for object-output behavior. Note that <code>decode()</code> always returns strings in ASCII or UTF-8 format! '; type='method';}, 
	{name='Services_JSON::encode'; match='encode'; definition='encode($var)'; description='encodes an arbitrary variable into JSON format (and sends JSON Header) 
'; file='/wp-includes/class-json.php, line: 238'; params='@param mixed $var any number, boolean, string, array, or object to be encoded. see argument 1 to  '; return='mixed JSON string representation of input var or an error if a problem occurs '; type='method';}, 
	{name='Services_JSON::encodeUnsafe'; match='encodeUnsafe'; definition='encodeUnsafe($var)'; description='encodes an arbitrary variable into JSON format without JSON Header - warning - may allow CSS!!!!) 
'; file='/wp-includes/class-json.php, line: 254'; params='@param mixed $var any number, boolean, string, array, or object to be encoded. see argument 1 to  '; return='mixed JSON string representation of input var or an error if a problem occurs '; type='method';}, 
	{name='Services_JSON::isError'; match='isError'; definition='isError($data, $code=null)'; description=''; file='/wp-includes/class-json.php, line: 824'; type='method';}, 
	{name='Services_JSON::name_value'; match='name_value'; definition='name_value($name, $value)'; description='array-walking function for use in generating JSON-formatted name-value pairs 
'; file='/wp-includes/class-json.php, line: 492'; params='@param string $name name of key to use  
@param mixed $value reference to an array element to be encoded '; return='string JSON-formatted name-value pair, like &apos;&quot;name&quot;:value&apos; '; type='method';}, 
	{name='Services_JSON::reduce_string'; match='reduce_string'; definition='reduce_string($str)'; description='reduce a string by removing leading and trailing comments and whitespace 
'; file='/wp-includes/class-json.php, line: 511'; params='@param $str string string value to strip of comments and whitespace '; return='string string value stripped of comments and whitespace '; type='method';}, 
	{name='Services_JSON::utf162utf8'; match='utf162utf8'; definition='utf162utf8($utf16)'; description='convert a string from one UTF-16 char to one UTF-8 char 
Normally should be handled by mb_convert_encoding, but provides a slower PHP-only method for installations that lack the multibye string extension. 
'; file='/wp-includes/class-json.php, line: 150'; params='@param string $utf16 UTF-16 character  '; return='string UTF-8 character '; type='method';}, 
	{name='Services_JSON::utf82utf16'; match='utf82utf16'; definition='utf82utf16($utf8)'; description='convert a string from one UTF-8 char to one UTF-16 char 
Normally should be handled by mb_convert_encoding, but provides a slower PHP-only method for installations that lack the multibye string extension. 
'; file='/wp-includes/class-json.php, line: 194'; params='@param string $utf8 UTF-8 character  '; return='string UTF-16 character '; type='method';}, 
	{name='SimplePie::SimplePie'; match='SimplePie'; definition='SimplePie($feed_url=null, $cache_location=null, $cache_duration=null)'; description='The <code>SimplePie</code> class contains feed level data and options 
There are two ways that you can create a new <code>SimplePie</code> object. The first is by passing a feed URL as a parameter to the <code>SimplePie</code> constructor (as well as optionally setting the cache location and cache expiry). This will initialise the whole feed with all of the default settings, and you can begin accessing methods and properties immediately. 
The second way is to create the <code>SimplePie</code> object with no parameters at all. This will enable you to set configuration options. After setting them, you must initialise the feed using $feed-&gt; <code>init()</code> . At that point the object&apos;s methods and properties will be available to you. This format is what is used throughout this documentation. 
'; file='/wp-includes/class-simplepie.php, line: 736'; params='@param string $feed_url This is the URL you want to parse.  
@param string $cache_location This is where you want the cache to be stored.  
@param int $cache_duration This is the number of seconds that you want to store the cache file for.  '; since='1.0 Preview Release '; type='method';}, 
	{name='SimplePie::__destruct'; match='__destruct'; definition='__destruct()'; description='Remove items that link back to this before destroying this object '; file='/wp-includes/class-simplepie.php, line: 771'; type='method';}, 
	{name='SimplePie::__toString'; match='__toString'; definition='__toString()'; description='Used for converting object to a string '; file='/wp-includes/class-simplepie.php, line: 763'; type='method';}, 
	{name='SimplePie::enable_cache'; match='enable_cache'; definition='enable_cache($enable=true)'; description='Enables/disables caching in <code>SimplePie</code> . 
This option allows you to disable caching all-together in <code>SimplePie</code> . However, disabling the cache can lead to longer load times. 
'; file='/wp-includes/class-simplepie.php, line: 932'; params='@param bool $enable Enable caching  '; since='1.0 Preview Release '; type='method';}, 
	{name='SimplePie::enable_order_by_date'; match='enable_order_by_date'; definition='enable_order_by_date($enable=true)'; description='Determines whether feed items should be sorted into reverse chronological order. 
'; file='/wp-includes/class-simplepie.php, line: 978'; params='@param bool $enable Sort as reverse chronological order.  '; type='method';}, 
	{name='SimplePie::enable_xml_dump'; match='enable_xml_dump'; definition='enable_xml_dump($enable=false)'; description='Outputs the raw XML content of the feed, after it has gone through SimplePie&apos;s filters. 
Used only for debugging, this function will output the XML content as text/xml. When <code>SimplePie</code> reads in a feed, it does a bit of cleaning up before trying to parse it. Many parts of the feed are re-written in memory, and in the end, you have a parsable feed. XML dump shows you the actual XML that <code>SimplePie</code> tries to parse, which may or may not be very different from the original feed. 
'; file='/wp-includes/class-simplepie.php, line: 917'; params='@param bool $enable Enable XML dump  '; since='1.0 Preview Release '; type='method';}, 
	{name='SimplePie::encode_instead_of_strip'; match='encode_instead_of_strip'; definition='encode_instead_of_strip($enable=true)'; description=''; file='/wp-includes/class-simplepie.php, line: 1416'; type='method';}, 
	{name='SimplePie::error'; match='error'; definition='error()'; description='Return the error message for the occurred error 
'; file='/wp-includes/class-simplepie.php, line: 1840'; return='string Error message '; type='method';}, 
	{name='SimplePie::force_feed'; match='force_feed'; definition='force_feed($enable=false)'; description='Force the given data/URL to be treated as a feed no matter what it appears like 
'; file='/wp-includes/class-simplepie.php, line: 802'; params='@param bool $enable Force the given data/URL to be treated as a feed  '; since='1.1 '; type='method';}, 
	{name='SimplePie::force_fsockopen'; match='force_fsockopen'; definition='force_fsockopen($enable=false)'; description='Forces <code>SimplePie</code> to use fsockopen() instead of the preferred cURL functions. 
'; file='/wp-includes/class-simplepie.php, line: 897'; params='@param bool $enable Force fsockopen() to be used  '; since='1.0 Beta 3 '; type='method';}, 
	{name='SimplePie::get_all_discovered_feeds'; match='get_all_discovered_feeds'; definition='get_all_discovered_feeds()'; description=''; file='/wp-includes/class-simplepie.php, line: 2663'; type='method';}, 
	{name='SimplePie::get_author'; match='get_author'; definition='get_author($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2414'; type='method';}, 
	{name='SimplePie::get_authors'; match='get_authors'; definition='get_authors()'; description=''; file='/wp-includes/class-simplepie.php, line: 2427'; type='method';}, 
	{name='SimplePie::get_base'; match='get_base'; definition='get_base($element=array())'; description=''; file='/wp-includes/class-simplepie.php, line: 2287'; type='method';}, 
	{name='SimplePie::get_categories'; match='get_categories'; definition='get_categories()'; description=''; file='/wp-includes/class-simplepie.php, line: 2357'; type='method';}, 
	{name='SimplePie::get_category'; match='get_category'; definition='get_category($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2344'; type='method';}, 
	{name='SimplePie::get_channel_tags'; match='get_channel_tags'; definition='get_channel_tags($namespace, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 2208'; type='method';}, 
	{name='SimplePie::get_contributor'; match='get_contributor'; definition='get_contributor($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2497'; type='method';}, 
	{name='SimplePie::get_contributors'; match='get_contributors'; definition='get_contributors()'; description=''; file='/wp-includes/class-simplepie.php, line: 2510'; type='method';}, 
	{name='SimplePie::get_copyright'; match='get_copyright'; definition='get_copyright()'; description=''; file='/wp-includes/class-simplepie.php, line: 2712'; type='method';}, 
	{name='SimplePie::get_description'; match='get_description'; definition='get_description()'; description=''; file='/wp-includes/class-simplepie.php, line: 2668'; type='method';}, 
	{name='SimplePie::get_encoding'; match='get_encoding'; definition='get_encoding()'; description=''; file='/wp-includes/class-simplepie.php, line: 1845'; type='method';}, 
	{name='SimplePie::get_favicon'; match='get_favicon'; definition='get_favicon()'; description='Returns the URL for the favicon of the feed&apos;s website. 
'; file='/wp-includes/class-simplepie.php, line: 1954'; since='1.0 '; type='method';}, 
	{name='SimplePie::get_feed_tags'; match='get_feed_tags'; definition='get_feed_tags($namespace, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 2174'; type='method';}, 
	{name='SimplePie::get_image_height'; match='get_image_height'; definition='get_image_height()'; description=''; file='/wp-includes/class-simplepie.php, line: 2908'; type='method';}, 
	{name='SimplePie::get_image_link'; match='get_image_link'; definition='get_image_link()'; description=''; file='/wp-includes/class-simplepie.php, line: 2872'; type='method';}, 
	{name='SimplePie::get_image_tags'; match='get_image_tags'; definition='get_image_tags($namespace, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 2251'; type='method';}, 
	{name='SimplePie::get_image_title'; match='get_image_title'; definition='get_image_title()'; description=''; file='/wp-includes/class-simplepie.php, line: 2812'; type='method';}, 
	{name='SimplePie::get_image_url'; match='get_image_url'; definition='get_image_url()'; description=''; file='/wp-includes/class-simplepie.php, line: 2840'; type='method';}, 
	{name='SimplePie::get_image_width'; match='get_image_width'; definition='get_image_width()'; description=''; file='/wp-includes/class-simplepie.php, line: 2892'; type='method';}, 
	{name='SimplePie::get_item'; match='get_item'; definition='get_item($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2938'; type='method';}, 
	{name='SimplePie::get_item_quantity'; match='get_item_quantity'; definition='get_item_quantity($max=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2924'; type='method';}, 
	{name='SimplePie::get_items'; match='get_items'; definition='get_items($start=0, $end=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 2951'; type='method';}, 
	{name='SimplePie::get_language'; match='get_language'; definition='get_language()'; description=''; file='/wp-includes/class-simplepie.php, line: 2740'; type='method';}, 
	{name='SimplePie::get_latitude'; match='get_latitude'; definition='get_latitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 2776'; type='method';}, 
	{name='SimplePie::get_link'; match='get_link'; definition='get_link($key=0, $rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 2568'; type='method';}, 
	{name='SimplePie::get_links'; match='get_links'; definition='get_links($rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 2589'; type='method';}, 
	{name='SimplePie::get_longitude'; match='get_longitude'; definition='get_longitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 2792'; type='method';}, 
	{name='SimplePie::get_permalink'; match='get_permalink'; definition='get_permalink()'; description='Added for parity between the parent-level and the item/entry-level. '; file='/wp-includes/class-simplepie.php, line: 2584'; type='method';}, 
	{name='SimplePie::get_title'; match='get_title'; definition='get_title()'; description=''; file='/wp-includes/class-simplepie.php, line: 2308'; type='method';}, 
	{name='SimplePie::get_type'; match='get_type'; definition='get_type()'; description=''; file='/wp-includes/class-simplepie.php, line: 1867'; type='method';}, 
	{name='SimplePie::handle_content_type'; match='handle_content_type'; definition='handle_content_type($mime=\'text/html\')'; description=''; file='/wp-includes/class-simplepie.php, line: 1850'; type='method';}, 
	{name='SimplePie::init'; match='init'; definition='init()'; description=''; file='/wp-includes/class-simplepie.php, line: 1502'; type='method';}, 
	{name='SimplePie::remove_div'; match='remove_div'; definition='remove_div($enable=true)'; description=''; file='/wp-includes/class-simplepie.php, line: 1398'; type='method';}, 
	{name='SimplePie::sanitize'; match='sanitize'; definition='sanitize($data, $type, $base=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 2303'; type='method';}, 
	{name='SimplePie::set_author_class'; match='set_author_class'; definition='set_author_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for handling author data. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1143'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_autodiscovery_cache_duration'; match='set_autodiscovery_cache_duration'; definition='set_autodiscovery_cache_duration($seconds=604800)'; description='Set the length of time (in seconds) that the autodiscovered feed URL will be cached. 
'; file='/wp-includes/class-simplepie.php, line: 956'; params='@param int $seconds The autodiscovered feed URL cache duration.  '; type='method';}, 
	{name='SimplePie::set_autodiscovery_level'; match='set_autodiscovery_level'; definition='set_autodiscovery_level($level=SIMPLEPIE_LOCATOR_ALL)'; description='Set how much feed autodiscovery to do 
@see SIMPLEPIE_LOCATOR_NONE SIMPLEPIE_LOCATOR_AUTODISCOVERY SIMPLEPIE_LOCATOR_LOCAL_EXTENSION SIMPLEPIE_LOCATOR_LOCAL_BODY SIMPLEPIE_LOCATOR_REMOTE_EXTENSION SIMPLEPIE_LOCATOR_REMOTE_BODY SIMPLEPIE_LOCATOR_ALL '; file='/wp-includes/class-simplepie.php, line: 1015'; params='@param int $level Feed Autodiscovery Level (level can be a combination of the above constants, see bitwise OR operator)  '; type='method';}, 
	{name='SimplePie::set_cache_class'; match='set_cache_class'; definition='set_cache_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for caching. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1029'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_cache_duration'; match='set_cache_duration'; definition='set_cache_duration($seconds=3600)'; description='Set the length of time (in seconds) that the contents of a feed will be cached. 
'; file='/wp-includes/class-simplepie.php, line: 944'; params='@param int $seconds The feed content cache duration.  '; type='method';}, 
	{name='SimplePie::set_cache_location'; match='set_cache_location'; definition='set_cache_location($location=\'./cache\')'; description='Set the file system location where the cached files should be stored. 
'; file='/wp-includes/class-simplepie.php, line: 967'; params='@param string $location The file system location.  '; type='method';}, 
	{name='SimplePie::set_cache_name_function'; match='set_cache_name_function'; definition='set_cache_name_function($function=\'md5\')'; description='Set callback function to create cache filename with 
'; file='/wp-includes/class-simplepie.php, line: 1341'; params='@param mixed $function Callback function  '; type='method';}, 
	{name='SimplePie::set_caption_class'; match='set_caption_class'; definition='set_caption_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for &lt;media:text&gt; captions Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1200'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_category_class'; match='set_category_class'; definition='set_category_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for handling category data. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1162'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_content_type_sniffer_class'; match='set_content_type_sniffer_class'; definition='set_content_type_sniffer_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for content-type sniffing. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1295'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_copyright_class'; match='set_copyright_class'; definition='set_copyright_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for &lt;media:copyright&gt; Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1219'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_credit_class'; match='set_credit_class'; definition='set_credit_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for &lt;media:credit&gt; Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1238'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_enclosure_class'; match='set_enclosure_class'; definition='set_enclosure_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for feed enclosures. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1181'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_favicon_handler'; match='set_favicon_handler'; definition='set_favicon_handler($page=false, $qs=\'i\')'; description='Set the handler to enable the display of cached favicons. 
'; file='/wp-includes/class-simplepie.php, line: 1460'; params='@param str $page Web-accessible path to the handler_favicon.php file.  
@param str $qs The query string that the value should be passed to.  '; type='method';}, 
	{name='SimplePie::set_feed_url'; match='set_feed_url'; definition='set_feed_url($url)'; description='This is the URL of the feed you want to parse. 
This allows you to enter the URL of the feed you want to parse, or the website you want to try to use auto-discovery on. This takes priority over any set raw data. 
You can set multiple feeds to mash together by passing an array instead of a string for the $url. Remember that with each additional feed comes additional processing and resources. 
@see <code>SimplePie::set_raw_data()</code> '; file='/wp-includes/class-simplepie.php, line: 823'; params='@param mixed $url This is the URL (or array of URLs) that you want to parse.  '; since='1.0 Preview Release '; type='method';}, 
	{name='SimplePie::set_file'; match='set_file'; definition='set_file($file)'; description='Provides an instance of <code>SimplePie_File</code> to use as a feed 
'; file='/wp-includes/class-simplepie.php, line: 846'; params='@param object &$file Instance of  '; return='bool True on success, false on failure '; type='method';}, 
	{name='SimplePie::set_file_class'; match='set_file_class'; definition='set_file_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for remote file fetching. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1086'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_image_handler'; match='set_image_handler'; definition='set_image_handler($page=false, $qs=\'i\')'; description='Set the handler to enable the display of cached images. 
'; file='/wp-includes/class-simplepie.php, line: 1479'; params='@param str $page Web-accessible path to the handler_image.php file.  
@param str $qs The query string that the value should be passed to.  '; type='method';}, 
	{name='SimplePie::set_input_encoding'; match='set_input_encoding'; definition='set_input_encoding($encoding=false)'; description='Allows you to override the character encoding reported by the feed. 
'; file='/wp-includes/class-simplepie.php, line: 989'; params='@param string $encoding Character encoding.  '; type='method';}, 
	{name='SimplePie::set_item_class'; match='set_item_class'; definition='set_item_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for handling feed items. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1124'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_item_limit'; match='set_item_limit'; definition='set_item_limit($limit=0)'; description='Set the limit for items returned per-feed with multifeeds. 
'; file='/wp-includes/class-simplepie.php, line: 1497'; params='@param integer $limit The maximum number of items to return.  '; type='method';}, 
	{name='SimplePie::set_javascript'; match='set_javascript'; definition='set_javascript($get=\'js\')'; description='Set javascript query string parameter 
'; file='/wp-includes/class-simplepie.php, line: 1355'; params='@param mixed $get Javascript query string parameter  '; type='method';}, 
	{name='SimplePie::set_locator_class'; match='set_locator_class'; definition='set_locator_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for auto-discovery. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1048'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_max_checked_feeds'; match='set_max_checked_feeds'; definition='set_max_checked_feeds($max=10)'; description='Set maximum number of feeds to check with autodiscovery 
'; file='/wp-includes/class-simplepie.php, line: 1393'; params='@param int $max Maximum number of feeds to check  '; type='method';}, 
	{name='SimplePie::set_output_encoding'; match='set_output_encoding'; definition='set_output_encoding($encoding=\'UTF-8\')'; description=''; file='/wp-includes/class-simplepie.php, line: 1430'; type='method';}, 
	{name='SimplePie::set_parser_class'; match='set_parser_class'; definition='set_parser_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for XML parsing. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1067'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_rating_class'; match='set_rating_class'; definition='set_rating_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for &lt;media:rating&gt; Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1257'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_raw_data'; match='set_raw_data'; definition='set_raw_data($data)'; description='Allows you to use a string of RSS/Atom data instead of a remote feed. 
If you have a feed available as a string in PHP, you can tell <code>SimplePie</code> to parse that data string instead of a remote feed. Any set feed URL takes precedence. 
@see <code>SimplePie::set_feed_url()</code> '; file='/wp-includes/class-simplepie.php, line: 869'; params='@param string $data RSS or Atom data as a string.  '; since='1.0 Beta 3 '; type='method';}, 
	{name='SimplePie::set_restriction_class'; match='set_restriction_class'; definition='set_restriction_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for &lt;media:restriction&gt; Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1276'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_sanitize_class'; match='set_sanitize_class'; definition='set_sanitize_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses for data sanitization. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1105'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_source_class'; match='set_source_class'; definition='set_source_class($class=\')'; description='Allows you to change which class <code>SimplePie</code> uses item sources. Useful when you are overloading or extending SimplePie&apos;s default classes. 
'; file='/wp-includes/class-simplepie.php, line: 1314'; params='@param string $class Name of custom class.  '; type='method';}, 
	{name='SimplePie::set_stupidly_fast'; match='set_stupidly_fast'; definition='set_stupidly_fast($set=false)'; description='Set options to make SP as fast as possible. Forgoes a substantial amount of data sanitization in favor of speed. 
'; file='/wp-includes/class-simplepie.php, line: 1374'; params='@param bool $set Whether to set them or not  '; type='method';}, 
	{name='SimplePie::set_timeout'; match='set_timeout'; definition='set_timeout($timeout=10)'; description='Allows you to override the default timeout for fetching remote feeds. 
This allows you to change the maximum time the feed&apos;s server to respond and send the feed back. 
'; file='/wp-includes/class-simplepie.php, line: 884'; params='@param int $timeout The maximum number of seconds to spend waiting to retrieve a feed.  '; since='1.0 Beta 3 '; type='method';}, 
	{name='SimplePie::set_url_replacements'; match='set_url_replacements'; definition='set_url_replacements($element_attribute=array(\'a\'=> \'href\', \'area\'=> \'href\', \'blockquote\'=> \'cite\', \'del\'=> \'cite\', \'form\'=> \'action\', \'img\'=> array(\'longdesc\', \'src\'), \'input\'=> \'src\', \'ins\'=> \'cite\', \'q\'=> \'cite\'))'; description='Set element/attribute key/value pairs of HTML attributes containing URLs that need to be resolved relative to the feed 
'; file='/wp-includes/class-simplepie.php, line: 1448'; params='@param array $element_attribute Element/attribute key/value pairs  '; since='1.0 '; type='method';}, 
	{name='SimplePie::set_useragent'; match='set_useragent'; definition='set_useragent($ua=SIMPLEPIE_USERAGENT)'; description='Allows you to override the default user agent string. 
'; file='/wp-includes/class-simplepie.php, line: 1330'; params='@param string $ua New user agent string.  '; type='method';}, 
	{name='SimplePie::strip_attributes'; match='strip_attributes'; definition='strip_attributes($attribs=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 1421'; type='method';}, 
	{name='SimplePie::strip_comments'; match='strip_comments'; definition='strip_comments($strip=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 1435'; type='method';}, 
	{name='SimplePie::strip_htmltags'; match='strip_htmltags'; definition='strip_htmltags($tags=\'\', $encode=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 1403'; type='method';}, 
	{name='SimplePie::subscribe_aol'; match='subscribe_aol'; definition='subscribe_aol()'; description=''; file='/wp-includes/class-simplepie.php, line: 2099'; type='method';}, 
	{name='SimplePie::subscribe_bloglines'; match='subscribe_bloglines'; definition='subscribe_bloglines()'; description=''; file='/wp-includes/class-simplepie.php, line: 2104'; type='method';}, 
	{name='SimplePie::subscribe_eskobo'; match='subscribe_eskobo'; definition='subscribe_eskobo()'; description=''; file='/wp-includes/class-simplepie.php, line: 2109'; type='method';}, 
	{name='SimplePie::subscribe_feed'; match='subscribe_feed'; definition='subscribe_feed()'; description=''; file='/wp-includes/class-simplepie.php, line: 2025'; type='method';}, 
	{name='SimplePie::subscribe_feedfeeds'; match='subscribe_feedfeeds'; definition='subscribe_feedfeeds()'; description=''; file='/wp-includes/class-simplepie.php, line: 2114'; type='method';}, 
	{name='SimplePie::subscribe_feedster'; match='subscribe_feedster'; definition='subscribe_feedster()'; description=''; file='/wp-includes/class-simplepie.php, line: 2119'; type='method';}, 
	{name='SimplePie::subscribe_google'; match='subscribe_google'; definition='subscribe_google()'; description=''; file='/wp-includes/class-simplepie.php, line: 2124'; type='method';}, 
	{name='SimplePie::subscribe_gritwire'; match='subscribe_gritwire'; definition='subscribe_gritwire()'; description=''; file='/wp-includes/class-simplepie.php, line: 2129'; type='method';}, 
	{name='SimplePie::subscribe_itunes'; match='subscribe_itunes'; definition='subscribe_itunes()'; description=''; file='/wp-includes/class-simplepie.php, line: 2061'; type='method';}, 
	{name='SimplePie::subscribe_msn'; match='subscribe_msn'; definition='subscribe_msn()'; description=''; file='/wp-includes/class-simplepie.php, line: 2134'; type='method';}, 
	{name='SimplePie::subscribe_netvibes'; match='subscribe_netvibes'; definition='subscribe_netvibes()'; description=''; file='/wp-includes/class-simplepie.php, line: 2139'; type='method';}, 
	{name='SimplePie::subscribe_newsburst'; match='subscribe_newsburst'; definition='subscribe_newsburst()'; description=''; file='/wp-includes/class-simplepie.php, line: 2144'; type='method';}, 
	{name='SimplePie::subscribe_newsgator'; match='subscribe_newsgator'; definition='subscribe_newsgator()'; description=''; file='/wp-includes/class-simplepie.php, line: 2149'; type='method';}, 
	{name='SimplePie::subscribe_odeo'; match='subscribe_odeo'; definition='subscribe_odeo()'; description=''; file='/wp-includes/class-simplepie.php, line: 2154'; type='method';}, 
	{name='SimplePie::subscribe_outlook'; match='subscribe_outlook'; definition='subscribe_outlook()'; description=''; file='/wp-includes/class-simplepie.php, line: 2037'; type='method';}, 
	{name='SimplePie::subscribe_podcast'; match='subscribe_podcast'; definition='subscribe_podcast()'; description=''; file='/wp-includes/class-simplepie.php, line: 2049'; type='method';}, 
	{name='SimplePie::subscribe_podnova'; match='subscribe_podnova'; definition='subscribe_podnova()'; description=''; file='/wp-includes/class-simplepie.php, line: 2159'; type='method';}, 
	{name='SimplePie::subscribe_rojo'; match='subscribe_rojo'; definition='subscribe_rojo()'; description=''; file='/wp-includes/class-simplepie.php, line: 2164'; type='method';}, 
	{name='SimplePie::subscribe_service'; match='subscribe_service'; definition='subscribe_service($feed_url, $site_url=null)'; description='Creates the subscribe_&lowast; methods&apos; return data 
'; file='/wp-includes/class-simplepie.php, line: 2082'; params='@param string $feed_url String to prefix to the feed URL  
@param string $site_url String to prefix to the site URL (and suffix to the feed URL)  '; return='mixed URL if feed exists, false otherwise '; type='method';}, 
	{name='SimplePie::subscribe_url'; match='subscribe_url'; definition='subscribe_url()'; description=''; file='/wp-includes/class-simplepie.php, line: 2013'; type='method';}, 
	{name='SimplePie::subscribe_yahoo'; match='subscribe_yahoo'; definition='subscribe_yahoo()'; description=''; file='/wp-includes/class-simplepie.php, line: 2169'; type='method';}, 
	{name='SimplePie_Author::SimplePie_Author'; match='SimplePie_Author'; definition='SimplePie_Author($name=null, $link=null, $email=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 6285'; type='method';}, 
	{name='SimplePie_Author::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 6292'; type='method';}, 
	{name='SimplePie_Author::get_email'; match='get_email'; definition='get_email()'; description=''; file='/wp-includes/class-simplepie.php, line: 6322'; type='method';}, 
	{name='SimplePie_Author::get_link'; match='get_link'; definition='get_link()'; description=''; file='/wp-includes/class-simplepie.php, line: 6310'; type='method';}, 
	{name='SimplePie_Author::get_name'; match='get_name'; definition='get_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 6298'; type='method';}, 
	{name='SimplePie_Cache::SimplePie_Cache'; match='SimplePie_Cache'; definition='SimplePie_Cache()'; description='Don&apos;t call the constructor. Please. 
'; file='/wp-includes/class-simplepie.php, line: 8611'; type='method';}, 
	{name='SimplePie_Cache_DB::prepare_simplepie_object_for_cache'; match='prepare_simplepie_object_for_cache'; definition='prepare_simplepie_object_for_cache($data)'; description=''; file='/wp-includes/class-simplepie.php, line: 8723'; type='method';}, 
	{name='SimplePie_Cache_File::SimplePie_Cache_File'; match='SimplePie_Cache_File'; definition='SimplePie_Cache_File($location, $filename, $extension)'; description=''; file='/wp-includes/class-simplepie.php, line: 8647'; type='method';}, 
	{name='SimplePie_Cache_File::load'; match='load'; definition='load()'; description=''; file='/wp-includes/class-simplepie.php, line: 8684'; type='method';}, 
	{name='SimplePie_Cache_File::mtime'; match='mtime'; definition='mtime()'; description=''; file='/wp-includes/class-simplepie.php, line: 8693'; type='method';}, 
	{name='SimplePie_Cache_File::save'; match='save'; definition='save($data)'; description=''; file='/wp-includes/class-simplepie.php, line: 8655'; type='method';}, 
	{name='SimplePie_Cache_File::touch'; match='touch'; definition='touch()'; description=''; file='/wp-includes/class-simplepie.php, line: 8702'; type='method';}, 
	{name='SimplePie_Cache_File::unlink'; match='unlink'; definition='unlink()'; description=''; file='/wp-includes/class-simplepie.php, line: 8711'; type='method';}, 
	{name='SimplePie_Cache_MySQL::SimplePie_Cache_MySQL'; match='SimplePie_Cache_MySQL'; definition='SimplePie_Cache_MySQL($mysql_location, $name, $extension)'; description=''; file='/wp-includes/class-simplepie.php, line: 8807'; type='method';}, 
	{name='SimplePie_Cache_MySQL::load'; match='load'; definition='load()'; description=''; file='/wp-includes/class-simplepie.php, line: 8972'; type='method';}, 
	{name='SimplePie_Cache_MySQL::mtime'; match='mtime'; definition='mtime()'; description=''; file='/wp-includes/class-simplepie.php, line: 9036'; type='method';}, 
	{name='SimplePie_Cache_MySQL::save'; match='save'; definition='save($data)'; description=''; file='/wp-includes/class-simplepie.php, line: 8875'; type='method';}, 
	{name='SimplePie_Cache_MySQL::touch'; match='touch'; definition='touch()'; description=''; file='/wp-includes/class-simplepie.php, line: 9048'; type='method';}, 
	{name='SimplePie_Cache_MySQL::unlink'; match='unlink'; definition='unlink()'; description=''; file='/wp-includes/class-simplepie.php, line: 9060'; type='method';}, 
	{name='SimplePie_Caption::SimplePie_Caption'; match='SimplePie_Caption'; definition='SimplePie_Caption($type=null, $lang=null, $startTime=null, $endTime=null, $text=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 7356'; type='method';}, 
	{name='SimplePie_Caption::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 7365'; type='method';}, 
	{name='SimplePie_Caption::get_endtime'; match='get_endtime'; definition='get_endtime()'; description=''; file='/wp-includes/class-simplepie.php, line: 7371'; type='method';}, 
	{name='SimplePie_Caption::get_language'; match='get_language'; definition='get_language()'; description=''; file='/wp-includes/class-simplepie.php, line: 7383'; type='method';}, 
	{name='SimplePie_Caption::get_starttime'; match='get_starttime'; definition='get_starttime()'; description=''; file='/wp-includes/class-simplepie.php, line: 7395'; type='method';}, 
	{name='SimplePie_Caption::get_text'; match='get_text'; definition='get_text()'; description=''; file='/wp-includes/class-simplepie.php, line: 7407'; type='method';}, 
	{name='SimplePie_Caption::get_type'; match='get_type'; definition='get_type()'; description=''; file='/wp-includes/class-simplepie.php, line: 7419'; type='method';}, 
	{name='SimplePie_Category::SimplePie_Category'; match='SimplePie_Category'; definition='SimplePie_Category($term=null, $scheme=null, $label=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 6342'; type='method';}, 
	{name='SimplePie_Category::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 6349'; type='method';}, 
	{name='SimplePie_Category::get_label'; match='get_label'; definition='get_label()'; description=''; file='/wp-includes/class-simplepie.php, line: 6379'; type='method';}, 
	{name='SimplePie_Category::get_scheme'; match='get_scheme'; definition='get_scheme()'; description=''; file='/wp-includes/class-simplepie.php, line: 6367'; type='method';}, 
	{name='SimplePie_Category::get_term'; match='get_term'; definition='get_term()'; description=''; file='/wp-includes/class-simplepie.php, line: 6355'; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::SimplePie_Content_Type_Sniffer'; match='SimplePie_Content_Type_Sniffer'; definition='SimplePie_Content_Type_Sniffer($file)'; description='Create an instance of the class with the input file 
'; file='/wp-includes/class-simplepie.php, line: 13481'; params='@param  $file Input file  '; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::feed_or_html'; match='feed_or_html'; definition='feed_or_html()'; description='Sniff HTML 
'; file='/wp-includes/class-simplepie.php, line: 13659'; return='string Actual Content-Type '; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::get_type'; match='get_type'; definition='get_type()'; description='Get the Content-Type of the specified file 
'; file='/wp-includes/class-simplepie.php, line: 13492'; return='string Actual Content-Type '; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::image'; match='image'; definition='image()'; description='Sniff images 
'; file='/wp-includes/class-simplepie.php, line: 13628'; return='string Actual Content-Type '; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::text_or_binary'; match='text_or_binary'; definition='text_or_binary()'; description='Sniff text or binary 
'; file='/wp-includes/class-simplepie.php, line: 13557'; return='string Actual Content-Type '; type='method';}, 
	{name='SimplePie_Content_Type_Sniffer::unknown'; match='unknown'; definition='unknown()'; description='Sniff unknown 
'; file='/wp-includes/class-simplepie.php, line: 13582'; return='string Actual Content-Type '; type='method';}, 
	{name='SimplePie_Copyright::SimplePie_Copyright'; match='SimplePie_Copyright'; definition='SimplePie_Copyright($url=null, $label=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 7495'; type='method';}, 
	{name='SimplePie_Copyright::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 7501'; type='method';}, 
	{name='SimplePie_Copyright::get_attribution'; match='get_attribution'; definition='get_attribution()'; description=''; file='/wp-includes/class-simplepie.php, line: 7519'; type='method';}, 
	{name='SimplePie_Copyright::get_url'; match='get_url'; definition='get_url()'; description=''; file='/wp-includes/class-simplepie.php, line: 7507'; type='method';}, 
	{name='SimplePie_Credit::SimplePie_Credit'; match='SimplePie_Credit'; definition='SimplePie_Credit($role=null, $scheme=null, $name=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 7439'; type='method';}, 
	{name='SimplePie_Credit::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 7446'; type='method';}, 
	{name='SimplePie_Credit::get_name'; match='get_name'; definition='get_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 7476'; type='method';}, 
	{name='SimplePie_Credit::get_role'; match='get_role'; definition='get_role()'; description=''; file='/wp-includes/class-simplepie.php, line: 7452'; type='method';}, 
	{name='SimplePie_Credit::get_scheme'; match='get_scheme'; definition='get_scheme()'; description=''; file='/wp-includes/class-simplepie.php, line: 7464'; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::SimplePie_Decode_HTML_Entities'; match='SimplePie_Decode_HTML_Entities'; definition='SimplePie_Decode_HTML_Entities($data)'; description='Create an instance of the class with the input data 
'; file='/wp-includes/class-simplepie.php, line: 11405'; params='@param string $data Input data  '; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::consume'; match='consume'; definition='consume()'; description='Consume the next byte 
'; file='/wp-includes/class-simplepie.php, line: 11433'; return='mixed The next byte, or false, if there is no more data '; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::consume_range'; match='consume_range'; definition='consume_range($chars)'; description='Consume a range of characters 
'; file='/wp-includes/class-simplepie.php, line: 11453'; params='@param string $chars Characters to consume  '; return='mixed A series of characters that match the range, or false '; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::entity'; match='entity'; definition='entity()'; description='Decode an entity 
'; file='/wp-includes/class-simplepie.php, line: 11484'; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::parse'; match='parse'; definition='parse()'; description='Parse the input data 
'; file='/wp-includes/class-simplepie.php, line: 11416'; return='string Output data '; type='method';}, 
	{name='SimplePie_Decode_HTML_Entities::unconsume'; match='unconsume'; definition='unconsume()'; description='Unconsume one byte 
'; file='/wp-includes/class-simplepie.php, line: 11473'; type='method';}, 
	{name='SimplePie_Enclosure::SimplePie_Enclosure'; match='SimplePie_Enclosure'; definition='SimplePie_Enclosure($link=null, $type=null, $length=null, $javascript=null, $bitrate=null, $captions=null, $categories=null, $channels=null, $copyright=null, $credits=null, $description=null, $duration=null, $expression=null, $framerate=null, $hashes=null, $height=null, $keywords=null, $lang=null, $medium=null, $player=null, $ratings=null, $restrictions=null, $samplingrate=null, $thumbnails=null, $title=null, $width=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 6423'; type='method';}, 
	{name='SimplePie_Enclosure::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 6460'; type='method';}, 
	{name='SimplePie_Enclosure::embed'; match='embed'; definition='embed($options=\'\', $native=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 6917'; type='method';}, 
	{name='SimplePie_Enclosure::get_bitrate'; match='get_bitrate'; definition='get_bitrate()'; description=''; file='/wp-includes/class-simplepie.php, line: 6466'; type='method';}, 
	{name='SimplePie_Enclosure::get_caption'; match='get_caption'; definition='get_caption($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6478'; type='method';}, 
	{name='SimplePie_Enclosure::get_captions'; match='get_captions'; definition='get_captions()'; description=''; file='/wp-includes/class-simplepie.php, line: 6491'; type='method';}, 
	{name='SimplePie_Enclosure::get_categories'; match='get_categories'; definition='get_categories()'; description=''; file='/wp-includes/class-simplepie.php, line: 6516'; type='method';}, 
	{name='SimplePie_Enclosure::get_category'; match='get_category'; definition='get_category($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6503'; type='method';}, 
	{name='SimplePie_Enclosure::get_channels'; match='get_channels'; definition='get_channels()'; description=''; file='/wp-includes/class-simplepie.php, line: 6528'; type='method';}, 
	{name='SimplePie_Enclosure::get_copyright'; match='get_copyright'; definition='get_copyright()'; description=''; file='/wp-includes/class-simplepie.php, line: 6540'; type='method';}, 
	{name='SimplePie_Enclosure::get_credit'; match='get_credit'; definition='get_credit($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6552'; type='method';}, 
	{name='SimplePie_Enclosure::get_credits'; match='get_credits'; definition='get_credits()'; description=''; file='/wp-includes/class-simplepie.php, line: 6565'; type='method';}, 
	{name='SimplePie_Enclosure::get_description'; match='get_description'; definition='get_description()'; description=''; file='/wp-includes/class-simplepie.php, line: 6577'; type='method';}, 
	{name='SimplePie_Enclosure::get_duration'; match='get_duration'; definition='get_duration($convert=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 6589'; type='method';}, 
	{name='SimplePie_Enclosure::get_expression'; match='get_expression'; definition='get_expression()'; description=''; file='/wp-includes/class-simplepie.php, line: 6609'; type='method';}, 
	{name='SimplePie_Enclosure::get_extension'; match='get_extension'; definition='get_extension()'; description=''; file='/wp-includes/class-simplepie.php, line: 6621'; type='method';}, 
	{name='SimplePie_Enclosure::get_framerate'; match='get_framerate'; definition='get_framerate()'; description=''; file='/wp-includes/class-simplepie.php, line: 6634'; type='method';}, 
	{name='SimplePie_Enclosure::get_handler'; match='get_handler'; definition='get_handler()'; description=''; file='/wp-includes/class-simplepie.php, line: 6646'; type='method';}, 
	{name='SimplePie_Enclosure::get_hash'; match='get_hash'; definition='get_hash($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6651'; type='method';}, 
	{name='SimplePie_Enclosure::get_hashes'; match='get_hashes'; definition='get_hashes()'; description=''; file='/wp-includes/class-simplepie.php, line: 6664'; type='method';}, 
	{name='SimplePie_Enclosure::get_height'; match='get_height'; definition='get_height()'; description=''; file='/wp-includes/class-simplepie.php, line: 6676'; type='method';}, 
	{name='SimplePie_Enclosure::get_keyword'; match='get_keyword'; definition='get_keyword($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6700'; type='method';}, 
	{name='SimplePie_Enclosure::get_keywords'; match='get_keywords'; definition='get_keywords()'; description=''; file='/wp-includes/class-simplepie.php, line: 6713'; type='method';}, 
	{name='SimplePie_Enclosure::get_language'; match='get_language'; definition='get_language()'; description=''; file='/wp-includes/class-simplepie.php, line: 6688'; type='method';}, 
	{name='SimplePie_Enclosure::get_length'; match='get_length'; definition='get_length()'; description=''; file='/wp-includes/class-simplepie.php, line: 6725'; type='method';}, 
	{name='SimplePie_Enclosure::get_link'; match='get_link'; definition='get_link()'; description=''; file='/wp-includes/class-simplepie.php, line: 6737'; type='method';}, 
	{name='SimplePie_Enclosure::get_medium'; match='get_medium'; definition='get_medium()'; description=''; file='/wp-includes/class-simplepie.php, line: 6749'; type='method';}, 
	{name='SimplePie_Enclosure::get_player'; match='get_player'; definition='get_player()'; description=''; file='/wp-includes/class-simplepie.php, line: 6761'; type='method';}, 
	{name='SimplePie_Enclosure::get_rating'; match='get_rating'; definition='get_rating($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6773'; type='method';}, 
	{name='SimplePie_Enclosure::get_ratings'; match='get_ratings'; definition='get_ratings()'; description=''; file='/wp-includes/class-simplepie.php, line: 6786'; type='method';}, 
	{name='SimplePie_Enclosure::get_real_type'; match='get_real_type'; definition='get_real_type($find_handler=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 7165'; type='method';}, 
	{name='SimplePie_Enclosure::get_restriction'; match='get_restriction'; definition='get_restriction($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6798'; type='method';}, 
	{name='SimplePie_Enclosure::get_restrictions'; match='get_restrictions'; definition='get_restrictions()'; description=''; file='/wp-includes/class-simplepie.php, line: 6811'; type='method';}, 
	{name='SimplePie_Enclosure::get_sampling_rate'; match='get_sampling_rate'; definition='get_sampling_rate()'; description=''; file='/wp-includes/class-simplepie.php, line: 6823'; type='method';}, 
	{name='SimplePie_Enclosure::get_size'; match='get_size'; definition='get_size()'; description=''; file='/wp-includes/class-simplepie.php, line: 6835'; type='method';}, 
	{name='SimplePie_Enclosure::get_thumbnail'; match='get_thumbnail'; definition='get_thumbnail($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 6848'; type='method';}, 
	{name='SimplePie_Enclosure::get_thumbnails'; match='get_thumbnails'; definition='get_thumbnails()'; description=''; file='/wp-includes/class-simplepie.php, line: 6861'; type='method';}, 
	{name='SimplePie_Enclosure::get_title'; match='get_title'; definition='get_title()'; description=''; file='/wp-includes/class-simplepie.php, line: 6873'; type='method';}, 
	{name='SimplePie_Enclosure::get_type'; match='get_type'; definition='get_type()'; description=''; file='/wp-includes/class-simplepie.php, line: 6885'; type='method';}, 
	{name='SimplePie_Enclosure::get_width'; match='get_width'; definition='get_width()'; description=''; file='/wp-includes/class-simplepie.php, line: 6897'; type='method';}, 
	{name='SimplePie_Enclosure::native_embed'; match='native_embed'; definition='native_embed($options=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 6909'; type='method';}, 
	{name='SimplePie_File::SimplePie_File'; match='SimplePie_File'; definition='SimplePie_File($url, $timeout=10, $redirects=5, $headers=null, $useragent=null, $force_fsockopen=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 7647'; type='method';}, 
	{name='SimplePie_HTTP_Parser::SimplePie_HTTP_Parser'; match='SimplePie_HTTP_Parser'; definition='SimplePie_HTTP_Parser($data)'; description='Create an instance of the class with the input data 
'; file='/wp-includes/class-simplepie.php, line: 7965'; params='@param string $data Input data  '; type='method';}, 
	{name='SimplePie_HTTP_Parser::body'; match='body'; definition='body()'; description='Parse the body 
'; file='/wp-includes/class-simplepie.php, line: 8287'; type='method';}, 
	{name='SimplePie_HTTP_Parser::has_data'; match='has_data'; definition='has_data()'; description='Check whether there is data beyond the pointer 
'; file='/wp-includes/class-simplepie.php, line: 8006'; return='bool true if there is further data, false if not '; type='method';}, 
	{name='SimplePie_HTTP_Parser::http_version'; match='http_version'; definition='http_version()'; description='Parse the HTTP version 
'; file='/wp-includes/class-simplepie.php, line: 8031'; type='method';}, 
	{name='SimplePie_HTTP_Parser::is_linear_whitespace'; match='is_linear_whitespace'; definition='is_linear_whitespace()'; description='See if the next character is LWS 
'; file='/wp-includes/class-simplepie.php, line: 8017'; return='bool true if the next character is LWS, false if not '; type='method';}, 
	{name='SimplePie_HTTP_Parser::linear_whitespace'; match='linear_whitespace'; definition='linear_whitespace()'; description='Parse LWS, replacing consecutive LWS characters with a single space 
'; file='/wp-includes/class-simplepie.php, line: 8158'; type='method';}, 
	{name='SimplePie_HTTP_Parser::name'; match='name'; definition='name()'; description='Parse a header name 
'; file='/wp-includes/class-simplepie.php, line: 8130'; type='method';}, 
	{name='SimplePie_HTTP_Parser::new_line'; match='new_line'; definition='new_line()'; description='Deal with a new line, shifting data around as needed 
'; file='/wp-includes/class-simplepie.php, line: 8092'; type='method';}, 
	{name='SimplePie_HTTP_Parser::parse'; match='parse'; definition='parse()'; description='Parse the input data 
'; file='/wp-includes/class-simplepie.php, line: 7977'; return='bool true on success, false on failure '; type='method';}, 
	{name='SimplePie_HTTP_Parser::quote'; match='quote'; definition='quote()'; description='See what state to move to while within quoted header values 
'; file='/wp-includes/class-simplepie.php, line: 8225'; type='method';}, 
	{name='SimplePie_HTTP_Parser::quote_char'; match='quote_char'; definition='quote_char()'; description='Parse a header value while within quotes 
'; file='/wp-includes/class-simplepie.php, line: 8262'; type='method';}, 
	{name='SimplePie_HTTP_Parser::quote_escaped'; match='quote_escaped'; definition='quote_escaped()'; description='Parse an escaped character within quotes 
'; file='/wp-includes/class-simplepie.php, line: 8275'; type='method';}, 
	{name='SimplePie_HTTP_Parser::reason'; match='reason'; definition='reason()'; description='Parse the reason phrase 
'; file='/wp-includes/class-simplepie.php, line: 8079'; type='method';}, 
	{name='SimplePie_HTTP_Parser::status'; match='status'; definition='status()'; description='Parse the status code 
'; file='/wp-includes/class-simplepie.php, line: 8060'; type='method';}, 
	{name='SimplePie_HTTP_Parser::value'; match='value'; definition='value()'; description='See what state to move to while within non-quoted header values 
'; file='/wp-includes/class-simplepie.php, line: 8180'; type='method';}, 
	{name='SimplePie_HTTP_Parser::value_char'; match='value_char'; definition='value_char()'; description='Parse a header value while outside quotes 
'; file='/wp-includes/class-simplepie.php, line: 8212'; type='method';}, 
	{name='SimplePie_IRI::SimplePie_IRI'; match='SimplePie_IRI'; definition='SimplePie_IRI($iri)'; description='Create a new IRI object, from a specified string 
'; file='/wp-includes/class-simplepie.php, line: 11659'; params='@param string $iri  '; return='<code>SimplePie_IRI</code> '; type='method';}, 
	{name='SimplePie_IRI::__toString'; match='__toString'; definition='__toString()'; description='Return the entire IRI when you try and read the object as a string 
'; file='/wp-includes/class-simplepie.php, line: 11647'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_authority'; match='get_authority'; definition='get_authority()'; description='Get the complete authority 
'; file='/wp-includes/class-simplepie.php, line: 12218'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_fragment'; match='get_fragment'; definition='get_fragment()'; description='Get the fragment 
'; file='/wp-includes/class-simplepie.php, line: 12305'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_host'; match='get_host'; definition='get_host()'; description='Get the host 
'; file='/wp-includes/class-simplepie.php, line: 12261'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_iri'; match='get_iri'; definition='get_iri()'; description='Get the complete IRI 
'; file='/wp-includes/class-simplepie.php, line: 12167'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_path'; match='get_path'; definition='get_path()'; description='Get the path 
'; file='/wp-includes/class-simplepie.php, line: 12283'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_port'; match='get_port'; definition='get_port()'; description='Get the port 
'; file='/wp-includes/class-simplepie.php, line: 12272'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_query'; match='get_query'; definition='get_query()'; description='Get the query 
'; file='/wp-includes/class-simplepie.php, line: 12294'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_scheme'; match='get_scheme'; definition='get_scheme()'; description='Get the scheme 
'; file='/wp-includes/class-simplepie.php, line: 12207'; return='string '; type='method';}, 
	{name='SimplePie_IRI::get_userinfo'; match='get_userinfo'; definition='get_userinfo()'; description='Get the user information 
'; file='/wp-includes/class-simplepie.php, line: 12250'; return='string '; type='method';}, 
	{name='SimplePie_IRI::is_valid'; match='is_valid'; definition='is_valid()'; description='Check if the object represents a valid IRI 
'; file='/wp-includes/class-simplepie.php, line: 11917'; return='bool '; type='method';}, 
	{name='SimplePie_IRI::parse_iri'; match='parse_iri'; definition='parse_iri($iri)'; description='Parse an IRI into scheme/authority/path/query/fragment segments 
'; file='/wp-includes/class-simplepie.php, line: 11761'; params='@param string $iri  '; return='array '; type='method';}, 
	{name='SimplePie_IRI::remove_dot_segments'; match='remove_dot_segments'; definition='remove_dot_segments($input)'; description='Remove dot segments from a path 
'; file='/wp-includes/class-simplepie.php, line: 11778'; params='@param string $input  '; return='string '; type='method';}, 
	{name='SimplePie_IRI::replace_invalid_with_pct_encoding'; match='replace_invalid_with_pct_encoding'; definition='replace_invalid_with_pct_encoding($string, $valid_chars, $case=SIMPLEPIE_SAME_CASE)'; description='Replace invalid character with percent encoding 
'; file='/wp-includes/class-simplepie.php, line: 11841'; params='@param string $string Input string  
@param string $valid_chars Valid characters  
@param int $case Normalise case  '; return='string '; type='method';}, 
	{name='SimplePie_IRI::set_authority'; match='set_authority'; definition='set_authority($authority)'; description='Set the authority. Returns true on success, false on failure (if there are any invalid characters). 
'; file='/wp-includes/class-simplepie.php, line: 11971'; params='@param string $authority  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_fragment'; match='set_fragment'; definition='set_fragment($fragment)'; description='Set the fragment. 
'; file='/wp-includes/class-simplepie.php, line: 12147'; params='@param string $fragment  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_host'; match='set_host'; definition='set_host($host)'; description='Set the host. Returns true on success, false on failure (if there are any invalid characters). 
'; file='/wp-includes/class-simplepie.php, line: 12025'; params='@param string $host  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_path'; match='set_path'; definition='set_path($path)'; description='Set the path. 
'; file='/wp-includes/class-simplepie.php, line: 12093'; params='@param string $path  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_port'; match='set_port'; definition='set_port($port)'; description='Set the port. Returns true on success, false on failure (if there are any invalid characters). 
'; file='/wp-includes/class-simplepie.php, line: 12064'; params='@param string $port  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_query'; match='set_query'; definition='set_query($query)'; description='Set the query. 
'; file='/wp-includes/class-simplepie.php, line: 12126'; params='@param string $query  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_scheme'; match='set_scheme'; definition='set_scheme($scheme)'; description='Set the scheme. Returns true on success, false on failure (if there are any invalid characters). 
'; file='/wp-includes/class-simplepie.php, line: 11930'; params='@param string $scheme  '; return='bool '; type='method';}, 
	{name='SimplePie_IRI::set_userinfo'; match='set_userinfo'; definition='set_userinfo($userinfo)'; description='Set the userinfo. 
'; file='/wp-includes/class-simplepie.php, line: 12003'; params='@param string $userinfo  '; return='bool '; type='method';}, 
	{name='SimplePie_Item::SimplePie_Item'; match='SimplePie_Item'; definition='SimplePie_Item($feed, $data)'; description=''; file='/wp-includes/class-simplepie.php, line: 3116'; type='method';}, 
	{name='SimplePie_Item::__destruct'; match='__destruct'; definition='__destruct()'; description='Remove items that link back to this before destroying this object '; file='/wp-includes/class-simplepie.php, line: 3130'; type='method';}, 
	{name='SimplePie_Item::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 3122'; type='method';}, 
	{name='SimplePie_Item::add_to_blinklist'; match='add_to_blinklist'; definition='add_to_blinklist()'; description=''; file='/wp-includes/class-simplepie.php, line: 5656'; type='method';}, 
	{name='SimplePie_Item::add_to_blogmarks'; match='add_to_blogmarks'; definition='add_to_blogmarks()'; description=''; file='/wp-includes/class-simplepie.php, line: 5661'; type='method';}, 
	{name='SimplePie_Item::add_to_delicious'; match='add_to_delicious'; definition='add_to_delicious()'; description=''; file='/wp-includes/class-simplepie.php, line: 5666'; type='method';}, 
	{name='SimplePie_Item::add_to_digg'; match='add_to_digg'; definition='add_to_digg()'; description=''; file='/wp-includes/class-simplepie.php, line: 5671'; type='method';}, 
	{name='SimplePie_Item::add_to_furl'; match='add_to_furl'; definition='add_to_furl()'; description=''; file='/wp-includes/class-simplepie.php, line: 5676'; type='method';}, 
	{name='SimplePie_Item::add_to_magnolia'; match='add_to_magnolia'; definition='add_to_magnolia()'; description=''; file='/wp-includes/class-simplepie.php, line: 5681'; type='method';}, 
	{name='SimplePie_Item::add_to_myweb20'; match='add_to_myweb20'; definition='add_to_myweb20()'; description=''; file='/wp-includes/class-simplepie.php, line: 5686'; type='method';}, 
	{name='SimplePie_Item::add_to_newsvine'; match='add_to_newsvine'; definition='add_to_newsvine()'; description=''; file='/wp-includes/class-simplepie.php, line: 5691'; type='method';}, 
	{name='SimplePie_Item::add_to_reddit'; match='add_to_reddit'; definition='add_to_reddit()'; description=''; file='/wp-includes/class-simplepie.php, line: 5696'; type='method';}, 
	{name='SimplePie_Item::add_to_segnalo'; match='add_to_segnalo'; definition='add_to_segnalo()'; description=''; file='/wp-includes/class-simplepie.php, line: 5701'; type='method';}, 
	{name='SimplePie_Item::add_to_service'; match='add_to_service'; definition='add_to_service($item_url, $title_url=null, $summary_url=null)'; description='Creates the add_to_&lowast; methods&apos; return data 
'; file='/wp-includes/class-simplepie.php, line: 5635'; params='@param string $item_url String to prefix to the item permalink  
@param string $title_url String to prefix to the item title (and suffix to the item permalink)  '; return='mixed URL if feed exists, false otherwise '; type='method';}, 
	{name='SimplePie_Item::add_to_simpy'; match='add_to_simpy'; definition='add_to_simpy()'; description=''; file='/wp-includes/class-simplepie.php, line: 5706'; type='method';}, 
	{name='SimplePie_Item::add_to_spurl'; match='add_to_spurl'; definition='add_to_spurl()'; description=''; file='/wp-includes/class-simplepie.php, line: 5711'; type='method';}, 
	{name='SimplePie_Item::add_to_wists'; match='add_to_wists'; definition='add_to_wists()'; description=''; file='/wp-includes/class-simplepie.php, line: 5716'; type='method';}, 
	{name='SimplePie_Item::get_author'; match='get_author'; definition='get_author($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 3386'; type='method';}, 
	{name='SimplePie_Item::get_authors'; match='get_authors'; definition='get_authors()'; description=''; file='/wp-includes/class-simplepie.php, line: 3470'; type='method';}, 
	{name='SimplePie_Item::get_base'; match='get_base'; definition='get_base($element=array())'; description=''; file='/wp-includes/class-simplepie.php, line: 3150'; type='method';}, 
	{name='SimplePie_Item::get_categories'; match='get_categories'; definition='get_categories()'; description=''; file='/wp-includes/class-simplepie.php, line: 3329'; type='method';}, 
	{name='SimplePie_Item::get_category'; match='get_category'; definition='get_category($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 3316'; type='method';}, 
	{name='SimplePie_Item::get_content'; match='get_content'; definition='get_content($content_only=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 3292'; type='method';}, 
	{name='SimplePie_Item::get_contributor'; match='get_contributor'; definition='get_contributor($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 3399'; type='method';}, 
	{name='SimplePie_Item::get_contributors'; match='get_contributors'; definition='get_contributors()'; description=''; file='/wp-includes/class-simplepie.php, line: 3412'; type='method';}, 
	{name='SimplePie_Item::get_copyright'; match='get_copyright'; definition='get_copyright()'; description=''; file='/wp-includes/class-simplepie.php, line: 3552'; type='method';}, 
	{name='SimplePie_Item::get_date'; match='get_date'; definition='get_date($date_format=\'j F Y)'; description=''; file='/wp-includes/class-simplepie.php, line: 3572'; type='method';}, 
	{name='SimplePie_Item::get_description'; match='get_description'; definition='get_description($description_only=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 3248'; type='method';}, 
	{name='SimplePie_Item::get_enclosure'; match='get_enclosure'; definition='get_enclosure($key=0, $prefer=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 3764'; type='method';}, 
	{name='SimplePie_Item::get_enclosures'; match='get_enclosures'; definition='get_enclosures()'; description='Grabs all available enclosures (podcasts, etc.) 
Supports the &lt;enclosure&gt; RSS tag, as well as Media RSS and iTunes RSS. 
At this point, we&apos;re pretty much assuming that all enclosures for an item are the same content. Anything else is too complicated to properly support. '; file='/wp-includes/class-simplepie.php, line: 3787'; type='method';}, 
	{name='SimplePie_Item::get_feed'; match='get_feed'; definition='get_feed()'; description=''; file='/wp-includes/class-simplepie.php, line: 3160'; type='method';}, 
	{name='SimplePie_Item::get_id'; match='get_id'; definition='get_id($hash=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 3165'; type='method';}, 
	{name='SimplePie_Item::get_item_tags'; match='get_item_tags'; definition='get_item_tags($namespace, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 3138'; type='method';}, 
	{name='SimplePie_Item::get_latitude'; match='get_latitude'; definition='get_latitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 5578'; type='method';}, 
	{name='SimplePie_Item::get_link'; match='get_link'; definition='get_link($key=0, $rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 3674'; type='method';}, 
	{name='SimplePie_Item::get_links'; match='get_links'; definition='get_links($rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 3687'; type='method';}, 
	{name='SimplePie_Item::get_local_date'; match='get_local_date'; definition='get_local_date($date_format=\'%c\')'; description=''; file='/wp-includes/class-simplepie.php, line: 3640'; type='method';}, 
	{name='SimplePie_Item::get_longitude'; match='get_longitude'; definition='get_longitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 5594'; type='method';}, 
	{name='SimplePie_Item::get_permalink'; match='get_permalink'; definition='get_permalink()'; description=''; file='/wp-includes/class-simplepie.php, line: 3656'; type='method';}, 
	{name='SimplePie_Item::get_source'; match='get_source'; definition='get_source()'; description=''; file='/wp-includes/class-simplepie.php, line: 5614'; type='method';}, 
	{name='SimplePie_Item::get_title'; match='get_title'; definition='get_title()'; description=''; file='/wp-includes/class-simplepie.php, line: 3208'; type='method';}, 
	{name='SimplePie_Item::sanitize'; match='sanitize'; definition='sanitize($data, $type, $base=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 3155'; type='method';}, 
	{name='SimplePie_Item::search_technorati'; match='search_technorati'; definition='search_technorati()'; description=''; file='/wp-includes/class-simplepie.php, line: 5721'; type='method';}, 
	{name='SimplePie_Locator::SimplePie_Locator'; match='SimplePie_Locator'; definition='SimplePie_Locator($file, $timeout=10, $useragent=null, $file_class=\', $max_checked_feeds=10, $content_type_sniffer_class=\')'; description=''; file='/wp-includes/class-simplepie.php, line: 14069'; type='method';}, 
	{name='SimplePie_Locator::autodiscovery'; match='autodiscovery'; definition='autodiscovery()'; description=''; file='/wp-includes/class-simplepie.php, line: 14171'; type='method';}, 
	{name='SimplePie_Locator::body'; match='body'; definition='body($array)'; description=''; file='/wp-includes/class-simplepie.php, line: 14284'; type='method';}, 
	{name='SimplePie_Locator::extension'; match='extension'; definition='extension($array)'; description=''; file='/wp-includes/class-simplepie.php, line: 14259'; type='method';}, 
	{name='SimplePie_Locator::find'; match='find'; definition='find($type=SIMPLEPIE_LOCATOR_ALL, $working)'; description=''; file='/wp-includes/class-simplepie.php, line: 14079'; type='method';}, 
	{name='SimplePie_Locator::get_base'; match='get_base'; definition='get_base()'; description=''; file='/wp-includes/class-simplepie.php, line: 14155'; type='method';}, 
	{name='SimplePie_Locator::get_links'; match='get_links'; definition='get_links()'; description=''; file='/wp-includes/class-simplepie.php, line: 14217'; type='method';}, 
	{name='SimplePie_Locator::is_feed'; match='is_feed'; definition='is_feed($file)'; description=''; file='/wp-includes/class-simplepie.php, line: 14130'; type='method';}, 
	{name='SimplePie_Misc::absolutize_url'; match='absolutize_url'; definition='absolutize_url($relative, $base)'; description=''; file='/wp-includes/class-simplepie.php, line: 9103'; type='method';}, 
	{name='SimplePie_Misc::array_unique'; match='array_unique'; definition='array_unique($array)'; description=''; file='/wp-includes/class-simplepie.php, line: 11066'; type='method';}, 
	{name='SimplePie_Misc::atom_03_construct_type'; match='atom_03_construct_type'; definition='atom_03_construct_type($attribs)'; description=''; file='/wp-includes/class-simplepie.php, line: 10953'; type='method';}, 
	{name='SimplePie_Misc::atom_10_construct_type'; match='atom_10_construct_type'; definition='atom_10_construct_type($attribs)'; description=''; file='/wp-includes/class-simplepie.php, line: 10989'; type='method';}, 
	{name='SimplePie_Misc::atom_10_content_construct_type'; match='atom_10_content_construct_type'; definition='atom_10_content_construct_type($attribs)'; description=''; file='/wp-includes/class-simplepie.php, line: 11011'; type='method';}, 
	{name='SimplePie_Misc::change_encoding'; match='change_encoding'; definition='change_encoding($data, $input, $output)'; description=''; file='/wp-includes/class-simplepie.php, line: 9411'; type='method';}, 
	{name='SimplePie_Misc::compress_parse_url'; match='compress_parse_url'; definition='compress_parse_url($scheme=\'\', $authority=\'\', $path=\'\', $query=\'\', $fragment=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 9331'; type='method';}, 
	{name='SimplePie_Misc::display_cached_file'; match='display_cached_file'; definition='display_cached_file($identifier_url, $cache_location=\'./cache\', $cache_extension=\'spc\', $cache_class=\', $cache_name_function=\'md5\')'; description='If a file has been cached, retrieve and display it. 
This is most useful for caching images (get_favicon(), etc.), however it works for all cached files. This WILL NOT display ANY file/image/page/whatever, but rather only display what has already been cached by <code>SimplePie</code> . 
@see <code>SimplePie::get_favicon()</code> '; file='/wp-includes/class-simplepie.php, line: 9265'; params='@param str $identifier_url URL that is used to identify the content. This may or may not be the actual URL of the live content.  
@param str $cache_location Location of SimplePie\'s cache. Defaults to \'./cache\'.  
@param str $cache_extension The file extension that the file was cached with. Defaults to \'spc\'.  
@param str $cache_class Name of the cache-handling class being used in  
@param str $cache_name_function Obsolete. Exists for backwards compatibility reasons only.  '; type='method';}, 
	{name='SimplePie_Misc::element_implode'; match='element_implode'; definition='element_implode($element)'; description=''; file='/wp-includes/class-simplepie.php, line: 9200'; type='method';}, 
	{name='SimplePie_Misc::encoding'; match='encoding'; definition='encoding($charset)'; description=''; file='/wp-includes/class-simplepie.php, line: 9452'; type='method';}, 
	{name='SimplePie_Misc::error'; match='error'; definition='error($message, $level, $file, $line)'; description=''; file='/wp-includes/class-simplepie.php, line: 9219'; type='method';}, 
	{name='SimplePie_Misc::fix_protocol'; match='fix_protocol'; definition='fix_protocol($url, $http=1)'; description=''; file='/wp-includes/class-simplepie.php, line: 9287'; type='method';}, 
	{name='SimplePie_Misc::get_curl_version'; match='get_curl_version'; definition='get_curl_version()'; description=''; file='/wp-includes/class-simplepie.php, line: 10768'; type='method';}, 
	{name='SimplePie_Misc::get_element'; match='get_element'; definition='get_element($realname, $string)'; description=''; file='/wp-includes/class-simplepie.php, line: 9163'; type='method';}, 
	{name='SimplePie_Misc::htmlspecialchars_decode'; match='htmlspecialchars_decode'; definition='htmlspecialchars_decode($string, $quote_style)'; description=''; file='/wp-includes/class-simplepie.php, line: 10941'; type='method';}, 
	{name='SimplePie_Misc::is_isegment_nz_nc'; match='is_isegment_nz_nc'; definition='is_isegment_nz_nc($string)'; description=''; file='/wp-includes/class-simplepie.php, line: 11042'; type='method';}, 
	{name='SimplePie_Misc::is_subclass_of'; match='is_subclass_of'; definition='is_subclass_of($class1, $class2)'; description=''; file='/wp-includes/class-simplepie.php, line: 10789'; type='method';}, 
	{name='SimplePie_Misc::normalize_url'; match='normalize_url'; definition='normalize_url($url)'; description=''; file='/wp-includes/class-simplepie.php, line: 9342'; type='method';}, 
	{name='SimplePie_Misc::output_javascript'; match='output_javascript'; definition='output_javascript()'; description=''; file='/wp-includes/class-simplepie.php, line: 11328'; type='method';}, 
	{name='SimplePie_Misc::parse_date'; match='parse_date'; definition='parse_date($dt)'; description=''; file='/wp-includes/class-simplepie.php, line: 10848'; type='method';}, 
	{name='SimplePie_Misc::parse_mime'; match='parse_mime'; definition='parse_mime($mime)'; description=''; file='/wp-includes/class-simplepie.php, line: 10929'; type='method';}, 
	{name='SimplePie_Misc::parse_url'; match='parse_url'; definition='parse_url($url)'; description=''; file='/wp-includes/class-simplepie.php, line: 9319'; type='method';}, 
	{name='SimplePie_Misc::percent_encoding_normalization'; match='percent_encoding_normalization'; definition='percent_encoding_normalization($match)'; description=''; file='/wp-includes/class-simplepie.php, line: 9348'; type='method';}, 
	{name='SimplePie_Misc::remove_dot_segments'; match='remove_dot_segments'; definition='remove_dot_segments($input)'; description=''; file='/wp-includes/class-simplepie.php, line: 9109'; type='method';}, 
	{name='SimplePie_Misc::space_seperated_tokens'; match='space_seperated_tokens'; definition='space_seperated_tokens($string)'; description=''; file='/wp-includes/class-simplepie.php, line: 11047'; type='method';}, 
	{name='SimplePie_Misc::strip_comments'; match='strip_comments'; definition='strip_comments($data)'; description='Strip HTML comments 
'; file='/wp-includes/class-simplepie.php, line: 10830'; params='@param string $data Data to strip comments from  '; return='string Comment stripped string '; type='method';}, 
	{name='SimplePie_Misc::time_hms'; match='time_hms'; definition='time_hms($seconds)'; description=''; file='/wp-includes/class-simplepie.php, line: 9075'; type='method';}, 
	{name='SimplePie_Misc::uncomment_rfc822'; match='uncomment_rfc822'; definition='uncomment_rfc822($string)'; description='Remove RFC822 comments 
'; file='/wp-includes/class-simplepie.php, line: 10875'; params='@param string $data Data to strip comments from  '; return='string Comment stripped string '; type='method';}, 
	{name='SimplePie_Misc::utf8_bad_replace'; match='utf8_bad_replace'; definition='utf8_bad_replace($str)'; description='Remove bad UTF-8 bytes 
PCRE Pattern to locate bad bytes in a UTF-8 string comes from W3C FAQ: Multilingual Forms (modified to include full ASCII range) 
@author Geoffrey Sneddon @see http://www.w3.org/International/questions/qa-forms-utf-8 '; file='/wp-includes/class-simplepie.php, line: 9372'; params='@param string $str String to remove bad UTF-8 bytes from  '; return='string UTF-8 string '; type='method';}, 
	{name='SimplePie_Misc::xml_encoding'; match='xml_encoding'; definition='xml_encoding($data)'; description='Detect XML encoding, as per XML 1.0 Appendix F.1 
'; file='/wp-includes/class-simplepie.php, line: 11228'; params='@param string $data XML data  '; return='array Possible encodings '; type='method';}, 
	{name='SimplePie_Parse_Date::SimplePie_Parse_Date'; match='SimplePie_Parse_Date'; definition='SimplePie_Parse_Date()'; description='Create new <code>SimplePie_Parse_Date</code> object, and set self::day_pcre, self::month_pcre, and self::built_in 
'; file='/wp-includes/class-simplepie.php, line: 13018'; type='method';}, 
	{name='SimplePie_Parse_Date::add_callback'; match='add_callback'; definition='add_callback($callback)'; description='Add a callback method to parse a date 
'; file='/wp-includes/class-simplepie.php, line: 13094'; params='@param callback $callback  '; type='method';}, 
	{name='SimplePie_Parse_Date::date_asctime'; match='date_asctime'; definition='date_asctime($date)'; description='Parse C99&apos;s asctime()&apos;s date format 
'; file='/wp-includes/class-simplepie.php, line: 13404'; return='int Timestamp '; type='method';}, 
	{name='SimplePie_Parse_Date::date_rfc2822'; match='date_rfc2822'; definition='date_rfc2822($date)'; description='Parse RFC2822&apos;s date format 
'; file='/wp-includes/class-simplepie.php, line: 13246'; return='int Timestamp '; type='method';}, 
	{name='SimplePie_Parse_Date::date_rfc850'; match='date_rfc850'; definition='date_rfc850($date)'; description='Parse RFC850&apos;s date format 
'; file='/wp-includes/class-simplepie.php, line: 13339'; return='int Timestamp '; type='method';}, 
	{name='SimplePie_Parse_Date::date_strtotime'; match='date_strtotime'; definition='date_strtotime($date)'; description='Parse dates using strtotime() 
'; file='/wp-includes/class-simplepie.php, line: 13446'; return='int Timestamp '; type='method';}, 
	{name='SimplePie_Parse_Date::date_w3cdtf'; match='date_w3cdtf'; definition='date_w3cdtf($date)'; description='Parse a superset of W3C-DTF (allows hyphens and colons to be omitted, as well as allowing any of upper or lower case &quot;T&quot;, horizontal tabs, or spaces to be used as the time seperator (including more than one)) 
'; file='/wp-includes/class-simplepie.php, line: 13114'; return='int Timestamp '; type='method';}, 
	{name='SimplePie_Parse_Date::get'; match='get'; definition='get()'; description='Get the object 
'; file='/wp-includes/class-simplepie.php, line: 13048'; type='method';}, 
	{name='SimplePie_Parse_Date::parse'; match='parse'; definition='parse($date)'; description='Parse a date 
'; file='/wp-includes/class-simplepie.php, line: 13066'; params='@param string $date Date to parse  '; return='int Timestamp corresponding to date string, or false on failure '; type='method';}, 
	{name='SimplePie_Parse_Date::remove_rfc2822_comments'; match='remove_rfc2822_comments'; definition='remove_rfc2822_comments($string)'; description='Remove RFC822 comments 
'; file='/wp-includes/class-simplepie.php, line: 13186'; params='@param string $data Data to strip comments from  '; return='string Comment stripped string '; type='method';}, 
	{name='SimplePie_Parser::cdata'; match='cdata'; definition='cdata($parser, $cdata)'; description=''; file='/wp-includes/class-simplepie.php, line: 14578'; type='method';}, 
	{name='SimplePie_Parser::get_current_byte'; match='get_current_byte'; definition='get_current_byte()'; description=''; file='/wp-includes/class-simplepie.php, line: 14508'; type='method';}, 
	{name='SimplePie_Parser::get_current_column'; match='get_current_column'; definition='get_current_column()'; description=''; file='/wp-includes/class-simplepie.php, line: 14503'; type='method';}, 
	{name='SimplePie_Parser::get_current_line'; match='get_current_line'; definition='get_current_line()'; description=''; file='/wp-includes/class-simplepie.php, line: 14498'; type='method';}, 
	{name='SimplePie_Parser::get_data'; match='get_data'; definition='get_data()'; description=''; file='/wp-includes/class-simplepie.php, line: 14513'; type='method';}, 
	{name='SimplePie_Parser::get_error_code'; match='get_error_code'; definition='get_error_code()'; description=''; file='/wp-includes/class-simplepie.php, line: 14488'; type='method';}, 
	{name='SimplePie_Parser::get_error_string'; match='get_error_string'; definition='get_error_string()'; description=''; file='/wp-includes/class-simplepie.php, line: 14493'; type='method';}, 
	{name='SimplePie_Parser::parse'; match='parse'; definition='parse($data, $encoding)'; description=''; file='/wp-includes/class-simplepie.php, line: 14328'; type='method';}, 
	{name='SimplePie_Parser::split_ns'; match='split_ns'; definition='split_ns($string)'; description=''; file='/wp-includes/class-simplepie.php, line: 14613'; type='method';}, 
	{name='SimplePie_Parser::tag_close'; match='tag_close'; definition='tag_close($parser, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 14590'; type='method';}, 
	{name='SimplePie_Parser::tag_open'; match='tag_open'; definition='tag_open($parser, $tag, $attributes)'; description=''; file='/wp-includes/class-simplepie.php, line: 14518'; type='method';}, 
	{name='SimplePie_Rating::SimplePie_Rating'; match='SimplePie_Rating'; definition='SimplePie_Rating($scheme=null, $value=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 7538'; type='method';}, 
	{name='SimplePie_Rating::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 7544'; type='method';}, 
	{name='SimplePie_Rating::get_scheme'; match='get_scheme'; definition='get_scheme()'; description=''; file='/wp-includes/class-simplepie.php, line: 7550'; type='method';}, 
	{name='SimplePie_Rating::get_value'; match='get_value'; definition='get_value()'; description=''; file='/wp-includes/class-simplepie.php, line: 7562'; type='method';}, 
	{name='SimplePie_Restriction::SimplePie_Restriction'; match='SimplePie_Restriction'; definition='SimplePie_Restriction($relationship=null, $type=null, $value=null)'; description=''; file='/wp-includes/class-simplepie.php, line: 7582'; type='method';}, 
	{name='SimplePie_Restriction::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 7589'; type='method';}, 
	{name='SimplePie_Restriction::get_relationship'; match='get_relationship'; definition='get_relationship()'; description=''; file='/wp-includes/class-simplepie.php, line: 7595'; type='method';}, 
	{name='SimplePie_Restriction::get_type'; match='get_type'; definition='get_type()'; description=''; file='/wp-includes/class-simplepie.php, line: 7607'; type='method';}, 
	{name='SimplePie_Restriction::get_value'; match='get_value'; definition='get_value()'; description=''; file='/wp-includes/class-simplepie.php, line: 7619'; type='method';}, 
	{name='SimplePie_Sanitize::do_strip_htmltags'; match='do_strip_htmltags'; definition='do_strip_htmltags($match)'; description=''; file='/wp-includes/class-simplepie.php, line: 14977'; type='method';}, 
	{name='SimplePie_Sanitize::encode_instead_of_strip'; match='encode_instead_of_strip'; definition='encode_instead_of_strip($encode=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 14767'; type='method';}, 
	{name='SimplePie_Sanitize::pass_cache_data'; match='pass_cache_data'; definition='pass_cache_data($enable_cache=true, $cache_location=\'./cache\', $cache_name_function=\'md5\', $cache_class=\')'; description=''; file='/wp-includes/class-simplepie.php, line: 14702'; type='method';}, 
	{name='SimplePie_Sanitize::pass_file_data'; match='pass_file_data'; definition='pass_file_data($file_class=\', $timeout=10, $useragent=\'\', $force_fsockopen=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 14725'; type='method';}, 
	{name='SimplePie_Sanitize::remove_div'; match='remove_div'; definition='remove_div($enable=true)'; description=''; file='/wp-includes/class-simplepie.php, line: 14685'; type='method';}, 
	{name='SimplePie_Sanitize::replace_urls'; match='replace_urls'; definition='replace_urls($data, $tag, $attributes)'; description=''; file='/wp-includes/class-simplepie.php, line: 14947'; type='method';}, 
	{name='SimplePie_Sanitize::sanitize'; match='sanitize'; definition='sanitize($data, $type, $base=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 14814'; type='method';}, 
	{name='SimplePie_Sanitize::set_image_handler'; match='set_image_handler'; definition='set_image_handler($page=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 14690'; type='method';}, 
	{name='SimplePie_Sanitize::set_output_encoding'; match='set_output_encoding'; definition='set_output_encoding($encoding=\'UTF-8\')'; description=''; file='/wp-includes/class-simplepie.php, line: 14796'; type='method';}, 
	{name='SimplePie_Sanitize::set_url_replacements'; match='set_url_replacements'; definition='set_url_replacements($element_attribute=array(\'a\'=> \'href\', \'area\'=> \'href\', \'blockquote\'=> \'cite\', \'del\'=> \'cite\', \'form\'=> \'action\', \'img\'=> array(\'longdesc\', \'src\'), \'input\'=> \'src\', \'ins\'=> \'cite\', \'q\'=> \'cite\'))'; description='Set element/attribute key/value pairs of HTML attributes containing URLs that need to be resolved relative to the feed 
'; file='/wp-includes/class-simplepie.php, line: 14809'; params='@param array $element_attribute Element/attribute key/value pairs  '; since='1.0 '; type='method';}, 
	{name='SimplePie_Sanitize::strip_comments'; match='strip_comments'; definition='strip_comments($strip=false)'; description=''; file='/wp-includes/class-simplepie.php, line: 14791'; type='method';}, 
	{name='SimplePie_Source::SimplePie_Source'; match='SimplePie_Source'; definition='SimplePie_Source($item, $data)'; description=''; file='/wp-includes/class-simplepie.php, line: 5732'; type='method';}, 
	{name='SimplePie_Source::__toString'; match='__toString'; definition='__toString()'; description=''; file='/wp-includes/class-simplepie.php, line: 5738'; type='method';}, 
	{name='SimplePie_Source::get_author'; match='get_author'; definition='get_author($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 5876'; type='method';}, 
	{name='SimplePie_Source::get_authors'; match='get_authors'; definition='get_authors()'; description=''; file='/wp-includes/class-simplepie.php, line: 5889'; type='method';}, 
	{name='SimplePie_Source::get_base'; match='get_base'; definition='get_base($element=array())'; description=''; file='/wp-includes/class-simplepie.php, line: 5755'; type='method';}, 
	{name='SimplePie_Source::get_categories'; match='get_categories'; definition='get_categories()'; description=''; file='/wp-includes/class-simplepie.php, line: 5819'; type='method';}, 
	{name='SimplePie_Source::get_category'; match='get_category'; definition='get_category($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 5806'; type='method';}, 
	{name='SimplePie_Source::get_contributor'; match='get_contributor'; definition='get_contributor($key=0)'; description=''; file='/wp-includes/class-simplepie.php, line: 5959'; type='method';}, 
	{name='SimplePie_Source::get_contributors'; match='get_contributors'; definition='get_contributors()'; description=''; file='/wp-includes/class-simplepie.php, line: 5972'; type='method';}, 
	{name='SimplePie_Source::get_copyright'; match='get_copyright'; definition='get_copyright()'; description=''; file='/wp-includes/class-simplepie.php, line: 6169'; type='method';}, 
	{name='SimplePie_Source::get_description'; match='get_description'; definition='get_description()'; description=''; file='/wp-includes/class-simplepie.php, line: 6125'; type='method';}, 
	{name='SimplePie_Source::get_image_url'; match='get_image_url'; definition='get_image_url()'; description=''; file='/wp-includes/class-simplepie.php, line: 6257'; type='method';}, 
	{name='SimplePie_Source::get_item'; match='get_item'; definition='get_item()'; description=''; file='/wp-includes/class-simplepie.php, line: 5765'; type='method';}, 
	{name='SimplePie_Source::get_language'; match='get_language'; definition='get_language()'; description=''; file='/wp-includes/class-simplepie.php, line: 6197'; type='method';}, 
	{name='SimplePie_Source::get_latitude'; match='get_latitude'; definition='get_latitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 6221'; type='method';}, 
	{name='SimplePie_Source::get_link'; match='get_link'; definition='get_link($key=0, $rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 6030'; type='method';}, 
	{name='SimplePie_Source::get_links'; match='get_links'; definition='get_links($rel=\'alternate\')'; description=''; file='/wp-includes/class-simplepie.php, line: 6051'; type='method';}, 
	{name='SimplePie_Source::get_longitude'; match='get_longitude'; definition='get_longitude()'; description=''; file='/wp-includes/class-simplepie.php, line: 6237'; type='method';}, 
	{name='SimplePie_Source::get_permalink'; match='get_permalink'; definition='get_permalink()'; description='Added for parity between the parent-level and the item/entry-level. '; file='/wp-includes/class-simplepie.php, line: 6046'; type='method';}, 
	{name='SimplePie_Source::get_source_tags'; match='get_source_tags'; definition='get_source_tags($namespace, $tag)'; description=''; file='/wp-includes/class-simplepie.php, line: 5743'; type='method';}, 
	{name='SimplePie_Source::get_title'; match='get_title'; definition='get_title()'; description=''; file='/wp-includes/class-simplepie.php, line: 5770'; type='method';}, 
	{name='SimplePie_Source::sanitize'; match='sanitize'; definition='sanitize($data, $type, $base=\'\')'; description=''; file='/wp-includes/class-simplepie.php, line: 5760'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::SimplePie_XML_Declaration_Parser'; match='SimplePie_XML_Declaration_Parser'; definition='SimplePie_XML_Declaration_Parser($data)'; description='Create an instance of the class with the input data 
'; file='/wp-includes/class-simplepie.php, line: 13805'; params='@param string $data Input data  '; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::before_version_name'; match='before_version_name'; definition='before_version_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 13881'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::encoding_equals'; match='encoding_equals'; definition='encoding_equals()'; description=''; file='/wp-includes/class-simplepie.php, line: 13955'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::encoding_name'; match='encoding_name'; definition='encoding_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 13941'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::encoding_value'; match='encoding_value'; definition='encoding_value()'; description=''; file='/wp-includes/class-simplepie.php, line: 13969'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::get_value'; match='get_value'; definition='get_value()'; description='Read value '; file='/wp-includes/class-simplepie.php, line: 13864'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::has_data'; match='has_data'; definition='has_data()'; description='Check whether there is data beyond the pointer 
'; file='/wp-includes/class-simplepie.php, line: 13844'; return='bool true if there is further data, false if not '; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::parse'; match='parse'; definition='parse()'; description='Parse the input data 
'; file='/wp-includes/class-simplepie.php, line: 13817'; return='bool true on success, false on failure '; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::skip_whitespace'; match='skip_whitespace'; definition='skip_whitespace()'; description='Advance past any whitespace 
'; file='/wp-includes/class-simplepie.php, line: 13854'; return='int Number of whitespace characters passed '; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::standalone_equals'; match='standalone_equals'; definition='standalone_equals()'; description=''; file='/wp-includes/class-simplepie.php, line: 14003'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::standalone_name'; match='standalone_name'; definition='standalone_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 13989'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::standalone_value'; match='standalone_value'; definition='standalone_value()'; description=''; file='/wp-includes/class-simplepie.php, line: 14017'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::version_equals'; match='version_equals'; definition='version_equals()'; description=''; file='/wp-includes/class-simplepie.php, line: 13907'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::version_name'; match='version_name'; definition='version_name()'; description=''; file='/wp-includes/class-simplepie.php, line: 13893'; type='method';}, 
	{name='SimplePie_XML_Declaration_Parser::version_value'; match='version_value'; definition='version_value()'; description=''; file='/wp-includes/class-simplepie.php, line: 13921'; type='method';}, 
	{name='SimplePie_gzdecode::SimplePie_gzdecode'; match='SimplePie_gzdecode'; definition='SimplePie_gzdecode($data)'; description='Set the compressed string and related properties 
'; file='/wp-includes/class-simplepie.php, line: 8422'; type='method';}, 
	{name='SimplePie_gzdecode::__set'; match='__set'; definition='__set($name, $value)'; description='Don&apos;t allow anything to be set 
'; file='/wp-includes/class-simplepie.php, line: 8412'; type='method';}, 
	{name='SimplePie_gzdecode::parse'; match='parse'; definition='parse()'; description='Decode the GZIP stream 
'; file='/wp-includes/class-simplepie.php, line: 8433'; type='method';}, 
	{name='SpellChecker::SpellChecker'; match='SpellChecker'; definition='SpellChecker($config)'; description='Constructor. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/SpellChecker.php, line: 16'; params='@param $config Configuration name/value array.  '; type='method';}, 
	{name='SpellChecker::checkWords'; match='checkWords'; definition='checkWords($lang, $words)'; description='Spellchecks an array of words. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/SpellChecker.php, line: 37'; params='@param {String} $lang Language code like sv or en.  
@param {Array} $words Array of words to spellcheck.  '; return='{Array} Array of misspelled words. '; type='method';}, 
	{name='SpellChecker::getSuggestions'; match='getSuggestions'; definition='getSuggestions($lang, $word)'; description='Returns suggestions of for a specific word. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/SpellChecker.php, line: 48'; params='@param {String} $lang Language code like sv or en.  
@param {String} $word Specific word to get suggestions for.  '; return='{Array} Array of suggestions for the specified word. '; type='method';}, 
	{name='SpellChecker::loopback'; match='loopback'; definition='loopback()'; description='Simple loopback function everything that gets in will be send back. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/SpellChecker.php, line: 26'; params='@param $args.. Arguments.  '; return='{Array} Array of all input arguments. '; type='method';}, 
	{name='SpellChecker::throwError'; match='throwError'; definition='throwError($str)'; description='Throws an error message back to the user. This will stop all execution. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/classes/SpellChecker.php, line: 57'; params='@param {String} $str Message to send back to user.  '; type='method';}, 
	{name='Text_Diff::Text_Diff'; match='Text_Diff'; definition='Text_Diff($engine, $params)'; description='Computes diffs between sequences of strings. 
'; file='/wp-includes/Text/Diff.php, line: 37'; params='@param string $engine Name of the diffing engine to use. \'auto\' will automatically select the best.  
@param array $params Parameters to pass to the diffing engine. Normally an array of two arrays, each containing the lines from a file.  '; type='method';}, 
	{name='Text_Diff::_check'; match='_check'; definition='_check($from_lines, $to_lines)'; description='Checks a diff for validity. 
This is here only for debugging purposes. '; file='/wp-includes/Text/Diff.php, line: 256'; type='method';}, 
	{name='Text_Diff::countAddedLines'; match='countAddedLines'; definition='countAddedLines()'; description='returns the number of new (added) lines in a given diff. 
'; file='/wp-includes/Text/Diff.php, line: 74'; return='integer The number of new lines '; since='<code>Text_Diff</code> 1.1.0 '; type='method';}, 
	{name='Text_Diff::countDeletedLines'; match='countDeletedLines'; definition='countDeletedLines()'; description='Returns the number of deleted (removed) lines in a given diff. 
'; file='/wp-includes/Text/Diff.php, line: 93'; return='integer The number of deleted lines '; since='<code>Text_Diff</code> 1.1.0 '; type='method';}, 
	{name='Text_Diff::getDiff'; match='getDiff'; definition='getDiff()'; description='Returns the array of differences. '; file='/wp-includes/Text/Diff.php, line: 62'; type='method';}, 
	{name='Text_Diff::getFinal'; match='getFinal'; definition='getFinal()'; description='Gets the final set of lines. 
This reconstructs the $to_lines parameter passed to the constructor. 
'; file='/wp-includes/Text/Diff.php, line: 191'; return='array The sequence of strings. '; type='method';}, 
	{name='Text_Diff::getOriginal'; match='getOriginal'; definition='getOriginal()'; description='Gets the original set of lines. 
This reconstructs the $from_lines parameter passed to the constructor. 
'; file='/wp-includes/Text/Diff.php, line: 173'; return='array The original sequence of strings. '; type='method';}, 
	{name='Text_Diff::isEmpty'; match='isEmpty'; definition='isEmpty()'; description='Checks for an empty diff. 
'; file='/wp-includes/Text/Diff.php, line: 138'; return='boolean True if two sequences were identical. '; type='method';}, 
	{name='Text_Diff::lcs'; match='lcs'; definition='lcs()'; description='Computes the length of the Longest Common Subsequence (LCS). 
This is mostly for diagnostic purposes. 
'; file='/wp-includes/Text/Diff.php, line: 155'; return='integer The length of the LCS. '; type='method';}, 
	{name='Text_Diff::reverse'; match='reverse'; definition='reverse()'; description='Computes a reversed diff. 
Example: $diff = new <code>Text_Diff</code> ($lines1, $lines2); $rev = $diff-&gt; <code>reverse()</code> ; 
'; file='/wp-includes/Text/Diff.php, line: 119'; return='<code>Text_Diff</code> A Diff object representing the inverse of the original diff. Note that we purposely don&apos;t return a reference here, since this essentially is a clone() method. '; type='method';}, 
	{name='Text_Diff::trimNewlines'; match='trimNewlines'; definition='trimNewlines($line, $key)'; description='Removes trailing newlines from a line of text. This is meant to be used with array_walk(). 
'; file='/wp-includes/Text/Diff.php, line: 209'; params='@param string $line The line to trim.  
@param integer $key The index of the line in the array. Not used.  '; type='method';}, 
	{name='Text_Diff_Engine_native::_compareseq'; match='_compareseq'; definition='_compareseq($xoff, $xlim, $yoff, $ylim)'; description='Finds LCS of two sequences. 
The results are recorded in the vectors $this-&gt;{x,y}changed[], by storing a 1 in the element for each line that is an insertion or deletion (ie. is not in the LCS). 
The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1. 
Note that XLIM, YLIM are exclusive bounds. All line numbers are origin-0 and discarded lines are not counted. '; file='/wp-includes/Text/Diff/Engine/native.php, line: 270'; type='method';}, 
	{name='Text_Diff_Engine_native::_diag'; match='_diag'; definition='_diag($xoff, $xlim, $yoff, $ylim, $nchunks)'; description='Divides the Largest Common Subsequence (LCS) of the sequences (XOFF, XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized segments. 
Returns (LCS, PTS). LCS is the length of the LCS. PTS is an array of NCHUNKS+1 (X, Y) indexes giving the diving points between sub sequences. The first sub-sequence is contained in (X0, X1), (Y0, Y1), the second in (X1, X2), (Y1, Y2) and so on. Note that (X0, Y0) == (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM). 
This function assumes that the first lines of the specified portions of the two files do not match, and likewise that the last lines do not match. The caller must trim matching lines from the beginning and end of the portions it is going to specify. '; file='/wp-includes/Text/Diff/Engine/native.php, line: 150'; type='method';}, 
	{name='Text_Diff_Engine_native::_lcsPos'; match='_lcsPos'; definition='_lcsPos($ypos)'; description=''; file='/wp-includes/Text/Diff/Engine/native.php, line: 231'; type='method';}, 
	{name='Text_Diff_Engine_native::_shiftBoundaries'; match='_shiftBoundaries'; definition='_shiftBoundaries($lines, $changed, $other_changed)'; description='Adjusts inserts/deletes of identical lines to join changes as much as possible. 
We do something when a run of changed lines include a line at one end and has an excluded, identical line at the other. We are free to choose which identical line is included. `compareseq&apos; usually chooses the one at the beginning, but usually it is cleaner to consider the following identical line to be the &quot;change&quot;. 
This is extracted verbatim from analyze.c (GNU diffutils-2.7). '; file='/wp-includes/Text/Diff/Engine/native.php, line: 329'; type='method';}, 
	{name='Text_Diff_Engine_native::diff'; match='diff'; definition='diff($from_lines, $to_lines)'; description=''; file='/wp-includes/Text/Diff/Engine/native.php, line: 32'; type='method';}, 
	{name='Text_Diff_Engine_shell::_getLines'; match='_getLines'; definition='_getLines($text_lines, $line_no, $end=false)'; description='Get lines from either the old or new text 

'; file='/wp-includes/Text/Diff/Engine/shell.php, line: 146'; params='@param array &$text_lines Either $from_lines or $to_lines  
@param int &$line_no Current line number  
@param int $end Optional end line, when we want to chop more than one line. '; return='array The chopped lines '; type='method';}, 
	{name='Text_Diff_Engine_shell::diff'; match='diff'; definition='diff($from_lines, $to_lines)'; description='Returns the array of differences. 
'; file='/wp-includes/Text/Diff/Engine/shell.php, line: 35'; params='@param array $from_lines lines of text from old file  
@param array $to_lines lines of text from new file '; return='array all changes made (array with Text_Diff_Op_&lowast; objects) '; type='method';}, 
	{name='Text_Diff_Engine_string::diff'; match='diff'; definition='diff($diff, $mode=\'autodetect\')'; description='Parses a unified or context diff. 
First param contains the whole diff and the second can be used to force a specific diff type. If the second parameter is &apos;autodetect&apos;, the diff will be examined to find out which type of diff this is. 
'; file='/wp-includes/Text/Diff/Engine/string.php, line: 39'; params='@param string $diff The diff content.  
@param string $mode The diff mode of the content in $diff. One of \'context\', \'unified\', or \'autodetect\'. '; return='array List of all diff operations. '; type='method';}, 
	{name='Text_Diff_Engine_string::parseContextDiff'; match='parseContextDiff'; definition='parseContextDiff($diff)'; description='Parses an array containing the context diff. 
'; file='/wp-includes/Text/Diff/Engine/string.php, line: 147'; params='@param array $diff Array of lines. '; return='array List of all diff operations. '; type='method';}, 
	{name='Text_Diff_Engine_string::parseUnifiedDiff'; match='parseUnifiedDiff'; definition='parseUnifiedDiff($diff)'; description='Parses an array containing the unified diff. 
'; file='/wp-includes/Text/Diff/Engine/string.php, line: 92'; params='@param array $diff Array of lines. '; return='array List of all diff operations. '; type='method';}, 
	{name='Text_Diff_Engine_xdiff::diff'; match='diff'; definition='diff($from_lines, $to_lines)'; description=''; file='/wp-includes/Text/Diff/Engine/xdiff.php, line: 21'; type='method';}, 
	{name='Text_Diff_Op::nfinal'; match='nfinal'; definition='nfinal()'; description=''; file='/wp-includes/Text/Diff.php, line: 355'; type='method';}, 
	{name='Text_Diff_Op::norig'; match='norig'; definition='norig()'; description=''; file='/wp-includes/Text/Diff.php, line: 350'; type='method';}, 
	{name='Text_Diff_Op::reverse'; match='reverse'; definition='reverse()'; description=''; file='/wp-includes/Text/Diff.php, line: 345'; type='method';}, 
	{name='Text_Diff_Op_add::Text_Diff_Op_add'; match='Text_Diff_Op_add'; definition='Text_Diff_Op_add($lines)'; description=''; file='/wp-includes/Text/Diff.php, line: 417'; type='method';}, 
	{name='Text_Diff_Op_add::reverse'; match='reverse'; definition='reverse()'; description=''; file='/wp-includes/Text/Diff.php, line: 423'; type='method';}, 
	{name='Text_Diff_Op_change::Text_Diff_Op_change'; match='Text_Diff_Op_change'; definition='Text_Diff_Op_change($orig, $final)'; description=''; file='/wp-includes/Text/Diff.php, line: 439'; type='method';}, 
	{name='Text_Diff_Op_change::reverse'; match='reverse'; definition='reverse()'; description=''; file='/wp-includes/Text/Diff.php, line: 445'; type='method';}, 
	{name='Text_Diff_Op_copy::Text_Diff_Op_copy'; match='Text_Diff_Op_copy'; definition='Text_Diff_Op_copy($orig, $final=false)'; description=''; file='/wp-includes/Text/Diff.php, line: 370'; type='method';}, 
	{name='Text_Diff_Op_copy::reverse'; match='reverse'; definition='reverse()'; description=''; file='/wp-includes/Text/Diff.php, line: 379'; type='method';}, 
	{name='Text_Diff_Op_delete::Text_Diff_Op_delete'; match='Text_Diff_Op_delete'; definition='Text_Diff_Op_delete($lines)'; description=''; file='/wp-includes/Text/Diff.php, line: 395'; type='method';}, 
	{name='Text_Diff_Op_delete::reverse'; match='reverse'; definition='reverse()'; description=''; file='/wp-includes/Text/Diff.php, line: 401'; type='method';}, 
	{name='Text_Diff_Renderer::Text_Diff_Renderer'; match='Text_Diff_Renderer'; definition='Text_Diff_Renderer($params=array())'; description='Constructor. '; file='/wp-includes/Text/Diff/Renderer.php, line: 37'; type='method';}, 
	{name='Text_Diff_Renderer::_added'; match='_added'; definition='_added($lines)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 221'; type='method';}, 
	{name='Text_Diff_Renderer::_block'; match='_block'; definition='_block($xbeg, $xlen, $ybeg, $ylen, $edits)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 145'; type='method';}, 
	{name='Text_Diff_Renderer::_blockHeader'; match='_blockHeader'; definition='_blockHeader($xbeg, $xlen, $ybeg, $ylen)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 182'; type='method';}, 
	{name='Text_Diff_Renderer::_changed'; match='_changed'; definition='_changed($orig, $final)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 231'; type='method';}, 
	{name='Text_Diff_Renderer::_context'; match='_context'; definition='_context($lines)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 216'; type='method';}, 
	{name='Text_Diff_Renderer::_deleted'; match='_deleted'; definition='_deleted($lines)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 226'; type='method';}, 
	{name='Text_Diff_Renderer::_endBlock'; match='_endBlock'; definition='_endBlock()'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 206'; type='method';}, 
	{name='Text_Diff_Renderer::_endDiff'; match='_endDiff'; definition='_endDiff()'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 177'; type='method';}, 
	{name='Text_Diff_Renderer::_lines'; match='_lines'; definition='_lines($lines, $prefix=\' \')'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 211'; type='method';}, 
	{name='Text_Diff_Renderer::_startBlock'; match='_startBlock'; definition='_startBlock($header)'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 201'; type='method';}, 
	{name='Text_Diff_Renderer::_startDiff'; match='_startDiff'; definition='_startDiff()'; description=''; file='/wp-includes/Text/Diff/Renderer.php, line: 172'; type='method';}, 
	{name='Text_Diff_Renderer::getParams'; match='getParams'; definition='getParams()'; description='Get any renderer parameters. 
'; file='/wp-includes/Text/Diff/Renderer.php, line: 52'; return='array All parameters of this renderer object. '; type='method';}, 
	{name='Text_Diff_Renderer::render'; match='render'; definition='render($diff)'; description='Renders a diff. 
'; file='/wp-includes/Text/Diff/Renderer.php, line: 71'; params='@param  $diff A  '; return='string The formatted output. '; type='method';}, 
	{name='Text_Diff_Renderer_inline::_added'; match='_added'; definition='_added($lines)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 117'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_blockHeader'; match='_blockHeader'; definition='_blockHeader($xbeg, $xlen, $ybeg, $ylen)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 94'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_changed'; match='_changed'; definition='_changed($orig, $final)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 133'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_deleted'; match='_deleted'; definition='_deleted($lines, $words=false)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 125'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_encode'; match='_encode'; definition='_encode($string)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 202'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_lines'; match='_lines'; definition='_lines($lines, $prefix=\' \', $encode=true)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 104'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_splitOnWords'; match='_splitOnWords'; definition='_splitOnWords($string, $newlineEscape=\"\\n\")'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 182'; type='method';}, 
	{name='Text_Diff_Renderer_inline::_startBlock'; match='_startBlock'; definition='_startBlock($header)'; description=''; file='/wp-includes/Text/Diff/Renderer/inline.php, line: 99'; type='method';}, 
	{name='Text_MappedDiff::Text_MappedDiff'; match='Text_MappedDiff'; definition='Text_MappedDiff($from_lines, $to_lines, $mapped_from_lines, $mapped_to_lines)'; description='Computes a diff between sequences of strings. 
This can be used to compute things like case-insensitve diffs, or diffs which ignore changes in white-space. 
'; file='/wp-includes/Text/Diff.php, line: 309'; params='@param array $from_lines An array of strings.  
@param array $to_lines An array of strings.  
@param array $mapped_from_lines This array should have the same size number of elements as $from_lines. The elements in $mapped_from_lines and $mapped_to_lines are what is actually compared when computing the diff.  
@param array $mapped_to_lines This array should have the same number of elements as $to_lines.  '; type='method';}, 
	{name='Theme_Installer_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1320'; type='method';}, 
	{name='Theme_Installer_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1337'; type='method';}, 
	{name='Theme_Installer_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1330'; type='method';}, 
	{name='Theme_Upgrader::bulk_upgrade'; match='bulk_upgrade'; definition='bulk_upgrade($themes)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 696'; type='method';}, 
	{name='Theme_Upgrader::current_after'; match='current_after'; definition='current_after($return, $theme)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 798'; type='method';}, 
	{name='Theme_Upgrader::current_before'; match='current_before'; definition='current_before($return, $theme)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 783'; type='method';}, 
	{name='Theme_Upgrader::delete_old_theme'; match='delete_old_theme'; definition='delete_old_theme($removed, $local_destination, $remote_destination, $theme)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 822'; type='method';}, 
	{name='Theme_Upgrader::install'; match='install'; definition='install($package)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 628'; type='method';}, 
	{name='Theme_Upgrader::install_strings'; match='install_strings'; definition='install_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 619'; type='method';}, 
	{name='Theme_Upgrader::theme_info'; match='theme_info'; definition='theme_info($theme=null)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 837'; type='method';}, 
	{name='Theme_Upgrader::upgrade'; match='upgrade'; definition='upgrade($theme)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 654'; type='method';}, 
	{name='Theme_Upgrader::upgrade_strings'; match='upgrade_strings'; definition='upgrade_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 608'; type='method';}, 
	{name='Theme_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1382'; type='method';}, 
	{name='Theme_Upgrader_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1391'; type='method';}, 
	{name='WP::add_query_var'; match='add_query_var'; definition='add_query_var($qv)'; description='Add name to list of public query variables. 
'; file='/wp-includes/class-wp.php, line: 93'; params='@param string $qv Query variable name.  '; since='2.1.0 '; type='method';}, 
	{name='WP::build_query_string'; match='build_query_string'; definition='build_query_string()'; description='Sets the query string property based off of the query variable property. 
The &apos;query_string&apos; filter is deprecated, but still works. Plugins should use the &apos;request&apos; filter instead. 
'; file='/wp-includes/class-wp.php, line: 387'; since='2.0.0 '; type='method';}, 
	{name='WP::handle_404'; match='handle_404'; definition='handle_404()'; description='Set the Headers for 404, if nothing is found for requested URL. 
Issue a 404 if a request doesn&apos;t match any posts and doesn&apos;t match any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already issued, and if the request was not a search or the homepage. 
Otherwise, issue a 200. 
'; file='/wp-includes/class-wp.php, line: 468'; since='2.0.0 '; type='method';}, 
	{name='WP::init'; match='init'; definition='init()'; description='Set up the current user. 
'; file='/wp-includes/class-wp.php, line: 441'; since='2.0.0 '; type='method';}, 
	{name='WP::main'; match='main'; definition='main($query_args=\'\')'; description='Sets up all of the variables required by the WordPress environment. 
The action &apos;wp&apos; has one parameter that references the <code>WP</code> object. It allows for accessing the properties and methods to further manipulate the object. 
'; file='/wp-includes/class-wp.php, line: 497'; params='@param string array $query_args Passed to  '; since='2.0.0 '; type='method';}, 
	{name='WP::parse_request'; match='parse_request'; definition='parse_request($extra_query_vars=\'\')'; description='Parse request to find correct WordPress query. 
Sets up the query variables based on the request. There are also many filters and actions that can be used to further manipulate the result. 
'; file='/wp-includes/class-wp.php, line: 120'; params='@param array string $extra_query_vars Set the extra query variables.  '; since='2.0.0 '; type='method';}, 
	{name='WP::query_posts'; match='query_posts'; definition='query_posts()'; description='Set up the Loop based on the query variables. 
'; file='/wp-includes/class-wp.php, line: 451'; since='2.0.0 '; uses=' '; type='method';}, 
	{name='WP::register_globals'; match='register_globals'; definition='register_globals()'; description='Set up the WordPress Globals. 
The query_vars property will be extracted to the GLOBALS. So care should be taken when naming global variables that might interfere with the WordPress environment. 

'; file='/wp-includes/class-wp.php, line: 418'; since='2.0.0 '; type='method';}, 
	{name='WP::send_headers'; match='send_headers'; definition='send_headers()'; description='Send additional HTTP headers for caching, content type, etc. 
Sets the X-Pingback header, 404 status (if 404), Content-type. If showing a feed, it will also send last-modified, etag, and 304 status if needed. 
'; file='/wp-includes/class-wp.php, line: 312'; since='2.0.0 '; type='method';}, 
	{name='WP::set_query_var'; match='set_query_var'; definition='set_query_var($key, $value)'; description='Set the value of a query variable. 
'; file='/wp-includes/class-wp.php, line: 106'; params='@param string $key Query variable name.  
@param mixed $value Query variable value.  '; since='2.3.0 '; type='method';}, 
	{name='WP_Admin_Bar::add_menu'; match='add_menu'; definition='add_menu($args=array())'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 50'; type='method';}, 
	{name='WP_Admin_Bar::add_menus'; match='add_menus'; definition='add_menus()'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 181'; type='method';}, 
	{name='WP_Admin_Bar::add_node'; match='add_node'; definition='add_node($parent_id, $menu, $child)'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 164'; type='method';}, 
	{name='WP_Admin_Bar::initialize'; match='initialize'; definition='initialize()'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 9'; type='method';}, 
	{name='WP_Admin_Bar::load_user_locale_translations'; match='load_user_locale_translations'; definition='load_user_locale_translations()'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 213'; type='method';}, 
	{name='WP_Admin_Bar::recursive_render'; match='recursive_render'; definition='recursive_render($id, $menu_item)'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 115'; type='method';}, 
	{name='WP_Admin_Bar::remove_menu'; match='remove_menu'; definition='remove_menu($id)'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 86'; type='method';}, 
	{name='WP_Admin_Bar::remove_node'; match='remove_node'; definition='remove_node($id, $menu)'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 198'; type='method';}, 
	{name='WP_Admin_Bar::render'; match='render'; definition='render()'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 90'; type='method';}, 
	{name='WP_Admin_Bar::unload_user_locale_translations'; match='unload_user_locale_translations'; definition='unload_user_locale_translations()'; description=''; file='/wp-includes/class-wp-admin-bar.php, line: 227'; type='method';}, 
	{name='WP_Ajax_Response::__construct'; match='__construct'; definition='__construct($args=\'\')'; description='Constructor - Passes args to <code>WP_Ajax_Response::add()</code> . 
@see <code>WP_Ajax_Response::add()</code> '; file='/wp-includes/class-wp-ajax-response.php, line: 27'; params='@param string array $args Optional. Will be passed to  '; return='<code>WP_Ajax_Response</code> '; since='2.1.0 '; type='method';}, 
	{name='WP_Ajax_Response::add'; match='add'; definition='add($args=\'\')'; description='Append to XML response based on given arguments. 
The arguments that can be passed in the $args parameter are below. It is also possible to pass a <code>WP_Error</code> object in either the &apos;id&apos; or &apos;data&apos; argument. The parameter isn&apos;t actually optional, content should be given in order to send the correct response. 
&apos;what&apos; argument is a string that is the XMLRPC response type. &apos;action&apos; argument is a boolean or string that acts like a nonce. &apos;id&apos; argument can be <code>WP_Error</code> or an integer. &apos;old_id&apos; argument is false by default or an integer of the previous ID. &apos;position&apos; argument is an integer or a string with -1 = top, 1 = bottom, html ID = after, -html ID = before. &apos;data&apos; argument is a string with the content or message. &apos;supplemental&apos; argument is an array of strings that will be children of the supplemental element. 
'; file='/wp-includes/class-wp-ajax-response.php, line: 55'; params='@param string array $args Override defaults.  '; return='string XML response. '; since='2.1.0 '; type='method';}, 
	{name='WP_Ajax_Response::send'; match='send'; definition='send()'; description='Display XML formatted responses. 
Sets the content type header to text/xml. 
'; file='/wp-includes/class-wp-ajax-response.php, line: 128'; since='2.1.0 '; type='method';}, 
	{name='WP_Comment_Query::get_search_sql'; match='get_search_sql'; definition='get_search_sql($string, $cols)'; description=''; file='/wp-includes/comment.php, line: 362'; type='method';}, 
	{name='WP_Comment_Query::query'; match='query'; definition='query($query_vars)'; description='Execute the query 
'; file='/wp-includes/comment.php, line: 202'; params='@param string array $query_vars  '; return='int|array '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 24'; type='method';}, 
	{name='WP_Comments_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 39'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Comments_List_Table::column_author'; match='column_author'; definition='column_author($comment)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 444'; type='method';}, 
	{name='WP_Comments_List_Table::column_cb'; match='column_cb'; definition='column_cb($comment)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 319'; type='method';}, 
	{name='WP_Comments_List_Table::column_comment'; match='column_comment'; definition='column_comment($comment)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 324'; type='method';}, 
	{name='WP_Comments_List_Table::column_date'; match='column_date'; definition='column_date($comment)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 474'; type='method';}, 
	{name='WP_Comments_List_Table::column_default'; match='column_default'; definition='column_default($comment, $column_name)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 505'; type='method';}, 
	{name='WP_Comments_List_Table::column_response'; match='column_response'; definition='column_response($comment)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 478'; type='method';}, 
	{name='WP_Comments_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 239'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::display'; match='display'; definition='display()'; description='Display the table 
'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 270'; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 207'; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 183'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 246'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::get_per_page'; match='get_per_page'; definition='get_per_page($comment_status=\'all\')'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 123'; type='method';}, 
	{name='WP_Comments_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 263'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 138'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 129'; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 43'; since='3.1.0 '; type='method';}, 
	{name='WP_Comments_List_Table::single_row'; match='single_row'; definition='single_row($item)'; description='Generates content for a single row of the table 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 304'; params='@param object $item The current item  '; since='3.1.0 '; type='method';}, 
	{name='WP_Dependencies::add'; match='add'; definition='add($handle, $src, $deps=array(), $ver=false, $args=null)'; description='Adds item 
Adds the item only if no item of that name already exists 
'; file='/wp-includes/class.wp-dependencies.php, line: 127'; params='@param string $handle Script name  
@param string $src Script url  
@param array $deps (optional) Array of script names on which this script depends  
@param string $ver (optional) Script version (used for cache busting)  '; return='array Hierarchical array of dependencies '; type='method';}, 
	{name='WP_Dependencies::add_data'; match='add_data'; definition='add_data($handle, $data_name, $data)'; description='Adds extra data 
Adds data only if script has already been added 
'; file='/wp-includes/class.wp-dependencies.php, line: 144'; params='@param string $handle Script name  
@param string $data_name Name of object in which to store extra data  
@param array $data Array of extra data  '; return='bool success '; type='method';}, 
	{name='WP_Dependencies::all_deps'; match='all_deps'; definition='all_deps($handles, $recursion=false, $group=false)'; description='Determines dependencies 
Recursively builds array of items to process taking dependencies into account. Does NOT catch infinite loops. 
'; file='/wp-includes/class.wp-dependencies.php, line: 72'; params='@param mixed $handles Accepts (string) dep name or (array of strings) dep names  
@param bool $recursion Used internally when function calls itself  '; type='method';}, 
	{name='WP_Dependencies::dequeue'; match='dequeue'; definition='dequeue($handles)'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 166'; type='method';}, 
	{name='WP_Dependencies::do_item'; match='do_item'; definition='do_item($handle)'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 59'; type='method';}, 
	{name='WP_Dependencies::do_items'; match='do_items'; definition='do_items($handles=false, $group=false)'; description='Do the dependencies 
Process the items passed to it or the queue. Processes all dependencies. 
'; file='/wp-includes/class.wp-dependencies.php, line: 36'; params='@param mixed $handles (optional) items to be processed. (void) processes queue, (string) process that item, (array of strings) process those items  '; return='array Items that have been processed '; type='method';}, 
	{name='WP_Dependencies::enqueue'; match='enqueue'; definition='enqueue($handles)'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 155'; type='method';}, 
	{name='WP_Dependencies::query'; match='query'; definition='query($handle, $list=\'registered\')'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 177'; type='method';}, 
	{name='WP_Dependencies::remove'; match='remove'; definition='remove($handles)'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 150'; type='method';}, 
	{name='WP_Dependencies::set_group'; match='set_group'; definition='set_group($handle, $recursion, $group)'; description=''; file='/wp-includes/class.wp-dependencies.php, line: 198'; type='method';}, 
	{name='WP_Embed::__construct'; match='__construct'; definition='__construct()'; description='Constructor '; file='/wp-includes/media.php, line: 1030'; type='method';}, 
	{name='WP_Embed::autoembed'; match='autoembed'; definition='autoembed($content)'; description='Passes any unlinked URLs that are on their own line to <code>WP_Embed::shortcode()</code> for potential embedding. 

'; file='/wp-includes/media.php, line: 1259'; params='@param string $content The content to be searched.  '; return='string Potentially modified $content. '; type='method';}, 
	{name='WP_Embed::autoembed_callback'; match='autoembed_callback'; definition='autoembed_callback($match)'; description='Callback function for <code>WP_Embed::autoembed()</code> . 

'; file='/wp-includes/media.php, line: 1271'; params='@param array $match A regex match array.  '; return='string The embed HTML on success, otherwise the original URL. '; type='method';}, 
	{name='WP_Embed::cache_oembed'; match='cache_oembed'; definition='cache_oembed($post_ID)'; description='Triggers a caching of all oEmbed results. 
'; file='/wp-includes/media.php, line: 1232'; params='@param int $post_ID Post ID to do the caching for.  '; type='method';}, 
	{name='WP_Embed::delete_oembed_caches'; match='delete_oembed_caches'; definition='delete_oembed_caches($post_ID)'; description='Delete all oEmbed caches. 
'; file='/wp-includes/media.php, line: 1216'; params='@param int $post_ID Post ID to delete the caches for.  '; type='method';}, 
	{name='WP_Embed::maybe_make_link'; match='maybe_make_link'; definition='maybe_make_link($url)'; description='Conditionally makes a hyperlink based on an internal class variable. 
'; file='/wp-includes/media.php, line: 1286'; params='@param string $url URL to potentially be linked.  '; return='string Linked URL or the original URL. '; type='method';}, 
	{name='WP_Embed::maybe_run_ajax_cache'; match='maybe_run_ajax_cache'; definition='maybe_run_ajax_cache()'; description='If a post/page was saved, then output Javascript to make an AJAX request that will call <code>WP_Embed::cache_oembed()</code> . '; file='/wp-includes/media.php, line: 1085'; type='method';}, 
	{name='WP_Embed::register_handler'; match='register_handler'; definition='register_handler($id, $regex, $callback, $priority=10)'; description='Register an embed handler. Do not use this function directly, use <code>wp_embed_register_handler()</code> instead. This function should probably also only be used for sites that do not support oEmbed. 
'; file='/wp-includes/media.php, line: 1111'; params='@param string $id An internal ID/name for the handler. Needs to be unique.  
@param string $regex The regex that will be used to see if this handler should be used for a URL.  
@param callback $callback The callback function that will be called if the regex is matched.  
@param int $priority Optional. Used to specify the order in which the registered handlers will be tested (default: 10). Lower numbers correspond with earlier testing, and handlers with the same priority are tested in the order in which they were added to the action.  '; type='method';}, 
	{name='WP_Embed::run_shortcode'; match='run_shortcode'; definition='run_shortcode($content)'; description='Process the [embed] shortcode. 
Since the [embed] shortcode needs to be run earlier than other shortcodes, this function removes all existing shortcodes, registers the [embed] shortcode, calls <code>do_shortcode()</code> , and then re-registers the old shortcodes. 

'; file='/wp-includes/media.php, line: 1063'; params='@param string $content Content to parse  '; return='string Content with shortcode parsed '; uses='$shortcode_tags 
remove_all_shortcodes() 
add_shortcode() 
do_shortcode()'; type='method';}, 
	{name='WP_Embed::shortcode'; match='shortcode'; definition='shortcode($attr, $url=\'\')'; description='The <code>do_shortcode()</code> callback function. 
Attempts to convert a URL into embed HTML. Starts by checking the URL against the regex of the registered embed handlers. If none of the regex matches and it&apos;s enabled, then the URL will be given to the <code>WP_oEmbed</code> class. 

'; file='/wp-includes/media.php, line: 1150'; params='@param array $attr Shortcode attributes.  
@param string $url The URL attempting to be embeded.  '; return='string The embed HTML on success, otherwise the original URL. '; uses='wp_oembed_get() 
wp_parse_args() 
wp_embed_defaults() 
 
get_option() 
current_user_can() 
wp_cache_get() 
wp_cache_set() 
get_post_meta() 
update_post_meta()'; type='method';}, 
	{name='WP_Embed::unregister_handler'; match='unregister_handler'; definition='unregister_handler($id, $priority=10)'; description='Unregister a previously registered embed handler. Do not use this function directly, use <code>wp_embed_unregister_handler()</code> instead. 
'; file='/wp-includes/media.php, line: 1124'; params='@param string $id The handler ID that should be removed.  
@param int $priority Optional. The priority of the handler to be removed (default: 10).  '; type='method';}, 
	{name='WP_Error::__construct'; match='__construct'; definition='__construct($code=\'\', $message=\'\', $data=\'\')'; description='Constructor - Sets up error message. 
If code parameter is empty then nothing will be done. It is possible to add multiple messages to the same code, but with other methods in the class. 
All parameters are optional, but if the code parameter is set, then the data parameter is optional. 
'; file='/wp-includes/class-wp-error.php, line: 57'; params='@param string int $code Error code  
@param string $message Error message  
@param mixed $data Optional. Error data.  '; return='<code>WP_Error</code> '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::add'; match='add'; definition='add($code, $message, $data=\'\')'; description='Append more error messages to list of error messages. 

'; file='/wp-includes/class-wp-error.php, line: 170'; params='@param string int $code Error code.  
@param string $message Error message.  
@param mixed $data Optional. Error data.  '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::add_data'; match='add_data'; definition='add_data($data, $code=\'\')'; description='Add data for error code. 
The error code can only contain one error data. 
'; file='/wp-includes/class-wp-error.php, line: 186'; params='@param mixed $data Error data.  
@param string int $code Error code.  '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::get_error_code'; match='get_error_code'; definition='get_error_code()'; description='Retrieve first error code available. 

'; file='/wp-includes/class-wp-error.php, line: 90'; return='string|int Empty string, if no error codes. '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::get_error_codes'; match='get_error_codes'; definition='get_error_codes()'; description='Retrieve all error codes. 

'; file='/wp-includes/class-wp-error.php, line: 75'; return='array List of error codes, if avaiable. '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::get_error_data'; match='get_error_data'; definition='get_error_data($code=\'\')'; description='Retrieve error data for error code. 
'; file='/wp-includes/class-wp-error.php, line: 151'; params='@param string int $code Optional. Error code.  '; return='mixed Null, if no errors. '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::get_error_message'; match='get_error_message'; definition='get_error_message($code=\'\')'; description='Get single error message. 
This will get the first message available for the code. If no code is given then the first code available will be used. 
'; file='/wp-includes/class-wp-error.php, line: 134'; params='@param string int $code Optional. Error code to retrieve message.  '; return='string '; since='2.1.0 '; type='method';}, 
	{name='WP_Error::get_error_messages'; match='get_error_messages'; definition='get_error_messages($code=\'\')'; description='Retrieve all error messages or error messages matching code. 
'; file='/wp-includes/class-wp-error.php, line: 107'; params='@param string int $code Optional. Retrieve messages matching code, if exists.  '; return='array Error strings on success, or empty array on failure (if using codee parameter). '; since='2.1.0 '; type='method';}, 
	{name='WP_Feed_Cache_Transient::__construct'; match='__construct'; definition='__construct($location, $filename, $extension)'; description=''; file='/wp-includes/class-feed.php, line: 23'; type='method';}, 
	{name='WP_Feed_Cache_Transient::load'; match='load'; definition='load()'; description=''; file='/wp-includes/class-feed.php, line: 38'; type='method';}, 
	{name='WP_Feed_Cache_Transient::mtime'; match='mtime'; definition='mtime()'; description=''; file='/wp-includes/class-feed.php, line: 42'; type='method';}, 
	{name='WP_Feed_Cache_Transient::save'; match='save'; definition='save($data)'; description=''; file='/wp-includes/class-feed.php, line: 29'; type='method';}, 
	{name='WP_Feed_Cache_Transient::touch'; match='touch'; definition='touch()'; description=''; file='/wp-includes/class-feed.php, line: 46'; type='method';}, 
	{name='WP_Feed_Cache_Transient::unlink'; match='unlink'; definition='unlink()'; description=''; file='/wp-includes/class-feed.php, line: 50'; type='method';}, 
	{name='WP_Filesystem'; match='WP_Filesystem'; definition='WP_Filesystem($args=false, $context=false)'; description='Initialises and connects the WordPress Filesystem Abstraction classes. This function will include the chosen transport and attempt connecting. 
Plugins may add extra transports, And force WordPress to use them by returning the filename via the &apos;filesystem_method_file&apos; filter. 
'; file='/wp-admin/includes/file.php, line: 785'; params='@param array $args (optional) Connection args, These are passed directly to the WP_Filesystem_&lowast;() classes.  
@param string $context (optional) Context for get_filesystem_method(), See function declaration for more information.  '; return='boolean false on failure, true on success '; since='2.5.0 '; type='function';}, 
	{name='WP_Filesystem_Base::abspath'; match='abspath'; definition='abspath()'; description='Returns the path on the remote filesystem of ABSPATH 
'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 48'; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::find_base_dir'; match='find_base_dir'; definition='find_base_dir($base=\'.\', $echo=false)'; description='Locates a folder on the remote filesystem. 
Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_&lowast;_dir() methods instead. 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 112'; params='@param string $base The folder to start searching from  
@param bool $echo True to display debug information  '; return='string The location of the remote path. '; since='2.5 '; type='method';}, 
	{name='WP_Filesystem_Base::find_folder'; match='find_folder'; definition='find_folder($folder)'; description='Locates a folder on the remote filesystem. 
Assumes that on Windows systems, Stripping off the Drive letter is OK Sanitizes \\ to / in windows filepaths. 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 148'; params='@param string $folder the folder to locate  '; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::get_base_dir'; match='get_base_dir'; definition='get_base_dir($base=\'.\', $echo=false)'; description='Locates a folder on the remote filesystem. 
Deprecated; use WP_Filesystem::abspath() or WP_Filesystem::wp_&lowast;_dir() methods instead. 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 130'; params='@param string $base The folder to start searching from  
@param bool $echo True to display debug information  '; return='string The location of the remote path. '; since='2.5 '; type='method';}, 
	{name='WP_Filesystem_Base::gethchmod'; match='gethchmod'; definition='gethchmod($file)'; description='Returns the &lowast;nix style file permissions for a file 
From the PHP documentation page for fileperms() 
<code>2.5 access 23. string $file string filename int octal representation of permissions </code> '; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 243'; type='method';}, 
	{name='WP_Filesystem_Base::getnumchmodfromh'; match='getnumchmodfromh'; definition='getnumchmodfromh($mode)'; description='Converts &lowast;nix style file permissions to a octal number. 
Converts &apos;-rw-r--r--&apos; to 0644 From &quot;info at rvgate dot nl&quot;&apos;s comment on the PHP documentation for chmod() 
<code>2.5 access 24. string $mode string &lowast;nix style file permission int octal representation </code> '; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 298'; type='method';}, 
	{name='WP_Filesystem_Base::is_binary'; match='is_binary'; definition='is_binary($text)'; description='Determines if the string provided contains binary characters. 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 327'; params='@param string $text String to test against  '; return='bool true if string is binary, false otherwise '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::search_for_folder'; match='search_for_folder'; definition='search_for_folder($folder, $base=\'.\', $loop=false)'; description='Locates a folder on the remote filesystem. 
Expects Windows sanitized path 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 189'; params='@param string $folder the folder to locate  
@param string $base the folder to start searching from  
@param bool $loop if the function has recursed, Internal use only  '; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::wp_content_dir'; match='wp_content_dir'; definition='wp_content_dir()'; description='Returns the path on the remote filesystem of WP_CONTENT_DIR 
'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 62'; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::wp_lang_dir'; match='wp_lang_dir'; definition='wp_lang_dir()'; description='Returns the path on the remote filesystem of WP_LANG_DIR 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 95'; return='string The location of the remote path. '; since='3.2.0 '; type='method';}, 
	{name='WP_Filesystem_Base::wp_plugins_dir'; match='wp_plugins_dir'; definition='wp_plugins_dir()'; description='Returns the path on the remote filesystem of WP_PLUGIN_DIR 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 73'; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Base::wp_themes_dir'; match='wp_themes_dir'; definition='wp_themes_dir()'; description='Returns the path on the remote filesystem of the Themes Directory 

'; file='/wp-admin/includes/class-wp-filesystem-base.php, line: 84'; return='string The location of the remote path. '; since='2.7 '; type='method';}, 
	{name='WP_Filesystem_Direct::__construct'; match='__construct'; definition='__construct($arg)'; description='constructor 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 24'; params='@param mixed $arg ignored argument  '; type='method';}, 
	{name='WP_Filesystem_Direct::atime'; match='atime'; definition='atime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 267'; type='method';}, 
	{name='WP_Filesystem_Direct::chdir'; match='chdir'; definition='chdir($dir)'; description='Change directory 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 84'; params='@param string $dir The new current directory.  '; return='bool Returns true on success or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::chgrp'; match='chgrp'; definition='chgrp($file, $group, $recursive=false)'; description='Changes file group 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 95'; params='@param string $file Path to the file.  
@param mixed $group A group name or number.  
@param bool $recursive (optional) If set True changes file group recursivly. Defaults to False.  '; return='bool Returns true on success or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::chmod'; match='chmod'; definition='chmod($file, $mode=false, $recursive=false)'; description='Changes filesystem permissions 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 118'; params='@param string $file Path to the file.  
@param int $mode (optional) The permissions as octal number, usually 0644 for files, 0755 for dirs.  
@param bool $recursive (optional) If set True changes file group recursivly. Defaults to False.  '; return='bool Returns true on success or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::chown'; match='chown'; definition='chown($file, $owner, $recursive=false)'; description='Changes file owner 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 146'; params='@param string $file Path to the file.  
@param mixed $owner A user name or number.  
@param bool $recursive (optional) If set True changes file owner recursivly. Defaults to False.  '; return='bool Returns true on success or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::connect'; match='connect'; definition='connect()'; description='connect filesystem. 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 33'; return='bool Returns true on success or false on failure (always true for <code>WP_Filesystem_Direct</code> ). '; type='method';}, 
	{name='WP_Filesystem_Direct::copy'; match='copy'; definition='copy($source, $destination, $overwrite=false, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 196'; type='method';}, 
	{name='WP_Filesystem_Direct::cwd'; match='cwd'; definition='cwd()'; description='Gets the current working directory 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 75'; return='string|bool the current working directory on success, or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::delete'; match='delete'; definition='delete($file, $recursive=false, $type=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 222'; type='method';}, 
	{name='WP_Filesystem_Direct::dirlist'; match='dirlist'; definition='dirlist($path, $include_hidden=true, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 309'; type='method';}, 
	{name='WP_Filesystem_Direct::exists'; match='exists'; definition='exists($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 247'; type='method';}, 
	{name='WP_Filesystem_Direct::get_contents'; match='get_contents'; definition='get_contents($file)'; description='Reads entire file into a string 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 42'; params='@param string $file Name of the file to read.  '; return='string|bool The function returns the read data or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::get_contents_array'; match='get_contents_array'; definition='get_contents_array($file)'; description='Reads entire file into an array 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 51'; params='@param string $file Path to the file.  '; return='array|bool the file contents in an array or false on failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::getchmod'; match='getchmod'; definition='getchmod($file)'; description='Gets file permissions 
FIXME does not handle errors in fileperms() 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 183'; params='@param string $file Path to the file.  '; return='string Mode of the file (last 4 digits). '; type='method';}, 
	{name='WP_Filesystem_Direct::group'; match='group'; definition='group($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 186'; type='method';}, 
	{name='WP_Filesystem_Direct::is_dir'; match='is_dir'; definition='is_dir($path)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 255'; type='method';}, 
	{name='WP_Filesystem_Direct::is_file'; match='is_file'; definition='is_file($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 251'; type='method';}, 
	{name='WP_Filesystem_Direct::is_readable'; match='is_readable'; definition='is_readable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 259'; type='method';}, 
	{name='WP_Filesystem_Direct::is_writable'; match='is_writable'; definition='is_writable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 263'; type='method';}, 
	{name='WP_Filesystem_Direct::mkdir'; match='mkdir'; definition='mkdir($path, $chmod=false, $chown=false, $chgrp=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 286'; type='method';}, 
	{name='WP_Filesystem_Direct::move'; match='move'; definition='move($source, $destination, $overwrite=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 206'; type='method';}, 
	{name='WP_Filesystem_Direct::mtime'; match='mtime'; definition='mtime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 271'; type='method';}, 
	{name='WP_Filesystem_Direct::owner'; match='owner'; definition='owner($file)'; description='Gets file owner 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 166'; params='@param string $file Path to the file.  '; return='string Username of the user. '; type='method';}, 
	{name='WP_Filesystem_Direct::put_contents'; match='put_contents'; definition='put_contents($file, $contents, $mode=false)'; description='Write a string to a file 
'; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 62'; params='@param string $file Remote path to the file where to write the data.  
@param string $contents The data to write.  
@param int $mode (optional) The file permissions as octal number, usually 0644.  '; return='bool False upon failure. '; type='method';}, 
	{name='WP_Filesystem_Direct::rmdir'; match='rmdir'; definition='rmdir($path, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 305'; type='method';}, 
	{name='WP_Filesystem_Direct::size'; match='size'; definition='size($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 274'; type='method';}, 
	{name='WP_Filesystem_Direct::touch'; match='touch'; definition='touch($file, $time=0, $atime=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-direct.php, line: 278'; type='method';}, 
	{name='WP_Filesystem_FTPext::__construct'; match='__construct'; definition='__construct($opt=\'\')'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 22'; type='method';}, 
	{name='WP_Filesystem_FTPext::__destruct'; match='__destruct'; definition='__destruct()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 381'; type='method';}, 
	{name='WP_Filesystem_FTPext::atime'; match='atime'; definition='atime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 237'; type='method';}, 
	{name='WP_Filesystem_FTPext::chdir'; match='chdir'; definition='chdir($dir)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 143'; type='method';}, 
	{name='WP_Filesystem_FTPext::chgrp'; match='chgrp'; definition='chgrp($file, $group, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 146'; type='method';}, 
	{name='WP_Filesystem_FTPext::chmod'; match='chmod'; definition='chmod($file, $mode=false, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 149'; type='method';}, 
	{name='WP_Filesystem_FTPext::chown'; match='chown'; definition='chown($file, $owner, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 171'; type='method';}, 
	{name='WP_Filesystem_FTPext::connect'; match='connect'; definition='connect()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 67'; type='method';}, 
	{name='WP_Filesystem_FTPext::copy'; match='copy'; definition='copy($source, $destination, $overwrite=false, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 186'; type='method';}, 
	{name='WP_Filesystem_FTPext::cwd'; match='cwd'; definition='cwd()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 137'; type='method';}, 
	{name='WP_Filesystem_FTPext::delete'; match='delete'; definition='delete($file, $recursive=false, $type=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 198'; type='method';}, 
	{name='WP_Filesystem_FTPext::dirlist'; match='dirlist'; definition='dirlist($path=\'.\', $include_hidden=true, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 332'; type='method';}, 
	{name='WP_Filesystem_FTPext::exists'; match='exists'; definition='exists($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 213'; type='method';}, 
	{name='WP_Filesystem_FTPext::get_contents'; match='get_contents'; definition='get_contents($file, $type=\'\', $resumepos=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 91'; type='method';}, 
	{name='WP_Filesystem_FTPext::get_contents_array'; match='get_contents_array'; definition='get_contents_array($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 114'; type='method';}, 
	{name='WP_Filesystem_FTPext::getchmod'; match='getchmod'; definition='getchmod($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 178'; type='method';}, 
	{name='WP_Filesystem_FTPext::group'; match='group'; definition='group($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 182'; type='method';}, 
	{name='WP_Filesystem_FTPext::is_dir'; match='is_dir'; definition='is_dir($path)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 220'; type='method';}, 
	{name='WP_Filesystem_FTPext::is_file'; match='is_file'; definition='is_file($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 217'; type='method';}, 
	{name='WP_Filesystem_FTPext::is_readable'; match='is_readable'; definition='is_readable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 229'; type='method';}, 
	{name='WP_Filesystem_FTPext::is_writable'; match='is_writable'; definition='is_writable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 233'; type='method';}, 
	{name='WP_Filesystem_FTPext::mkdir'; match='mkdir'; definition='mkdir($path, $chmod=false, $chown=false, $chgrp=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 249'; type='method';}, 
	{name='WP_Filesystem_FTPext::move'; match='move'; definition='move($source, $destination, $overwrite=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 194'; type='method';}, 
	{name='WP_Filesystem_FTPext::mtime'; match='mtime'; definition='mtime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 240'; type='method';}, 
	{name='WP_Filesystem_FTPext::owner'; match='owner'; definition='owner($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 174'; type='method';}, 
	{name='WP_Filesystem_FTPext::parselisting'; match='parselisting'; definition='parselisting($line)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 263'; type='method';}, 
	{name='WP_Filesystem_FTPext::put_contents'; match='put_contents'; definition='put_contents($file, $contents, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 118'; type='method';}, 
	{name='WP_Filesystem_FTPext::rmdir'; match='rmdir'; definition='rmdir($path, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 259'; type='method';}, 
	{name='WP_Filesystem_FTPext::size'; match='size'; definition='size($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 243'; type='method';}, 
	{name='WP_Filesystem_FTPext::touch'; match='touch'; definition='touch($file, $time=0, $atime=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpext.php, line: 246'; type='method';}, 
	{name='WP_Filesystem_SSH2::__construct'; match='__construct'; definition='__construct($opt=\'\')'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 51'; type='method';}, 
	{name='WP_Filesystem_SSH2::atime'; match='atime'; definition='atime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 293'; type='method';}, 
	{name='WP_Filesystem_SSH2::chdir'; match='chdir'; definition='chdir($dir)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 179'; type='method';}, 
	{name='WP_Filesystem_SSH2::chgrp'; match='chgrp'; definition='chgrp($file, $group, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 183'; type='method';}, 
	{name='WP_Filesystem_SSH2::chmod'; match='chmod'; definition='chmod($file, $mode=false, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 191'; type='method';}, 
	{name='WP_Filesystem_SSH2::chown'; match='chown'; definition='chown($file, $owner, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 209'; type='method';}, 
	{name='WP_Filesystem_SSH2::connect'; match='connect'; definition='connect()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 103'; type='method';}, 
	{name='WP_Filesystem_SSH2::copy'; match='copy'; definition='copy($source, $destination, $overwrite=false, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 241'; type='method';}, 
	{name='WP_Filesystem_SSH2::cwd'; match='cwd'; definition='cwd()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 172'; type='method';}, 
	{name='WP_Filesystem_SSH2::delete'; match='delete'; definition='delete($file, $recursive=false, $type=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 254'; type='method';}, 
	{name='WP_Filesystem_SSH2::dirlist'; match='dirlist'; definition='dirlist($path, $include_hidden=true, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 329'; type='method';}, 
	{name='WP_Filesystem_SSH2::exists'; match='exists'; definition='exists($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 268'; type='method';}, 
	{name='WP_Filesystem_SSH2::get_contents'; match='get_contents'; definition='get_contents($file, $type=\'\', $resumepos=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 153'; type='method';}, 
	{name='WP_Filesystem_SSH2::get_contents_array'; match='get_contents_array'; definition='get_contents_array($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 158'; type='method';}, 
	{name='WP_Filesystem_SSH2::getchmod'; match='getchmod'; definition='getchmod($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 227'; type='method';}, 
	{name='WP_Filesystem_SSH2::group'; match='group'; definition='group($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 231'; type='method';}, 
	{name='WP_Filesystem_SSH2::is_dir'; match='is_dir'; definition='is_dir($path)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 278'; type='method';}, 
	{name='WP_Filesystem_SSH2::is_file'; match='is_file'; definition='is_file($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 273'; type='method';}, 
	{name='WP_Filesystem_SSH2::is_readable'; match='is_readable'; definition='is_readable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 283'; type='method';}, 
	{name='WP_Filesystem_SSH2::is_writable'; match='is_writable'; definition='is_writable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 288'; type='method';}, 
	{name='WP_Filesystem_SSH2::mkdir'; match='mkdir'; definition='mkdir($path, $chmod=false, $chown=false, $chgrp=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 312'; type='method';}, 
	{name='WP_Filesystem_SSH2::move'; match='move'; definition='move($source, $destination, $overwrite=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 250'; type='method';}, 
	{name='WP_Filesystem_SSH2::mtime'; match='mtime'; definition='mtime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 298'; type='method';}, 
	{name='WP_Filesystem_SSH2::owner'; match='owner'; definition='owner($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 217'; type='method';}, 
	{name='WP_Filesystem_SSH2::put_contents'; match='put_contents'; definition='put_contents($file, $contents, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 163'; type='method';}, 
	{name='WP_Filesystem_SSH2::rmdir'; match='rmdir'; definition='rmdir($path, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 325'; type='method';}, 
	{name='WP_Filesystem_SSH2::run_command'; match='run_command'; definition='run_command($command, $returnbool=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 132'; type='method';}, 
	{name='WP_Filesystem_SSH2::size'; match='size'; definition='size($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 303'; type='method';}, 
	{name='WP_Filesystem_SSH2::touch'; match='touch'; definition='touch($file, $time=0, $atime=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ssh2.php, line: 308'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::__construct'; match='__construct'; definition='__construct($opt=\'\')'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 22'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::__destruct'; match='__destruct'; definition='__destruct()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 322'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::atime'; match='atime'; definition='atime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 253'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::chdir'; match='chdir'; definition='chdir($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 148'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::chgrp'; match='chgrp'; definition='chgrp($file, $group, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 152'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::chmod'; match='chmod'; definition='chmod($file, $mode=false, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 156'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::chown'; match='chown'; definition='chown($file, $owner, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 177'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::connect'; match='connect'; definition='connect()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 57'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::copy'; match='copy'; definition='copy($source, $destination, $overwrite=false, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 196'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::cwd'; match='cwd'; definition='cwd()'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 141'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::delete'; match='delete'; definition='delete($file, $recursive=false, $type=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 211'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::dirlist'; match='dirlist'; definition='dirlist($path=\'.\', $include_hidden=true, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 286'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::exists'; match='exists'; definition='exists($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 222'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::get_contents'; match='get_contents'; definition='get_contents($file, $type=\'\', $resumepos=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 84'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::get_contents_array'; match='get_contents_array'; definition='get_contents_array($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 114'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::getchmod'; match='getchmod'; definition='getchmod($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 186'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::group'; match='group'; definition='group($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 191'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::is_dir'; match='is_dir'; definition='is_dir($path)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 234'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::is_file'; match='is_file'; definition='is_file($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 226'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::is_readable'; match='is_readable'; definition='is_readable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 243'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::is_writable'; match='is_writable'; definition='is_writable($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 248'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::mkdir'; match='mkdir'; definition='mkdir($path, $chmod=false, $chown=false, $chgrp=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 269'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::move'; match='move'; definition='move($source, $destination, $overwrite=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 207'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::mtime'; match='mtime'; definition='mtime($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 257'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::owner'; match='owner'; definition='owner($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 181'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::put_contents'; match='put_contents'; definition='put_contents($file, $contents, $mode=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 118'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::rmdir'; match='rmdir'; definition='rmdir($path, $recursive=false)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 282'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::size'; match='size'; definition='size($file)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 261'; type='method';}, 
	{name='WP_Filesystem_ftpsockets::touch'; match='touch'; definition='touch($file, $time=0, $atime=0)'; description=''; file='/wp-admin/includes/class-wp-filesystem-ftpsockets.php, line: 265'; type='method';}, 
	{name='WP_HTTP_IXR_Client::__construct'; match='__construct'; definition='__construct($server, $path=false, $port=false, $timeout=15)'; description=''; file='/wp-includes/class-wp-http-ixr-client.php, line: 11'; type='method';}, 
	{name='WP_HTTP_IXR_Client::query'; match='query'; definition='query()'; description=''; file='/wp-includes/class-wp-http-ixr-client.php, line: 33'; type='method';}, 
	{name='WP_HTTP_Proxy::authentication'; match='authentication'; definition='authentication()'; description='Retrieve authentication string for proxy authentication. 
'; file='/wp-includes/class-http.php, line: 1307'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_HTTP_Proxy::authentication_header'; match='authentication_header'; definition='authentication_header()'; description='Retrieve header string for proxy authentication. 
'; file='/wp-includes/class-http.php, line: 1318'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_HTTP_Proxy::host'; match='host'; definition='host()'; description='Retrieve the host for the proxy server. 
'; file='/wp-includes/class-http.php, line: 1251'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_HTTP_Proxy::is_enabled'; match='is_enabled'; definition='is_enabled()'; description='Whether proxy connection should be used. 
'; file='/wp-includes/class-http.php, line: 1227'; return='bool '; since='2.8 WP_PROXY_HOST WP_PROXY_PORT '; type='method';}, 
	{name='WP_HTTP_Proxy::password'; match='password'; definition='password()'; description='Retrieve the password for proxy authentication. 
'; file='/wp-includes/class-http.php, line: 1293'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_HTTP_Proxy::port'; match='port'; definition='port()'; description='Retrieve the port for the proxy server. 
'; file='/wp-includes/class-http.php, line: 1265'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_HTTP_Proxy::send_through_proxy'; match='send_through_proxy'; definition='send_through_proxy($uri)'; description='Whether URL should be sent through the proxy server. 
We want to keep localhost and the blog URL from being sent through the proxy server, because some proxies can not handle this. We also have the constant available for defining other hosts that won&apos;t be sent through the proxy. 
'; file='/wp-includes/class-http.php, line: 1335'; params='@param string $uri URI to check.  '; return='bool True, to send through the proxy and false if, the proxy should not be used. '; since='2.8.0 '; uses='WP_PROXY_BYPASS_HOSTS '; type='method';}, 
	{name='WP_HTTP_Proxy::use_authentication'; match='use_authentication'; definition='use_authentication()'; description='Whether authentication should be used. 
'; file='/wp-includes/class-http.php, line: 1240'; return='bool '; since='2.8 WP_PROXY_USERNAME WP_PROXY_PASSWORD '; type='method';}, 
	{name='WP_HTTP_Proxy::username'; match='username'; definition='username()'; description='Retrieve the username for proxy authentication. 
'; file='/wp-includes/class-http.php, line: 1279'; return='string '; since='2.8 '; type='method';}, 
	{name='WP_Http::_dispatch_request'; match='_dispatch_request'; definition='_dispatch_request($url, $args)'; description='Dispatches a HTTP request to a supporting transport. 
Tests each transport in order to find a transport which matches the request arguements. Also caches the transport instance to be used later. 
The order for blocking requests is cURL, Streams, and finally Fsockopen. The order for non-blocking requests is cURL, Streams and Fsockopen(). 
There are currently issues with &quot;localhost&quot; not resolving correctly with DNS. This may cause an error \"failed to open stream: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because [the] connected host has failed to respond.\" 

'; file='/wp-includes/class-http.php, line: 243'; params='@param string $url URL to Request  
@param array $args Request arguments  '; return='array|object Array containing &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos;, &apos;filename&apos;. A <code>WP_Error</code> instance upon error '; since='3.2.0 '; type='method';}, 
	{name='WP_Http::_get_first_available_transport'; match='_get_first_available_transport'; definition='_get_first_available_transport($args, $url=null)'; description='Tests which transports are capable of supporting the request. 

'; file='/wp-includes/class-http.php, line: 205'; params='@param array $args Request arguments  
@param string $url URL to Request '; return='string|false Class name for the first transport that claims to support the request. False if no transport claims to support the request. '; since='3.2.0 '; type='method';}, 
	{name='WP_Http::block_request'; match='block_request'; definition='block_request($uri)'; description='Block requests through the proxy. 
Those who are behind a proxy and want to prevent access to certain hosts may do so. This will prevent plugins from working and core functionality, if you don&apos;t include api.wordpress.org. 
You block external URL requests by defining WP_HTTP_BLOCK_EXTERNAL as true in your wp-config.php file and this will only allow localhost and your blog to make requests. The constant WP_ACCESSIBLE_HOSTS will allow additional hosts to go through for requests. The format of the WP_ACCESSIBLE_HOSTS constant is a comma separated list of hostnames to allow, wildcard domains are supported, eg &lowast;.wordpress.org will allow for all subdomains of wordpress.org to be contacted. 
'; file='/wp-includes/class-http.php, line: 491'; since='2.8.0 <code>Allow preventing external requests. </code> '; type='method';}, 
	{name='WP_Http::get'; match='get'; definition='get($url, $args=array())'; description='Uses the GET HTTP method. 
Used for sending data that is expected to be in the body. 
'; file='/wp-includes/class-http.php, line: 294'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array|object Array containing &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos;, &apos;filename&apos;. A <code>WP_Error</code> instance upon error '; since='2.7.0 '; type='method';}, 
	{name='WP_Http::head'; match='head'; definition='head($url, $args=array())'; description='Uses the HEAD HTTP method. 
Used for sending data that is expected to be in the body. 
'; file='/wp-includes/class-http.php, line: 312'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array|object Array containing &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos;, &apos;filename&apos;. A <code>WP_Error</code> instance upon error '; since='2.7.0 '; type='method';}, 
	{name='WP_Http::post'; match='post'; definition='post($url, $args=array())'; description='Uses the POST HTTP method. 
Used for sending data that is expected to be in the body. 
'; file='/wp-includes/class-http.php, line: 276'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array|object Array containing &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos;, &apos;filename&apos;. A <code>WP_Error</code> instance upon error '; since='2.7.0 '; type='method';}, 
	{name='WP_Http::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI. 
The body and headers are part of the arguments. The &apos;body&apos; argument is for the body and will accept either a string or an array. The &apos;headers&apos; argument should be an array, but a string is acceptable. If the &apos;body&apos; argument is an array, then it will automatically be escaped using http_build_query(). 
The only URI that are supported in the HTTP Transport implementation are the HTTP and HTTPS protocols. HTTP and HTTPS are assumed so the server might not know how to handle the send headers. Other protocols are unsupported and most likely will fail. 
The defaults are &apos;method&apos;, &apos;timeout&apos;, &apos;redirection&apos;, &apos;httpversion&apos;, &apos;blocking&apos; and &apos;user-agent&apos;. 
Accepted &apos;method&apos; values are &apos;GET&apos;, &apos;POST&apos;, and &apos;HEAD&apos;, some transports technically allow others, but should not be assumed. The &apos;timeout&apos; is used to sent how long the connection should stay open before failing when no response. &apos;redirection&apos; is used to track how many redirects were taken and used to sent the amount for other transports, but not all transports accept setting that value. 
The &apos;httpversion&apos; option is used to sent the HTTP version and accepted values are &apos;1.0&apos;, and &apos;1.1&apos; and should be a string. Version 1.1 is not supported, because of chunk response. The &apos;user-agent&apos; option is the user-agent and is used to replace the default user-agent, which is &apos;WordPress/WP_Version&apos;, where WP_Version is the value from $wp_version. 
&apos;blocking&apos; is the default, which is used to tell the transport, whether it should halt PHP while it performs the request or continue regardless. Actually, that isn&apos;t entirely correct. Blocking mode really just means whether the fread should just pull what it can whenever it gets bytes or if it should wait until it has enough in the buffer to read or finishes reading the entire content. It doesn&apos;t actually always mean that PHP will continue going after making the request. 

'; file='/wp-includes/class-http.php, line: 81'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array|object Array containing &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos;, &apos;filename&apos;. A <code>WP_Error</code> instance upon error '; since='2.7.0 '; type='method';}, 
	{name='WP_Http_Cookie::__construct'; match='__construct'; definition='__construct($data)'; description='Sets up this cookie object. 
The parameter $data should be either an associative array containing the indices names below or a header string detailing it. 
If it&apos;s an array, it should include the following elements: Name Value - should NOT be urlencoded already. Expires - (optional) String or int (UNIX timestamp). Path (optional) Domain (optional) 
'; file='/wp-includes/class-http.php, line: 1446'; params='@param string array $data Raw cookie data.  '; since='2.8.0 '; type='method';}, 
	{name='WP_Http_Cookie::getFullHeader'; match='getFullHeader'; definition='getFullHeader()'; description='Retrieve cookie header for usage in the rest of the WordPress HTTP API. 
'; file='/wp-includes/class-http.php, line: 1554'; return='string '; since='2.8.0 '; type='method';}, 
	{name='WP_Http_Cookie::getHeaderValue'; match='getHeaderValue'; definition='getHeaderValue()'; description='Convert cookie name and value back to header string. 
'; file='/wp-includes/class-http.php, line: 1539'; return='string Header encoded cookie name and value. '; since='2.8.0 '; type='method';}, 
	{name='WP_Http_Cookie::test'; match='test'; definition='test($url)'; description='Confirms that it&apos;s OK to send this cookie to the URL checked against. 
Decision is based on RFC 2109/2965, so look there for details on validity. 
'; file='/wp-includes/class-http.php, line: 1498'; params='@param string $url URL you intend to send this cookie to  '; return='boolean TRUE if allowed, FALSE otherwise. '; since='2.8.0 '; type='method';}, 
	{name='WP_Http_Curl::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI using cURL extension. 
'; file='/wp-includes/class-http.php, line: 987'; params='@param string $url  
@param str array $args Optional. Override the defaults.  '; return='array &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos; and &apos;filename&apos; keys. '; since='2.7.0 '; type='method';}, 
	{name='WP_Http_Curl::stream_headers'; match='stream_headers'; definition='stream_headers($handle, $headers)'; description='Grab the headers of the cURL request 
Each header is sent individually to this callback, so we append to the $header property for temporary storage 
'; file='/wp-includes/class-http.php, line: 1155'; return='int '; since='3.2.0 '; type='method';}, 
	{name='WP_Http_Encoding::accept_encoding'; match='accept_encoding'; definition='accept_encoding()'; description='What encoding types to accept and their priority values. 
'; file='/wp-includes/class-http.php, line: 1667'; return='string Types of encoding to accept. '; since='2.8 '; type='method';}, 
	{name='WP_Http_Encoding::compatible_gzinflate'; match='compatible_gzinflate'; definition='compatible_gzinflate($gzData)'; description='Decompression of deflated string while staying compatible with the majority of servers. 
Certain Servers will return deflated data with headers which PHP&apos;s gziniflate() function cannot handle out of the box. The following function lifted from http://au2.php.net/manual/en/function.gzinflate.php#77336 will attempt to deflate the various return forms used. 
'; file='/wp-includes/class-http.php, line: 1638'; since='2.8.1 <code>string $gzData String to decompress. string|bool False on failure. </code> '; type='method';}, 
	{name='WP_Http_Encoding::compress'; match='compress'; definition='compress($raw, $level=9, $supports=null)'; description='Compress raw string using the deflate format. 
Supports the RFC 1951 standard. 
'; file='/wp-includes/class-http.php, line: 1582'; params='@param string $raw String to compress.  
@param int $level Optional, default is 9. Compression level, 9 is highest.  
@param string $supports Optional, not used. When implemented it will choose the right compression based on what the server supports.  '; return='string|bool False on failure. '; since='2.8 '; type='method';}, 
	{name='WP_Http_Encoding::content_encoding'; match='content_encoding'; definition='content_encoding()'; description='What enconding the content used when it was compressed to send in the headers. 
'; file='/wp-includes/class-http.php, line: 1688'; return='string Content-Encoding string to send in the header. '; since='2.8 '; type='method';}, 
	{name='WP_Http_Encoding::decompress'; match='decompress'; definition='decompress($compressed, $length=null)'; description='Decompression of deflated string. 
Will attempt to decompress using the RFC 1950 standard, and if that fails then the RFC 1951 standard deflate will be attempted. Finally, the RFC 1952 standard gzip decode will be attempted. If all fail, then the original compressed string will be returned. 
'; file='/wp-includes/class-http.php, line: 1600'; params='@param string $compressed String to decompress.  
@param int $length The optional length of the compressed data.  '; return='string|bool False on failure. '; since='2.8 '; type='method';}, 
	{name='WP_Http_Encoding::is_available'; match='is_available'; definition='is_available()'; description='Whether decompression and compression are supported by the PHP version. 
Each function is tested instead of checking for the zlib extension, to ensure that the functions all exist in the PHP version and aren&apos;t disabled. 
'; file='/wp-includes/class-http.php, line: 1722'; return='bool '; since='2.8 '; type='method';}, 
	{name='WP_Http_Encoding::should_decode'; match='should_decode'; definition='should_decode($headers)'; description='Whether the content be decoded based on the headers. 
'; file='/wp-includes/class-http.php, line: 1700'; params='@param array string $headers All of the available headers.  '; return='bool '; since='2.8 '; type='method';}, 
	{name='WP_Http_ExtHttp::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI using HTTP extension. 
Does not support non-blocking. 
'; file='/Users/shawn/Sites/wordpress-3.1/wp-includes/class-http.php, line: 1154'; params='@param string $url  
@param str array $args Optional. Override the defaults.  '; return='array &apos;headers&apos;, &apos;body&apos;, &apos;cookies&apos; and &apos;response&apos; keys. '; since='2.7 '; type='method';}, 
	{name='WP_Http_Fopen::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI using fopen(). 
This transport does not support sending of headers and body, therefore should not be used in the instances, where there is a body and headers. 
Notes: Does not support non-blocking mode. Ignores &apos;redirection&apos; option. 
@see WP_Http::retrieve For default options descriptions. '; file='/Users/shawn/Sites/wordpress-3.1/wp-includes/class-http.php, line: 838'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array &apos;headers&apos;, &apos;body&apos;, &apos;cookies&apos; and &apos;response&apos; keys. '; since='2.7.0 '; type='method';}, 
	{name='WP_Http_Fsockopen::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI using fsockopen(). 
Does not support non-blocking mode. 
@see <code>WP_Http::request</code> For default options descriptions. '; file='/wp-includes/class-http.php, line: 566'; params='@param string $url URI resource.  
@param str array $args Optional. Override the defaults.  '; return='array &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos; and &apos;filename&apos; keys. '; since='2.7 '; type='method';}, 
	{name='WP_Http_Streams::request'; match='request'; definition='request($url, $args=array())'; description='Send a HTTP request to a URI using streams with fopen(). 
'; file='/wp-includes/class-http.php, line: 797'; params='@param string $url  
@param str array $args Optional. Override the defaults.  '; return='array &apos;headers&apos;, &apos;body&apos;, &apos;response&apos;, &apos;cookies&apos; and &apos;filename&apos; keys. '; since='2.7.0 '; type='method';}, 
	{name='WP_Importer::__construct'; match='__construct'; definition='__construct()'; description='Class Constructor 
'; file='/wp-admin/includes/class-wp-importer.php, line: 11'; return='void '; type='method';}, 
	{name='WP_Importer::bump_request_timeout'; match='bump_request_timeout'; definition='bump_request_timeout($val)'; description='Bump up the request timeout for http requests 
'; file='/wp-admin/includes/class-wp-importer.php, line: 205'; params='@param int $val  '; return='int '; type='method';}, 
	{name='WP_Importer::cmpr_strlen'; match='cmpr_strlen'; definition='cmpr_strlen($a, $b)'; description='Sort by strlen, longest string first 
'; file='/wp-admin/includes/class-wp-importer.php, line: 170'; params='@param string $a  
@param string $b  '; return='int '; type='method';}, 
	{name='WP_Importer::count_imported_posts'; match='count_imported_posts'; definition='count_imported_posts($importer_name, $bid)'; description='Return count of imported permalinks from WordPress database 
'; file='/wp-admin/includes/class-wp-importer.php, line: 56'; params='@param string $bid  '; return='int '; type='method';}, 
	{name='WP_Importer::get_imported_comments'; match='get_imported_comments'; definition='get_imported_comments($bid)'; description='Set array with imported comments from WordPress database 
'; file='/wp-admin/includes/class-wp-importer.php, line: 82'; params='@param string $bid  '; return='array '; type='method';}, 
	{name='WP_Importer::get_imported_posts'; match='get_imported_posts'; definition='get_imported_posts($importer_name, $bid)'; description='Returns array with imported permalinks from WordPress database 
'; file='/wp-admin/includes/class-wp-importer.php, line: 19'; params='@param string $bid  '; return='array '; type='method';}, 
	{name='WP_Importer::get_page'; match='get_page'; definition='get_page($url, $username=\'\', $password=\'\', $head=false)'; description='GET URL 
'; file='/wp-admin/includes/class-wp-importer.php, line: 183'; params='@param string $url  
@param string $username  
@param string $password  
@param bool $head  '; return='array '; type='method';}, 
	{name='WP_Importer::is_user_over_quota'; match='is_user_over_quota'; definition='is_user_over_quota()'; description='Check if user has exceeded disk quota 
'; file='/wp-admin/includes/class-wp-importer.php, line: 214'; return='bool '; type='method';}, 
	{name='WP_Importer::min_whitespace'; match='min_whitespace'; definition='min_whitespace($string)'; description='Replace newlines, tabs, and multiple spaces with a single space 
'; file='/wp-admin/includes/class-wp-importer.php, line: 233'; params='@param string $string  '; return='string '; type='method';}, 
	{name='WP_Importer::set_blog'; match='set_blog'; definition='set_blog($blog_id)'; description=''; file='/wp-admin/includes/class-wp-importer.php, line: 118'; type='method';}, 
	{name='WP_Importer::set_user'; match='set_user'; definition='set_user($user_id)'; description=''; file='/wp-admin/includes/class-wp-importer.php, line: 148'; type='method';}, 
	{name='WP_Importer::stop_the_insanity'; match='stop_the_insanity'; definition='stop_the_insanity()'; description='Reset global variables that grow out of control during imports 
'; file='/wp-admin/includes/class-wp-importer.php, line: 242'; return='void '; type='method';}, 
	{name='WP_Links_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-links-list-table.php, line: 12'; type='method';}, 
	{name='WP_Links_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 18'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Links_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 98'; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 52'; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 45'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 77'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 89'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 41'; since='3.1.0 '; type='method';}, 
	{name='WP_Links_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-links-list-table.php, line: 22'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::__construct'; match='__construct'; definition='__construct($args=array())'; description='Constructor. The child class should call this constructor from it&apos;s own constructor 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 80'; params='@param array $args An associative array with information about the current table  '; type='method';}, 
	{name='WP_List_Table::_js_vars'; match='_js_vars'; definition='_js_vars()'; description='Send required variables to JavaScript land 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 899'; type='method';}, 
	{name='WP_List_Table::ajax_response'; match='ajax_response'; definition='ajax_response()'; description='Handle an incoming ajax request (called from admin-ajax.php) 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 867'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 110'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_List_Table::bulk_actions'; match='bulk_actions'; definition='bulk_actions()'; description='Display the bulk actions dropdown. 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 273'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::comments_bubble'; match='comments_bubble'; definition='comments_bubble($post_id, $pending_comments)'; description='Display a comment count bubble 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 428'; params='@param int $post_id  
@param int $pending_comments  '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 312'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::display'; match='display'; definition='display()'; description='Display the table 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 706'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 801'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::display_rows_or_placeholder'; match='display_rows_or_placeholder'; definition='display_rows_or_placeholder()'; description='Generate the &lt;tbody&gt; part of the table 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 784'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::display_tablenav'; match='display_tablenav'; definition='display_tablenav($which)'; description='Generate the table navigation above or below the table 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 751'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 776'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 263'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_column_count'; match='get_column_count'; definition='get_column_count()'; description='Return number of visible columns 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 629'; return='int '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_column_info'; match='get_column_info'; definition='get_column_info()'; description='Get a list of all, hidden and sortable columns, with filter applied 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 593'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 564'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_items_per_page'; match='get_items_per_page'; definition='get_items_per_page($option, $default=20)'; description='Get number of items to display on a single page 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 465'; return='int '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_pagenum'; match='get_pagenum'; definition='get_pagenum()'; description='Get the current page number 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 448'; return='int '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_pagination_arg'; match='get_pagination_arg'; definition='get_pagination_arg($key)'; description='Access the pagination args 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 160'; params='@param string $key  '; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 581'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 741'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 227'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::has_items'; match='has_items'; definition='has_items()'; description='Whether the table has items to display or not 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 176'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::months_dropdown'; match='months_dropdown'; definition='months_dropdown($post_type)'; description='Display a monthly dropdown for filtering items 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 356'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 186'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::pagination'; match='pagination'; definition='pagination($which)'; description='Display the pagination. 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 479'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 122'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::print_column_headers'; match='print_column_headers'; definition='print_column_headers($with_id=true)'; description='Print column headers, accounting for hidden and sortable columns. 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 643'; params='@param bool $with_id Whether to set the id attribute or not  '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::row_actions'; match='row_actions'; definition='row_actions($actions, $always_visible=false)'; description='Generate row actions div 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 332'; params='@param array $actions The list of actions  
@param bool $always_visible Wether the actions should be always visible  '; return='string '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::search_box'; match='search_box'; definition='search_box($text, $input_id)'; description='Display the search box. 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 199'; params='@param string $text The search button text  
@param string $input_id The search input id  '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::set_pagination_args'; match='set_pagination_args'; definition='set_pagination_args($args)'; description='An internal method that sets all the necessary pagination arguments 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 132'; params='@param array $args An associative array with information about the pagination  '; type='method';}, 
	{name='WP_List_Table::single_row'; match='single_row'; definition='single_row($item)'; description='Generates content for a single row of the table 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 814'; params='@param object $item The current item  '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::single_row_columns'; match='single_row_columns'; definition='single_row_columns($item)'; description='Generates the columns for a single row of the table 

'; file='/wp-admin/includes/class-wp-list-table.php, line: 831'; params='@param object $item The current item  '; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::view_switcher'; match='view_switcher'; definition='view_switcher($current_mode)'; description='Display a view switcher 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 400'; since='3.1.0 '; type='method';}, 
	{name='WP_List_Table::views'; match='views'; definition='views()'; description='Display the bulk actions dropdown. 
'; file='/wp-admin/includes/class-wp-list-table.php, line: 237'; since='3.1.0 '; type='method';}, 
	{name='WP_Locale::__construct'; match='__construct'; definition='__construct()'; description='Constructor which calls helper methods to set up object variables 
'; file='/wp-includes/locale.php, line: 325'; return='<code>WP_Locale</code> '; since='2.1.0 '; uses=' 
 '; type='method';}, 
	{name='WP_Locale::get_meridiem'; match='get_meridiem'; definition='get_meridiem($meridiem)'; description='Retrieve translated version of meridiem string. 
The $meridiem parameter is expected to not be translated. 

'; file='/wp-includes/locale.php, line: 296'; params='@param string $meridiem Either \'am\', \'pm\', \'AM\', or \'PM\'. Not translated version.  '; return='string Translated version '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::get_month'; match='get_month'; definition='get_month($month_number)'; description='Retrieve the full translated month by month number. 
The $month_number parameter has to be a string because it must have the &apos;0&apos; in front of any number that is less than 10. Starts from &apos;01&apos; and ends at &apos;12&apos;. 
You can use an integer instead and it will add the &apos;0&apos; before the numbers less than 10 for you. 

'; file='/wp-includes/locale.php, line: 265'; params='@param string int $month_number \'01\' through \'12\'  '; return='string Translated full month name '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::get_month_abbrev'; match='get_month_abbrev'; definition='get_month_abbrev($month_name)'; description='Retrieve translated version of month abbreviation string. 
The $month_name parameter is expected to be the translated or translatable version of the month. 

'; file='/wp-includes/locale.php, line: 281'; params='@param string $month_name Translated month to get abbreviated version  '; return='string Translated abbreviated month '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::get_weekday'; match='get_weekday'; definition='get_weekday($weekday_number)'; description='Retrieve the full translated weekday word. 
Week starts on translated Sunday and can be fetched by using 0 (zero). So the week starts with 0 (zero) and ends on Saturday with is fetched by using 6 (six). 

'; file='/wp-includes/locale.php, line: 210'; params='@param int $weekday_number 0 for Sunday through 6 Saturday  '; return='string Full translated weekday '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::get_weekday_abbrev'; match='get_weekday_abbrev'; definition='get_weekday_abbrev($weekday_name)'; description='Retrieve the translated weekday abbreviation. 
The weekday abbreviation is retrieved by the translated full weekday word. 

'; file='/wp-includes/locale.php, line: 244'; params='@param string $weekday_name Full translated weekday word  '; return='string Translated weekday abbreviation '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::get_weekday_initial'; match='get_weekday_initial'; definition='get_weekday_initial($weekday_name)'; description='Retrieve the translated weekday initial. 
The weekday initial is retrieved by the translated full weekday word. When translating the weekday initial pay attention to make sure that the starting letter does not conflict. 

'; file='/wp-includes/locale.php, line: 228'; params='@param string $weekday_name  '; return='string '; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::init'; match='init'; definition='init()'; description='Sets up the translated strings and object properties. 
The method creates the translatable strings for various calendar elements. Which allows for specifying locale specific calendar names and text direction. 
'; file='/wp-includes/locale.php, line: 106'; since='2.1.0 '; type='method';}, 
	{name='WP_Locale::is_rtl'; match='is_rtl'; definition='is_rtl()'; description='Checks if current locale is RTL. 
'; file='/wp-includes/locale.php, line: 335'; return='bool Whether locale is RTL. '; since='3.0.0 '; type='method';}, 
	{name='WP_Locale::register_globals'; match='register_globals'; definition='register_globals()'; description='Global variables are deprecated. For backwards compatibility only. 

'; file='/wp-includes/locale.php, line: 308'; since='2.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 12'; type='method';}, 
	{name='WP_MS_Sites_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 18'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_MS_Sites_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 168'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 123'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 142'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 160'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 119'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::pagination'; match='pagination'; definition='pagination($which)'; description='Display the pagination. 
'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 133'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Sites_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-ms-sites-list-table.php, line: 22'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 15'; type='method';}, 
	{name='WP_MS_Themes_List_Table::_order_callback'; match='_order_callback'; definition='_order_callback($theme_a, $theme_b)'; description=''; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 151'; type='method';}, 
	{name='WP_MS_Themes_List_Table::_search_callback'; match='_search_callback'; definition='_search_callback($theme)'; description=''; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 138'; type='method';}, 
	{name='WP_MS_Themes_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 44'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_MS_Themes_List_Table::bulk_actions'; match='bulk_actions'; definition='bulk_actions($which)'; description=''; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 248'; type='method';}, 
	{name='WP_MS_Themes_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 253'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 257'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 231'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 175'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 185'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 40'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 191'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 166'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 57'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Themes_List_Table::single_row'; match='single_row'; definition='single_row($key, $theme)'; description=''; file='/wp-admin/includes/class-wp-ms-themes-list-table.php, line: 262'; type='method';}, 
	{name='WP_MS_Users_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 12'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_MS_Users_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 134'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 71'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 111'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 125'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 85'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 81'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::pagination'; match='pagination'; definition='pagination($which)'; description='Display the pagination. 
'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 102'; since='3.1.0 '; type='method';}, 
	{name='WP_MS_Users_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-ms-users-list-table.php, line: 16'; since='3.1.0 '; type='method';}, 
	{name='WP_MatchesMapRegex::WP_MatchesMapRegex'; match='WP_MatchesMapRegex'; definition='WP_MatchesMapRegex($subject, $matches)'; description='constructor 
'; file='/wp-includes/class-wp.php, line: 553'; params='@param string $subject subject if regex  
@param array $matches data to use in map  '; return='self '; type='method';}, 
	{name='WP_MatchesMapRegex::_map'; match='_map'; definition='_map()'; description='do the actual mapping 
'; file='/wp-includes/class-wp.php, line: 580'; return='string '; type='method';}, 
	{name='WP_MatchesMapRegex::apply'; match='apply'; definition='apply($subject, $matches)'; description='Substitute substring matches in subject. 
static helper function to ease use 
'; file='/wp-includes/class-wp.php, line: 569'; params='@param string $subject subject  
@param array $matches data used for subsitution  '; return='string '; type='method';}, 
	{name='WP_MatchesMapRegex::callback'; match='callback'; definition='callback($matches)'; description='preg_replace_callback hook 
'; file='/wp-includes/class-wp.php, line: 592'; params='@param array $matches preg_replace regexp matches  '; return='string '; type='method';}, 
	{name='WP_Media_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-media-list-table.php, line: 12'; type='method';}, 
	{name='WP_Media_List_Table::_get_row_actions'; match='_get_row_actions'; definition='_get_row_actions($post, $att_title)'; description=''; file='/wp-admin/includes/class-wp-media-list-table.php, line: 332'; type='method';}, 
	{name='WP_Media_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 20'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Media_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 108'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 159'; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 86'; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 77'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 129'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 149'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 43'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::has_items'; match='has_items'; definition='has_items()'; description='Whether the table has items to display or not 

'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 121'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 125'; since='3.1.0 '; type='method';}, 
	{name='WP_Media_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-media-list-table.php, line: 24'; since='3.1.0 '; type='method';}, 
	{name='WP_Meta_Query::__construct'; match='__construct'; definition='__construct($meta_query=false)'; description='Constructor 
'; file='/wp-includes/meta.php, line: 413'; params='@param array (optional) $meta_query A meta query  '; type='method';}, 
	{name='WP_Meta_Query::get_sql'; match='get_sql'; definition='get_sql($type, $primary_table, $primary_id_column, $context=null)'; description='Generates SQL clauses to be appended to a main query. 

'; file='/wp-includes/meta.php, line: 473'; params='@param string $type Type of meta  
@param string $primary_table  
@param string $primary_id_column  
@param object $context (optional) The main query object  '; return='array( &apos;join&apos; =&gt; $join_sql, &apos;where&apos; =&gt; $where_sql ) '; since='3.2.0 '; type='method';}, 
	{name='WP_Meta_Query::parse_query_vars'; match='parse_query_vars'; definition='parse_query_vars($qv)'; description='Constructs a meta query based on &apos;meta_&lowast;&apos; query vars 

'; file='/wp-includes/meta.php, line: 441'; params='@param array $qv The query variables  '; since='3.2.0 '; type='method';}, 
	{name='WP_Nav_Menu_Widget::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 1055'; type='method';}, 
	{name='WP_Nav_Menu_Widget::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 1085'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Nav_Menu_Widget::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 1079'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Nav_Menu_Widget::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 1060'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Object_Cache::__construct'; match='__construct'; definition='__construct()'; description='Sets up object properties; PHP 5 style constructor 
'; file='/wp-includes/cache.php, line: 465'; return='null|WP_Object_Cache If cache is disabled, returns null. '; since='2.0.8 '; type='method';}, 
	{name='WP_Object_Cache::__destruct'; match='__destruct'; definition='__destruct()'; description='Will save the object cache before object is completely destroyed. 
Called upon object destruction, which should be when PHP ends. 
'; file='/wp-includes/cache.php, line: 482'; return='bool True value. Won&apos;t be used by PHP '; since='2.0.8 '; type='method';}, 
	{name='WP_Object_Cache::add'; match='add'; definition='add($id, $data, $group=\'default\', $expire=\'\')'; description='Adds data to the cache if it doesn&apos;t already exist. 

'; file='/wp-includes/cache.php, line: 259'; params='@param int string $id What to call the contents in the cache  
@param mixed $data The contents to store in the cache  
@param string $group Where to group the cache contents  
@param int $expire When to expire the cache contents  '; return='bool False if cache ID and group already exists, true on success '; since='2.0.0 '; uses=' Checks to see if the cache already has data. 
 Sets the data after the checking the cache contents existance.'; type='method';}, 
	{name='WP_Object_Cache::add_global_groups'; match='add_global_groups'; definition='add_global_groups($groups)'; description='Sets the list of global groups. 
'; file='/wp-includes/cache.php, line: 276'; params='@param array $groups List of groups that are global.  '; since='3.0.0 '; type='method';}, 
	{name='WP_Object_Cache::delete'; match='delete'; definition='delete($id, $group=\'default\', $force=false)'; description='Remove the contents of the cache ID in the group 
If the cache ID does not exist in the group and $force parameter is set to false, then nothing will happen. The $force parameter is set to false by default. 
On success the group and the id will be added to the $non_existent_objects property in the class. 
'; file='/wp-includes/cache.php, line: 301'; params='@param int string $id What the contents in the cache are called  
@param string $group Where the cache contents are grouped  
@param bool $force Optional. Whether to force the unsetting of the cache ID in the group  '; return='bool False if the contents weren&apos;t deleted and true on success '; since='2.0.0 '; type='method';}, 
	{name='WP_Object_Cache::flush'; match='flush'; definition='flush()'; description='Clears the object cache of all data 
'; file='/wp-includes/cache.php, line: 320'; return='bool Always returns true '; since='2.0.0 '; type='method';}, 
	{name='WP_Object_Cache::get'; match='get'; definition='get($id, $group=\'default\')'; description='Retrieves the cache contents, if it exists 
The contents will be first attempted to be retrieved by searching by the ID in the cache group. If the cache is hit (success) then the contents are returned. 
On failure, the $non_existent_objects property is checked and if the cache group and ID exist in there the cache misses will not be incremented. If not in the nonexistent objects property, then the cache misses will be incremented and the cache group and ID will be added to the nonexistent objects. 
'; file='/wp-includes/cache.php, line: 346'; params='@param int string $id What the contents in the cache are called  
@param string $group Where the cache contents are grouped  '; return='bool|mixed False on failure to retrieve contents or the cache contents on success '; since='2.0.0 '; type='method';}, 
	{name='WP_Object_Cache::replace'; match='replace'; definition='replace($id, $data, $group=\'default\', $expire=\'\')'; description='Replace the contents in the cache, if contents already exist 
@see <code>WP_Object_Cache::set()</code> '; file='/wp-includes/cache.php, line: 378'; params='@param int string $id What to call the contents in the cache  
@param mixed $data The contents to store in the cache  
@param string $group Where to group the cache contents  
@param int $expire When to expire the cache contents  '; return='bool False if not exists, true if contents were replaced '; since='2.0.0 '; type='method';}, 
	{name='WP_Object_Cache::reset'; match='reset'; definition='reset()'; description='Reset keys 
'; file='/wp-includes/cache.php, line: 393'; since='3.0.0 '; type='method';}, 
	{name='WP_Object_Cache::set'; match='set'; definition='set($id, $data, $group=\'default\', $expire=\'\')'; description='Sets the data contents into the cache 
The cache contents is grouped by the $group parameter followed by the $id. This allows for duplicate ids in unique groups. Therefore, naming of the group should be used with care and should follow normal function naming guidelines outside of core WordPress usage. 
The $expire parameter is not used, because the cache will automatically expire for each time a page is accessed and PHP finishes. The method is more for cache plugins which use files. 
'; file='/wp-includes/cache.php, line: 421'; params='@param int string $id What to call the contents in the cache  
@param mixed $data The contents to store in the cache  
@param string $group Where to group the cache contents  
@param int $expire Not Used  '; return='bool Always returns true '; since='2.0.0 '; type='method';}, 
	{name='WP_Object_Cache::stats'; match='stats'; definition='stats()'; description='Echoes the stats of the caching. 
Gives the cache hits, and cache misses. Also prints every cached group, key and the data. 
'; file='/wp-includes/cache.php, line: 447'; since='2.0.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 12'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Plugin_Install_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 148'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::display_tablenav'; match='display_tablenav'; definition='display_tablenav($which)'; description='Generate the table navigation above or below the table 
'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 113'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 139'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 133'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 100'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 96'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugin_Install_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-plugin-install-list-table.php, line: 16'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 12'; type='method';}, 
	{name='WP_Plugins_List_Table::_order_callback'; match='_order_callback'; definition='_order_callback($plugin_a, $plugin_b)'; description=''; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 164'; type='method';}, 
	{name='WP_Plugins_List_Table::_search_callback'; match='_search_callback'; definition='_search_callback($plugin)'; description=''; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 152'; type='method';}, 
	{name='WP_Plugins_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 39'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Plugins_List_Table::bulk_actions'; match='bulk_actions'; definition='bulk_actions($which)'; description=''; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 274'; type='method';}, 
	{name='WP_Plugins_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 301'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 308'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 283'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 249'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 188'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 198'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 35'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 202'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 179'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 50'; since='3.1.0 '; type='method';}, 
	{name='WP_Plugins_List_Table::single_row'; match='single_row'; definition='single_row($plugin_file, $plugin_data)'; description=''; file='/wp-admin/includes/class-wp-plugins-list-table.php, line: 320'; type='method';}, 
	{name='WP_Post_Comments_List_Table::display'; match='display'; definition='display($output_empty=false)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 541'; type='method';}, 
	{name='WP_Post_Comments_List_Table::get_column_info'; match='get_column_info'; definition='get_column_info()'; description='Get a list of all, hidden and sortable columns, with filter applied 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 522'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Post_Comments_List_Table::get_per_page'; match='get_per_page'; definition='get_per_page($comment_status=false)'; description=''; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 554'; type='method';}, 
	{name='WP_Post_Comments_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-comments-list-table.php, line: 535'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 48'; type='method';}, 
	{name='WP_Posts_List_Table::_display_rows'; match='_display_rows'; definition='_display_rows($posts)'; description=''; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 322'; type='method';}, 
	{name='WP_Posts_List_Table::_display_rows_hierarchical'; match='_display_rows_hierarchical'; definition='_display_rows_hierarchical($pages, $pagenum=1, $per_page=20)'; description=''; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 337'; type='method';}, 
	{name='WP_Posts_List_Table::_page_rows'; match='_page_rows'; definition='_page_rows($children_pages, $count, $parent, $level, $pagenum, $per_page)'; description='Given a top level page ID, display the nested hierarchy of sub-pages together with paging support 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 423'; params='@param unknown_type $children_pages  
@param unknown_type $count  
@param unknown_type $parent  
@param unknown_type $level  
@param unknown_type $pagenum  
@param unknown_type $per_page  '; since='3.1.0 (Standalone function exists since 2.6.0) '; type='method';}, 
	{name='WP_Posts_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 82'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Posts_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 236'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::display_rows'; match='display_rows'; definition='display_rows($posts=array())'; description=''; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 307'; type='method';}, 
	{name='WP_Posts_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 204'; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 188'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 258'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 297'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::get_table_classes'; match='get_table_classes'; definition='get_table_classes()'; description='Get a list of CSS classes for the 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 252'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 129'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::has_items'; match='has_items'; definition='has_items()'; description='Whether the table has items to display or not 

'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 116'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::inline_edit'; match='inline_edit'; definition='inline_edit()'; description='Outputs the hidden row displayed when inline editing 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 692'; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 120'; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::pagination'; match='pagination'; definition='pagination($which)'; description='Display the pagination. 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 243'; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 88'; since='3.1.0 '; type='method';}, 
	{name='WP_Posts_List_Table::single_row'; match='single_row'; definition='single_row($a_post, $level=0)'; description=''; file='/wp-admin/includes/class-wp-posts-list-table.php, line: 465'; type='method';}, 
	{name='WP_Query::__construct'; match='__construct'; definition='__construct($query=\'\')'; description='Constructor. 
Sets up the WordPress query, if parameter is not empty. 

'; file='/wp-includes/query.php, line: 2989'; params='@param string $query URL query string.  '; return='<code>WP_Query</code> '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::fill_query_vars'; match='fill_query_vars'; definition='fill_query_vars($array)'; description='Fills in the query variables, which do not exist within the parameter. 

'; file='/wp-includes/query.php, line: 1354'; params='@param array $array Defined query variables.  '; return='array Complete query variables with undefined ones filled in empty. '; since='2.1.0 '; type='method';}, 
	{name='WP_Query::get'; match='get'; definition='get($query_var)'; description='Retrieve query variable. 

'; file='/wp-includes/query.php, line: 1874'; params='@param string $query_var Query variable key.  '; return='mixed '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::get_posts'; match='get_posts'; definition='get_posts()'; description='Retrieve the posts based on query variables. 
There are a few filters and actions that can be used to modify the post database query. 

'; file='/wp-includes/query.php, line: 1906'; return='array List of posts. '; since='1.5.0 '; uses='do_action_ref_array() Calls \'pre_get_posts\' hook before retrieving posts.'; type='method';}, 
	{name='WP_Query::get_queried_object'; match='get_queried_object'; definition='get_queried_object()'; description='Retrieve queried object. 
If queried object is not set, then the queried object will be set from the category, tag, taxonomy, posts page, single post, page, or author query variable. After it is set up, it will be returned. 

'; file='/wp-includes/query.php, line: 2919'; return='object '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::get_queried_object_id'; match='get_queried_object_id'; definition='get_queried_object_id()'; description='Retrieve ID of the current queried object. 

'; file='/wp-includes/query.php, line: 2968'; return='int '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::have_comments'; match='have_comments'; definition='have_comments()'; description='Whether there are more comments available. 
Automatically rewinds comments when finished. 

'; file='/wp-includes/query.php, line: 2869'; return='bool True, if more comments. False, if no more posts. '; since='2.2.0 '; type='method';}, 
	{name='WP_Query::have_posts'; match='have_posts'; definition='have_posts()'; description='Whether there are more posts available in the loop. 
Calls action &apos;loop_end&apos;, when the loop is complete. 

'; file='/wp-includes/query.php, line: 2800'; return='bool True if posts are available, false if end of loop. '; since='1.5.0 '; uses='do_action_ref_array() Calls \'loop_end\' if loop is ended'; type='method';}, 
	{name='WP_Query::init'; match='init'; definition='init()'; description='Initiates object properties and sets default values. 
'; file='/wp-includes/query.php, line: 1313'; since='1.5.0 '; type='method';}, 
	{name='WP_Query::init_query_flags'; match='init_query_flags'; definition='init_query_flags()'; description='Resets query flags to false. 
The query flags are what page info WordPress was able to figure out. 
'; file='/wp-includes/query.php, line: 1277'; since='2.0.0 '; type='method';}, 
	{name='WP_Query::is_404'; match='is_404'; definition='is_404()'; description='Is the query a 404 (returns no results)? 
'; file='/wp-includes/query.php, line: 3467'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_archive'; match='is_archive'; definition='is_archive()'; description='Is the query for an archive page? 
Month, Year, Category, Author, Post Type archive... 
'; file='/wp-includes/query.php, line: 3004'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_attachment'; match='is_attachment'; definition='is_attachment()'; description='Is the query for an attachment page? 
'; file='/wp-includes/query.php, line: 3032'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_author'; match='is_author'; definition='is_author($author=\'\')'; description='Is the query for an author archive page? 
If the $author parameter is specified, this function will additionally check if the query is for one of the authors specified. 
'; file='/wp-includes/query.php, line: 3047'; params='@param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_category'; match='is_category'; definition='is_category($category=\'\')'; description='Is the query for a category archive page? 
If the $category parameter is specified, this function will additionally check if the query is for one of the categories specified. 
'; file='/wp-includes/query.php, line: 3079'; params='@param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_comment_feed'; match='is_comment_feed'; definition='is_comment_feed()'; description='Is the query for a comments feed? 
'; file='/wp-includes/query.php, line: 3225'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_comments_popup'; match='is_comments_popup'; definition='is_comments_popup()'; description='Whether the current URL is within the comments popup window. 
'; file='/wp-includes/query.php, line: 3174'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_date'; match='is_date'; definition='is_date()'; description='Is the query for a date archive? 
'; file='/wp-includes/query.php, line: 3185'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_day'; match='is_day'; definition='is_day()'; description='Is the query for a day archive? 
'; file='/wp-includes/query.php, line: 3197'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_feed'; match='is_feed'; definition='is_feed($feeds=\'\')'; description='Is the query for a feed? 
'; file='/wp-includes/query.php, line: 3209'; params='@param string array $feeds Optional feed types to check.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_front_page'; match='is_front_page'; definition='is_front_page()'; description='Is the query for the front page of the site? 
This is for what is displayed at your site&apos;s main URL. 
Depends on the site&apos;s &quot;Front page displays&quot; Reading Settings &apos;show_on_front&apos; and &apos;page_on_front&apos;. 
If you set a static page for the front page of your site, this function will return true when viewing that page. 
Otherwise the same as @see <code>WP_Query::is_home()</code> 
'; file='/wp-includes/query.php, line: 3247'; return='bool True, if front of site. '; since='3.1.0 '; uses=' 
get_option()'; type='method';}, 
	{name='WP_Query::is_home'; match='is_home'; definition='is_home()'; description='Is the query for the blog homepage? 
This is the page which shows the time based blog content of your site. 
Depends on the site&apos;s &quot;Front page displays&quot; Reading Settings &apos;show_on_front&apos; and &apos;page_for_posts&apos;. 
If you set a static page for the front page of your site, this function will return true only on the page you set as the &quot;Posts page&quot;. 
@see <code>WP_Query::is_front_page()</code> '; file='/wp-includes/query.php, line: 3273'; return='bool True if blog view homepage. '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_month'; match='is_month'; definition='is_month()'; description='Is the query for a month archive? 
'; file='/wp-includes/query.php, line: 3284'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_page'; match='is_page'; definition='is_page($page=\'\')'; description='Is the query for a single page? 
If the $page parameter is specified, this function will additionally check if the query is for one of the pages specified. 
@see <code>WP_Query::is_single()</code> <code>WP_Query::is_singular()</code> '; file='/wp-includes/query.php, line: 3302'; params='@param mixed $page Page ID, title, slug, or array of such.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_paged'; match='is_paged'; definition='is_paged()'; description='Is the query for paged result and not for the first page? 
'; file='/wp-includes/query.php, line: 3330'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_post_type_archive'; match='is_post_type_archive'; definition='is_post_type_archive($post_types=\'\')'; description='Is the query for a post type archive page? 
'; file='/wp-includes/query.php, line: 3016'; params='@param mixed $post_types Optional. Post type or array of posts types to check against.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_preview'; match='is_preview'; definition='is_preview()'; description='Is the query for a post or page preview? 
'; file='/wp-includes/query.php, line: 3341'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_robots'; match='is_robots'; definition='is_robots()'; description='Is the query for the robots file? 
'; file='/wp-includes/query.php, line: 3352'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_search'; match='is_search'; definition='is_search()'; description='Is the query for a search? 
'; file='/wp-includes/query.php, line: 3363'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_single'; match='is_single'; definition='is_single($post=\'\')'; description='Is the query for a single post? 
Works for any post type, except attachments and pages 
If the $post parameter is specified, this function will additionally check if the query is for one of the Posts specified. 
@see <code>WP_Query::is_page()</code> <code>WP_Query::is_singular()</code> '; file='/wp-includes/query.php, line: 3383'; params='@param mixed $post Post ID, title, slug, or array of such.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_singular'; match='is_singular'; definition='is_singular($post_types=\'\')'; description='Is the query for a single post of any post type (post, attachment, page, ... )? 
If the $post_types parameter is specified, this function will additionally check if the query is for one of the Posts Types specified. 
@see <code>WP_Query::is_page()</code> <code>WP_Query::is_single()</code> '; file='/wp-includes/query.php, line: 3418'; params='@param mixed $post_types Optional. Post Type or array of Post Types  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_tag'; match='is_tag'; definition='is_tag($slug=\'\')'; description='Is the query for a tag archive page? 
If the $tag parameter is specified, this function will additionally check if the query is for one of the tags specified. 
'; file='/wp-includes/query.php, line: 3111'; params='@param mixed $slug Optional. Tag slug or array of slugs.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_tax'; match='is_tax'; definition='is_tax($taxonomy=\'\', $term=\'\')'; description='Is the query for a taxonomy archive page? 
If the $taxonomy parameter is specified, this function will additionally check if the query is for that specific $taxonomy. 
If the $term parameter is specified in addition to the $taxonomy parameter, this function will additionally check if the query is for one of the terms specified. 
'; file='/wp-includes/query.php, line: 3144'; params='@param mixed $taxonomy Optional. Taxonomy slug or slugs.  
@param mixed $term mixed . Optional. Term ID, name, slug or array of Term IDs, names, and slugs.  '; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_time'; match='is_time'; definition='is_time()'; description='Is the query for a specific time? 
'; file='/wp-includes/query.php, line: 3434'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_trackback'; match='is_trackback'; definition='is_trackback()'; description='Is the query for a trackback endpoint call? 
'; file='/wp-includes/query.php, line: 3445'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::is_year'; match='is_year'; definition='is_year()'; description='Is the query for a specific year? 
'; file='/wp-includes/query.php, line: 3456'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Query::next_comment'; match='next_comment'; definition='next_comment()'; description='Iterate current comment index and return comment object. 

'; file='/wp-includes/query.php, line: 2834'; return='object Comment object. '; since='2.2.0 '; type='method';}, 
	{name='WP_Query::next_post'; match='next_post'; definition='next_post()'; description='Set up the next post and iterate current post index. 

'; file='/wp-includes/query.php, line: 2759'; return='object Next post. '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::parse_query'; match='parse_query'; definition='parse_query($query=\'\')'; description='Parse a query string and set query type booleans. 

'; file='/wp-includes/query.php, line: 1415'; params='@param string array $query Optional query.  '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::parse_query_vars'; match='parse_query_vars'; definition='parse_query_vars()'; description='Reparse the query vars. 
'; file='/wp-includes/query.php, line: 1341'; since='1.5.0 '; type='method';}, 
	{name='WP_Query::parse_tax_query'; match='parse_tax_query'; definition='parse_tax_query($q)'; description=''; file='/wp-includes/query.php, line: 1674'; type='method';}, 
	{name='WP_Query::query'; match='query'; definition='query($query)'; description='Sets up the WordPress query by parsing query string. 

'; file='/wp-includes/query.php, line: 2901'; params='@param string $query URL query string.  '; return='array List of posts. '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::rewind_comments'; match='rewind_comments'; definition='rewind_comments()'; description='Rewind the comments, resets the comment index and comment to first. 
'; file='/wp-includes/query.php, line: 2885'; since='2.2.0 '; type='method';}, 
	{name='WP_Query::rewind_posts'; match='rewind_posts'; definition='rewind_posts()'; description='Rewind the posts and reset post index. 
'; file='/wp-includes/query.php, line: 2819'; since='1.5.0 '; type='method';}, 
	{name='WP_Query::set'; match='set'; definition='set($query_var, $value)'; description='Set query variable. 

'; file='/wp-includes/query.php, line: 1890'; params='@param string $query_var Query variable key.  
@param mixed $value Query variable value.  '; since='1.5.0 '; type='method';}, 
	{name='WP_Query::set_404'; match='set_404'; definition='set_404()'; description='Sets the 404 property and saves whether query is feed. 
'; file='/wp-includes/query.php, line: 1856'; since='2.0.0 '; type='method';}, 
	{name='WP_Query::the_comment'; match='the_comment'; definition='the_comment()'; description='Sets up the current comment. 
'; file='/wp-includes/query.php, line: 2849'; since='2.2.0 '; uses='do_action() Calls \'comment_loop_start\' hook when first comment is processed. '; type='method';}, 
	{name='WP_Query::the_post'; match='the_post'; definition='the_post()'; description='Sets up the current post. 
Retrieves the next post, sets up the post, sets the &apos;in the loop&apos; property to true. 
'; file='/wp-includes/query.php, line: 2778'; since='1.5.0 '; uses='$post 
do_action_ref_array() Calls \'loop_start\' if loop has just started '; type='method';}, 
	{name='WP_Rewrite::__construct'; match='__construct'; definition='__construct()'; description='Constructor - Calls <code>init()</code> , which runs setup. 

'; file='/wp-includes/rewrite.php, line: 1986'; return='<code>WP_Rewrite</code> '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::add_endpoint'; match='add_endpoint'; definition='add_endpoint($name, $places)'; description='Add an endpoint, like /trackback/. 
To be inserted after certain URL types (specified in $places). 

'; file='/wp-includes/rewrite.php, line: 1838'; params='@param string $name Name of endpoint.  
@param array $places URL types that endpoint can be used.  '; since='2.1.0 '; type='method';}, 
	{name='WP_Rewrite::add_external_rule'; match='add_external_rule'; definition='add_external_rule($regex, $redirect)'; description='Add a rule that doesn&apos;t redirect to index.php. 
Can redirect to any place. 

'; file='/wp-includes/rewrite.php, line: 1823'; params='@param string $regex Regular expression to match against request.  
@param string $redirect URL regex redirects to when regex matches request.  '; since='2.1.0 '; type='method';}, 
	{name='WP_Rewrite::add_permastruct'; match='add_permastruct'; definition='add_permastruct($name, $struct, $with_front=true, $ep_mask=EP_NONE)'; description='Add permalink structure. 
These are added along with the extra rewrite rules that are merged to the top. 

'; file='/wp-includes/rewrite.php, line: 1857'; params='@param string $name Name for permalink structure.  
@param string $struct Permalink structure.  
@param bool $with_front Prepend front base to permalink structure.  '; since='2.5.0 '; type='method';}, 
	{name='WP_Rewrite::add_rewrite_tag'; match='add_rewrite_tag'; definition='add_rewrite_tag($tag, $pattern, $query)'; description='Append or update tag, pattern, and query for replacement. 
If the tag already exists, replace the existing pattern and query for that tag, otherwise add the new tag, pattern, and query to the end of the arrays. '; file='/wp-includes/rewrite.php, line: 1168'; type='method';}, 
	{name='WP_Rewrite::add_rule'; match='add_rule'; definition='add_rule($regex, $redirect, $after=\'bottom\')'; description='Add a straight rewrite rule. 
Any value in the $after parameter that isn&apos;t &apos;bottom&apos; will be placed at the top of the rules. 

'; file='/wp-includes/rewrite.php, line: 1797'; params='@param string $regex Regular expression to match against request.  
@param string $redirect URL regex redirects to when regex matches request.  
@param string $after Optional, default is bottom. Location to place rule.  '; since='2.1.0 '; type='method';}, 
	{name='WP_Rewrite::flush_rules'; match='flush_rules'; definition='flush_rules($hard=true)'; description='Remove rewrite rules and then recreate rewrite rules. 
Calls <code>WP_Rewrite::wp_rewrite_rules()</code> after removing the &apos;rewrite_rules&apos; option. If the function named &apos;save_mod_rewrite_rules&apos; exists, it will be called. 
'; file='/wp-includes/rewrite.php, line: 1876'; params='@param bool $hard Whether to update .htaccess (hard flush) or just update rewrite_rules option (soft flush). Default is true (hard).  '; since='2.0.1 '; type='method';}, 
	{name='WP_Rewrite::generate_rewrite_rule'; match='generate_rewrite_rule'; definition='generate_rewrite_rule($permalink_structure, $walk_dirs=false)'; description='Generate Rewrite rules with permalink structure and walking directory only. 
Shorten version of <code>WP_Rewrite::generate_rewrite_rules()</code> that allows for shorter list of parameters. See the method for longer description of what generating rewrite rules does. 

'; file='/wp-includes/rewrite.php, line: 1469'; params='@param string $permalink_structure The permalink structure to generate rules.  
@param bool $walk_dirs Optional, default is false. Whether to create list of directories to walk over.  '; return='array '; since='1.5.0 '; uses=' See for long description and rest of parameters. '; type='method';}, 
	{name='WP_Rewrite::generate_rewrite_rules'; match='generate_rewrite_rules'; definition='generate_rewrite_rules($permalink_structure, $ep_mask=EP_NONE, $paged=true, $feed=true, $forcomments=false, $walk_dirs=true, $endpoints=true)'; description='Generate the rules from permalink structure. 
The main <code>WP_Rewrite</code> function for building the rewrite rule list. The contents of the function is a mix of black magic and regular expressions, so best just ignore the contents and move to the parameters. 

'; file='/wp-includes/rewrite.php, line: 1199'; params='@param string $permalink_structure The permalink structure.  
@param int $ep_mask Optional, default is EP_NONE. Endpoint constant, see EP_&lowast; constants.  
@param bool $paged Optional, default is true. Whether permalink request is paged.  
@param bool $feed Optional, default is true. Whether for feed.  
@param bool $forcomments Optional, default is false. Whether for comments.  
@param bool $walk_dirs Optional, default is true. Whether to create list of directories to walk over.  
@param bool $endpoints Optional, default is true. Whether endpoints are enabled.  '; return='array Rewrite rule list. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_author_permastruct'; match='get_author_permastruct'; definition='get_author_permastruct()'; description='Retrieve the author permalink structure. 
The permalink structure is front property, author base, and finally &apos;/author%&apos;. Will set the author_structure property and then return it without attempting to set the value again. 

'; file='/wp-includes/rewrite.php, line: 1033'; return='string|bool False if not found. Permalink structure string. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_category_permastruct'; match='get_category_permastruct'; definition='get_category_permastruct()'; description='Retrieve the permalink structure for categories. 
If the category_base property has no value, then the category structure will have the front property value, followed by &apos;category&apos;, and finally &apos;category%&apos;. If it does, then the root property will be used, along with the category_base property value. 

'; file='/wp-includes/rewrite.php, line: 981'; return='bool|string False on failure. Category permalink structure. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_comment_feed_permastruct'; match='get_comment_feed_permastruct'; definition='get_comment_feed_permastruct()'; description='Retrieve the comment feed permalink structure. 
The permalink structure is root property, comment base property, feed base and finally &apos;/feed%&apos;. Will set the comment_feed_structure property and then return it without attempting to set the value again. 

'; file='/wp-includes/rewrite.php, line: 1137'; return='string|bool False if not found. Permalink structure string. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_date_permastruct'; match='get_date_permastruct'; definition='get_date_permastruct()'; description='Retrieve date permalink structure, with year, month, and day. 
The permalink structure for the date, if not set already depends on the permalink structure. It can be one of three formats. The first is year, month, day; the second is day, month, year; and the last format is month, day, year. These are matched against the permalink structure for which one is used. If none matches, then the default will be used, which is year, month, day. 
Prevents post ID and date permalinks from overlapping. In the case of post_id, the date permalink will be prepended with front permalink with &apos;date/&apos; before the actual permalink to form the complete date permalink structure. 

'; file='/wp-includes/rewrite.php, line: 862'; return='bool|string False on no permalink structure. Date permalink structure. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_day_permastruct'; match='get_day_permastruct'; definition='get_day_permastruct()'; description='Retrieve the day permalink structure with month and year. 
Keeps date permalink structure with all year, month, and day. 

'; file='/wp-includes/rewrite.php, line: 964'; return='bool|string False on failure. Year/Month/Day structure on success. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_extra_permastruct'; match='get_extra_permastruct'; definition='get_extra_permastruct($name)'; description='Retrieve extra permalink structure by name. 

'; file='/wp-includes/rewrite.php, line: 1011'; params='@param string $name Permalink structure name.  '; return='string|bool False if not found. Permalink structure string. '; since='2.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_feed_permastruct'; match='get_feed_permastruct'; definition='get_feed_permastruct()'; description='Retrieve the feed permalink structure. 
The permalink structure is root property, feed base, and finally &apos;/feed%&apos;. Will set the feed_structure property and then return it without attempting to set the value again. 

'; file='/wp-includes/rewrite.php, line: 1111'; return='string|bool False if not found. Permalink structure string. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_month_permastruct'; match='get_month_permastruct'; definition='get_month_permastruct()'; description='Retrieve the month permalink structure without day and with year. 
Gets the date permalink structure and strips out the day permalink structures. Keeps the year permalink structure. 

'; file='/wp-includes/rewrite.php, line: 941'; return='bool|string False on failure. Year/Month structure on success. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_page_permastruct'; match='get_page_permastruct'; definition='get_page_permastruct()'; description='Retrieve the page permalink structure. 
The permalink structure is root property, and &apos;pagename%&apos;. Will set the page_structure property and then return it without attempting to set the value again. 

'; file='/wp-includes/rewrite.php, line: 1085'; return='string|bool False if not found. Permalink structure string. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_search_permastruct'; match='get_search_permastruct'; definition='get_search_permastruct()'; description='Retrieve the search permalink structure. 
The permalink structure is root property, search base, and finally &apos;/search%&apos;. Will set the search_structure property and then return it without attempting to set the value again. 

'; file='/wp-includes/rewrite.php, line: 1059'; return='string|bool False if not found. Permalink structure string. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::get_tag_permastruct'; match='get_tag_permastruct'; definition='get_tag_permastruct()'; description='Retrieve the permalink structure for tags. 
If the tag_base property has no value, then the tag structure will have the front property value, followed by &apos;tag&apos;, and finally &apos;tag%&apos;. If it does, then the root property will be used, along with the tag_base property value. 

'; file='/wp-includes/rewrite.php, line: 998'; return='bool|string False on failure. Tag permalink structure. '; since='2.3.0 '; type='method';}, 
	{name='WP_Rewrite::get_year_permastruct'; match='get_year_permastruct'; definition='get_year_permastruct()'; description='Retrieve the year permalink structure without month and day. 
Gets the date permalink structure and strips out the month and day permalink structures. 

'; file='/wp-includes/rewrite.php, line: 916'; return='bool|string False on failure. Year structure on success. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::iis7_url_rewrite_rules'; match='iis7_url_rewrite_rules'; definition='iis7_url_rewrite_rules($add_parent_tags=false)'; description='Retrieve IIS7 URL Rewrite formatted rewrite rules to write to web.config file. 
Does not actually write to the web.config file, but creates the rules for the process that will. 

'; file='/wp-includes/rewrite.php, line: 1691'; return='string '; since='2.8.0 '; type='method';}, 
	{name='WP_Rewrite::init'; match='init'; definition='init()'; description='Sets up the object&apos;s properties. 
The &apos;use_verbose_page_rules&apos; object property will be set to true if the permalink structure begins with one of the following: &apos;postname%&apos;, &apos;category%&apos;, &apos;tag%&apos;, or &apos;author%&apos;. 
'; file='/wp-includes/rewrite.php, line: 1895'; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::mod_rewrite_rules'; match='mod_rewrite_rules'; definition='mod_rewrite_rules()'; description='Retrieve mod_rewrite formatted rewrite rules to write to .htaccess. 
Does not actually write to the .htaccess file, but creates the rules for the process that will. 
Will add the non_wp_rules property rules to the .htaccess file before the WordPress rewrite rules one. 

'; file='/wp-includes/rewrite.php, line: 1610'; return='string '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::page_rewrite_rules'; match='page_rewrite_rules'; definition='page_rewrite_rules()'; description='Retrieve all of the rewrite rules for pages. 
If the &apos;use_verbose_page_rules&apos; property is false, then there will only be a single rewrite rule for pages for those matching &apos;pagename%&apos;. With the property set to true, the attachments and the pages will be added for each individual attachment URI and page URI, respectively. 

'; file='/wp-includes/rewrite.php, line: 812'; return='array '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::page_uri_index'; match='page_uri_index'; definition='page_uri_index()'; description='Retrieve all page and attachments for pages URIs. 
The attachments are for those that have pages as parents and will be retrieved. 

'; file='/wp-includes/rewrite.php, line: 766'; return='array Array of page URIs as first element and attachment URIs as second element. '; since='2.5.0 '; type='method';}, 
	{name='WP_Rewrite::preg_index'; match='preg_index'; definition='preg_index($number)'; description='Index for matches for usage in preg_&lowast;() functions. 
The format of the string is, with empty matches property value, &apos;$NUM&apos;. The &apos;NUM&apos; will be replaced with the value in the $number parameter. With the matches property not empty, the value of the returned string will contain that value of the matches property. The format then will be &apos;$MATCHES[NUM]&apos;, with MATCHES as the value in the property and NUM the value of the $number parameter. 

'; file='/wp-includes/rewrite.php, line: 743'; params='@param int $number Index number.  '; return='string '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::rewrite_rules'; match='rewrite_rules'; definition='rewrite_rules()'; description='Construct rewrite matches and queries from permalink structure. 
Runs the action &apos;generate_rewrite_rules&apos; with the parameter that is an reference to the current <code>WP_Rewrite</code> instance to further manipulate the permalink structures and rewrite rules. Runs the &apos;rewrite_rules_array&apos; filter on the full rewrite rule array. 
There are two ways to manipulate the rewrite rules, one by hooking into the &apos;generate_rewrite_rules&apos; action and gaining full control of the object or just manipulating the rewrite rule array before it is passed from the function. 

'; file='/wp-includes/rewrite.php, line: 1491'; return='array An associate array of matches and queries. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::set_category_base'; match='set_category_base'; definition='set_category_base($category_base)'; description='Set the category base for the category permalink. 
Will update the &apos;category_base&apos; option, if there is a difference between the current category base and the parameter value. Calls <code>WP_Rewrite::init()</code> after the option is updated. 

'; file='/wp-includes/rewrite.php, line: 1952'; params='@param string $category_base Category permalink structure base.  '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::set_permalink_structure'; match='set_permalink_structure'; definition='set_permalink_structure($permalink_structure)'; description='Set the main permalink structure for the blog. 
Will update the &apos;permalink_structure&apos; option, if there is a difference between the current permalink structure and the parameter value. Calls <code>WP_Rewrite::init()</code> after the option is updated. 
Fires the &apos;permalink_structure_changed&apos; action once the init call has processed passing the old and new values 

'; file='/wp-includes/rewrite.php, line: 1932'; params='@param string $permalink_structure Permalink structure.  '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::set_tag_base'; match='set_tag_base'; definition='set_tag_base($tag_base)'; description='Set the tag base for the tag permalink. 
Will update the &apos;tag_base&apos; option, if there is a difference between the current tag base and the parameter value. Calls <code>WP_Rewrite::init()</code> after the option is updated. 

'; file='/wp-includes/rewrite.php, line: 1971'; params='@param string $tag_base Tag permalink structure base.  '; since='2.3.0 '; type='method';}, 
	{name='WP_Rewrite::using_index_permalinks'; match='using_index_permalinks'; definition='using_index_permalinks()'; description='Whether permalinks are being used and rewrite module is not enabled. 
Means that permalink links are enabled and index.php is in the URL. 

'; file='/wp-includes/rewrite.php, line: 699'; return='bool '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::using_mod_rewrite_permalinks'; match='using_mod_rewrite_permalinks'; definition='using_mod_rewrite_permalinks()'; description='Whether permalinks are being used and rewrite module is enabled. 
Using permalinks and index.php is not in the URL. 

'; file='/wp-includes/rewrite.php, line: 720'; return='bool '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::using_permalinks'; match='using_permalinks'; definition='using_permalinks()'; description='Whether permalinks are being used. 
This can be either rewrite module or permalink in the HTTP query string. 

'; file='/wp-includes/rewrite.php, line: 685'; return='bool True, if permalinks are enabled. '; since='1.5.0 '; type='method';}, 
	{name='WP_Rewrite::wp_rewrite_rules'; match='wp_rewrite_rules'; definition='wp_rewrite_rules()'; description='Retrieve the rewrite rules. 
The difference between this method and <code>WP_Rewrite::rewrite_rules()</code> is that this method stores the rewrite rules in the &apos;rewrite_rules&apos; option and retrieves it. This prevents having to process all of the permalinks to get the rewrite rules in the form of caching. 

'; file='/wp-includes/rewrite.php, line: 1585'; return='array Rewrite rules. '; since='1.5.0 '; type='method';}, 
	{name='WP_Role::__construct'; match='__construct'; definition='__construct($role, $capabilities)'; description='Constructor - Set up object properties. 
The list of capabilities, must have the key as the name of the capability and the value a boolean of whether it is granted to the role. 

'; file='/wp-includes/capabilities.php, line: 280'; params='@param string $role Role name.  
@param array $capabilities List of capabilities.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Role::add_cap'; match='add_cap'; definition='add_cap($cap, $grant=true)'; description='Assign role a capability. 
@see <code>WP_Roles::add_cap()</code> Method uses implementation for role. 
'; file='/wp-includes/capabilities.php, line: 295'; params='@param string $cap Capability name.  
@param bool $grant Whether role has capability privilege.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Role::has_cap'; match='has_cap'; definition='has_cap($cap)'; description='Whether role has capability. 
The capabilities is passed through the &apos;role_has_cap&apos; filter. The first parameter for the hook is the list of capabilities the class has assigned. The second parameter is the capability name to look for. The third and final parameter for the hook is the role name. 

'; file='/wp-includes/capabilities.php, line: 342'; params='@param string $cap Capability name.  '; return='bool True, if user has capability. False, if doesn&apos;t have capability. '; since='2.0.0 '; type='method';}, 
	{name='WP_Role::remove_cap'; match='remove_cap'; definition='remove_cap($cap)'; description='Remove capability from role. 
This is a container for <code>WP_Roles::remove_cap()</code> to remove the capability from the role. That is to say, that <code>WP_Roles::remove_cap()</code> implements the functionality, but it also makes sense to use this class, because you don&apos;t need to enter the role name. 

'; file='/wp-includes/capabilities.php, line: 318'; params='@param string $cap Capability name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::__construct'; match='__construct'; definition='__construct()'; description='Constructor 
'; file='/wp-includes/capabilities.php, line: 80'; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::_init'; match='_init'; definition='_init()'; description='Set up the object properties. 
The role key is set to the current prefix for the $wpdb object with &apos;user_roles&apos; appended. If the $wp_user_roles global is set, then it will be used and the role option will not be updated or used. 
'; file='/wp-includes/capabilities.php, line: 96'; since='2.1.0 '; uses='$wpdb Used to get the database prefix. '; type='method';}, 
	{name='WP_Roles::add_cap'; match='add_cap'; definition='add_cap($role, $cap, $grant=true)'; description='Add capability to role. 

'; file='/wp-includes/capabilities.php, line: 178'; params='@param string $role Role name.  
@param string $cap Capability name.  
@param bool $grant Optional, default is true. Whether role is capable of performing capability.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::add_role'; match='add_role'; definition='add_role($role, $display_name, $capabilities=array())'; description='Add role name with capabilities to list. 
Updates the list of roles, if the role doesn&apos;t already exist. 
The capabilities are defined in the following format `array( &apos;read&apos; =&gt; true );` To explicitly deny a role a capability you set the value for that capability to false. 

'; file='/wp-includes/capabilities.php, line: 133'; params='@param string $role Role name.  
@param string $display_name Role display name.  
@param array $capabilities List of role capabilities in the above format.  '; return='null|WP_Role <code>WP_Role</code> object if role is added, null if already exists. '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::get_names'; match='get_names'; definition='get_names()'; description='Retrieve list of role names. 

'; file='/wp-includes/capabilities.php, line: 223'; return='array List of role names. '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::get_role'; match='get_role'; definition='get_role($role)'; description='Retrieve role object by name. 

'; file='/wp-includes/capabilities.php, line: 208'; params='@param string $role Role name.  '; return='object|null Null, if role does not exist. <code>WP_Role</code> object, if found. '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::is_role'; match='is_role'; definition='is_role($role)'; description='Whether role name is currently in the list of available roles. 

'; file='/wp-includes/capabilities.php, line: 237'; params='@param string $role Role name to look up.  '; return='bool '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::remove_cap'; match='remove_cap'; definition='remove_cap($role, $cap)'; description='Remove capability from role. 

'; file='/wp-includes/capabilities.php, line: 193'; params='@param string $role Role name.  
@param string $cap Capability name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Roles::remove_role'; match='remove_role'; definition='remove_role($role)'; description='Remove role by name. 

'; file='/wp-includes/capabilities.php, line: 156'; params='@param string $role Role name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_Scripts::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/class.wp-scripts.php, line: 33'; type='method';}, 
	{name='WP_Scripts::all_deps'; match='all_deps'; definition='all_deps($handles, $recursion=false, $group=false)'; description='Determines dependencies 
Recursively builds array of items to process taking dependencies into account. Does NOT catch infinite loops. 
'; file='/wp-includes/class.wp-scripts.php, line: 157'; params='@param mixed $handles Accepts (string) dep name or (array of strings) dep names  
@param bool $recursion Used internally when function calls itself  '; type='method';}, 
	{name='WP_Scripts::do_footer_items'; match='do_footer_items'; definition='do_footer_items()'; description=''; file='/wp-includes/class.wp-scripts.php, line: 169'; type='method';}, 
	{name='WP_Scripts::do_head_items'; match='do_head_items'; definition='do_head_items()'; description=''; file='/wp-includes/class.wp-scripts.php, line: 164'; type='method';}, 
	{name='WP_Scripts::do_item'; match='do_item'; definition='do_item($handle, $group=false)'; description=''; file='/wp-includes/class.wp-scripts.php, line: 81'; type='method';}, 
	{name='WP_Scripts::in_default_dir'; match='in_default_dir'; definition='in_default_dir($src)'; description=''; file='/wp-includes/class.wp-scripts.php, line: 182'; type='method';}, 
	{name='WP_Scripts::localize'; match='localize'; definition='localize($handle, $object_name, $l10n)'; description='Localizes a script 
Localizes only if script has already been added 
'; file='/wp-includes/class.wp-scripts.php, line: 143'; params='@param string $handle Script name  
@param string $object_name Name of JS object to hold l10n info  
@param array $l10n Array of JS var name => localized string  '; return='bool Successful localization '; type='method';}, 
	{name='WP_Scripts::print_scripts'; match='print_scripts'; definition='print_scripts($handles=false, $group=false)'; description='Prints scripts 
Prints the scripts passed to it or the print queue. Also prints all necessary dependencies. 
'; file='/wp-includes/class.wp-scripts.php, line: 46'; params='@param mixed $handles (optional) Scripts to be printed. (void) prints queue, (string) prints that script, (array of strings) prints those scripts.  
@param int $group (optional) If scripts were queued in groups prints this group number.  '; return='array Scripts that have been printed '; type='method';}, 
	{name='WP_Scripts::print_scripts_l10n'; match='print_scripts_l10n'; definition='print_scripts_l10n($handle, $echo=true)'; description=''; file='/wp-includes/class.wp-scripts.php, line: 50'; type='method';}, 
	{name='WP_Scripts::reset'; match='reset'; definition='reset()'; description=''; file='/wp-includes/class.wp-scripts.php, line: 196'; type='method';}, 
	{name='WP_Scripts::set_group'; match='set_group'; definition='set_group($handle, $recursion, $group=false)'; description=''; file='/wp-includes/class.wp-scripts.php, line: 149'; type='method';}, 
	{name='WP_SimplePie_File::__construct'; match='__construct'; definition='__construct($url, $timeout=10, $redirects=5, $headers=null, $useragent=null, $force_fsockopen=false)'; description=''; file='/wp-includes/class-feed.php, line: 59'; type='method';}, 
	{name='WP_Styles::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/class.wp-styles.php, line: 30'; type='method';}, 
	{name='WP_Styles::_css_href'; match='_css_href'; definition='_css_href($src, $ver, $handle)'; description=''; file='/wp-includes/class.wp-styles.php, line: 104'; type='method';}, 
	{name='WP_Styles::all_deps'; match='all_deps'; definition='all_deps($handles, $recursion=false, $group=false)'; description='Determines dependencies 
Recursively builds array of items to process taking dependencies into account. Does NOT catch infinite loops. 
'; file='/wp-includes/class.wp-styles.php, line: 97'; params='@param mixed $handles Accepts (string) dep name or (array of strings) dep names  
@param bool $recursion Used internally when function calls itself  '; type='method';}, 
	{name='WP_Styles::do_item'; match='do_item'; definition='do_item($handle)'; description=''; file='/wp-includes/class.wp-styles.php, line: 34'; type='method';}, 
	{name='WP_Styles::in_default_dir'; match='in_default_dir'; definition='in_default_dir($src)'; description=''; file='/wp-includes/class.wp-styles.php, line: 115'; type='method';}, 
	{name='WP_Tax_Query::__construct'; match='__construct'; definition='__construct($tax_query)'; description='Constructor. 
Parses a compact tax query and sets defaults. 

'; file='/wp-includes/taxonomy.php, line: 596'; params='@param array $tax_query A compact tax query: array( \'relation\' => \'OR\', array( \'taxonomy\' => \'tax1\', \'terms\' => array( \'term1\', \'term2\' ), \'field\' => \'slug\', ), array( \'taxonomy\' => \'tax2\', \'terms\' => array( \'term-a\', \'term-b\' ), \'field\' => \'slug\', ), )  '; since='3.1.0 '; type='method';}, 
	{name='WP_Tax_Query::clean_query'; match='clean_query'; definition='clean_query($query)'; description='Validates a single query. 

'; file='/wp-includes/taxonomy.php, line: 715'; params='@param array &$query The single query  '; since='3.2.0 '; type='method';}, 
	{name='WP_Tax_Query::get_sql'; match='get_sql'; definition='get_sql($primary_table, $primary_id_column)'; description='Generates SQL clauses to be appended to a main query. 

'; file='/wp-includes/taxonomy.php, line: 633'; params='@param string $primary_table  
@param string $primary_id_column  '; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Tax_Query::transform_query'; match='transform_query'; definition='transform_query($query, $resulting_field)'; description='Transforms a single query, from one field to another. 

'; file='/wp-includes/taxonomy.php, line: 749'; params='@param array &$query The single query  
@param string $resulting_field The resulting field  '; since='3.2.0 '; type='method';}, 
	{name='WP_Terms_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 14'; type='method';}, 
	{name='WP_Terms_List_Table::_rows'; match='_rows'; definition='_rows($taxonomy, $terms, $children, $start=0, $per_page=20, $count, $parent=0, $level=0)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 175'; type='method';}, 
	{name='WP_Terms_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 36'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Terms_List_Table::column_cb'; match='column_cb'; definition='column_cb($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 234'; type='method';}, 
	{name='WP_Terms_List_Table::column_default'; match='column_default'; definition='column_default($tag, $column_name)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 314'; type='method';}, 
	{name='WP_Terms_List_Table::column_description'; match='column_description'; definition='column_description($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 278'; type='method';}, 
	{name='WP_Terms_List_Table::column_links'; match='column_links'; definition='column_links($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 307'; type='method';}, 
	{name='WP_Terms_List_Table::column_name'; match='column_name'; definition='column_name($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 245'; type='method';}, 
	{name='WP_Terms_List_Table::column_posts'; match='column_posts'; definition='column_posts($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 286'; type='method';}, 
	{name='WP_Terms_List_Table::column_slug'; match='column_slug'; definition='column_slug($tag)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 282'; type='method';}, 
	{name='WP_Terms_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 88'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::display_rows_or_placeholder'; match='display_rows_or_placeholder'; definition='display_rows_or_placeholder()'; description='Generate the &lt;tbody&gt; part of the table 
'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 126'; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 81'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 95'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 116'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::has_items'; match='has_items'; definition='has_items()'; description='Whether the table has items to display or not 

'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 76'; return='bool '; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::inline_edit'; match='inline_edit'; definition='inline_edit()'; description='Outputs the hidden row displayed when inline editing 
'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 325'; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 42'; since='3.1.0 '; type='method';}, 
	{name='WP_Terms_List_Table::single_row'; match='single_row'; definition='single_row($tag, $level=0)'; description=''; file='/wp-admin/includes/class-wp-terms-list-table.php, line: 223'; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::__construct'; match='__construct'; definition='__construct($params=array())'; description='Constructor - Call parent constructor with params array. 
This will set class properties based on the key value pairs in the array. 
'; file='/wp-includes/wp-diff.php, line: 71'; params='@param array $params  '; since='2.6.0 '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_added'; match='_added'; definition='_added($lines, $encode=true)'; description='
'; file='/wp-includes/wp-diff.php, line: 141'; params='@param array $lines  
@param bool $encode  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_changed'; match='_changed'; definition='_changed($orig, $final)'; description='Process changed lines to do word-by-word diffs for extra highlighting. 
(TRAC style) sometimes these lines can actually be deleted or added rows. We do additional processing to figure that out 
'; file='/wp-includes/wp-diff.php, line: 201'; params='@param array $orig  
@param array $final  '; return='string '; since='2.6.0 '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_context'; match='_context'; definition='_context($lines, $encode=true)'; description='
'; file='/wp-includes/wp-diff.php, line: 177'; params='@param array $lines  
@param bool $encode  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_deleted'; match='_deleted'; definition='_deleted($lines, $encode=true)'; description='
'; file='/wp-includes/wp-diff.php, line: 159'; params='@param array $lines  
@param bool $encode  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_lines'; match='_lines'; definition='_lines($lines, $prefix=\' \')'; description=''; file='/wp-includes/wp-diff.php, line: 91'; params='@param array $lines  
@param string $prefix  '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::_startBlock'; match='_startBlock'; definition='_startBlock($header)'; description=''; file='/wp-includes/wp-diff.php, line: 81'; params='@param string $header  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::addedLine'; match='addedLine'; definition='addedLine($line)'; description=''; file='/wp-includes/wp-diff.php, line: 100'; params='@param string $line HTML-escape the value.  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::compute_string_distance'; match='compute_string_distance'; definition='compute_string_distance($string1, $string2)'; description='Computes a number that is intended to reflect the &quot;distance&quot; between two strings. 
'; file='/wp-includes/wp-diff.php, line: 422'; params='@param string $string1  
@param string $string2  '; return='int '; since='2.6.0 '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::contextLine'; match='contextLine'; definition='contextLine($line)'; description=''; file='/wp-includes/wp-diff.php, line: 120'; params='@param string $line HTML-escape the value.  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::deletedLine'; match='deletedLine'; definition='deletedLine($line)'; description=''; file='/wp-includes/wp-diff.php, line: 110'; params='@param string $line HTML-escape the value.  '; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::difference'; match='difference'; definition='difference($a, $b)'; description=''; file='/wp-includes/wp-diff.php, line: 446'; params='@param int $a  
@param int $b  '; return='int '; since='2.6.0 '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::emptyLine'; match='emptyLine'; definition='emptyLine()'; description=''; file='/wp-includes/wp-diff.php, line: 129'; return='string '; type='method';}, 
	{name='WP_Text_Diff_Renderer_Table::interleave_changed_lines'; match='interleave_changed_lines'; definition='interleave_changed_lines($orig, $final)'; description='Takes changed blocks and matches which rows in orig turned into which rows in final. 
Returns &lowast;_matches ( which rows match with which ) &lowast;_rows ( order of rows in each column interleaved with blank rows as necessary ) 
'; file='/wp-includes/wp-diff.php, line: 289'; params='@param unknown_type $orig  
@param unknown_type $final  '; return='unknown '; since='2.6.0 '; type='method';}, 
	{name='WP_Text_Diff_Renderer_inline::_splitOnWords'; match='_splitOnWords'; definition='_splitOnWords($string, $newlineEscape=\"\\n\")'; description=''; file='/wp-includes/wp-diff.php, line: 468'; params='@param string $string  
@param string $newlineEscape  '; return='string '; since='2.6.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 12'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Theme_Install_List_Table::display'; match='display'; definition='display()'; description='Display the table 
'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 129'; since='3.1.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 156'; since='3.1.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 125'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 112'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 108'; since='3.1.0 '; type='method';}, 
	{name='WP_Theme_Install_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-theme-install-list-table.php, line: 16'; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 15'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Themes_List_Table::display'; match='display'; definition='display()'; description='Display the table 
'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 103'; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 122'; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 118'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 63'; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 20'; since='3.1.0 '; type='method';}, 
	{name='WP_Themes_List_Table::search_theme'; match='search_theme'; definition='search_theme($theme)'; description=''; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 203'; type='method';}, 
	{name='WP_Themes_List_Table::tablenav'; match='tablenav'; definition='tablenav($which=\'top\')'; description=''; file='/wp-admin/includes/class-wp-themes-list-table.php, line: 91'; type='method';}, 
	{name='WP_Upgrader::__construct'; match='__construct'; definition='__construct($skin=null)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 28'; type='method';}, 
	{name='WP_Upgrader::download_package'; match='download_package'; definition='download_package($package)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 108'; type='method';}, 
	{name='WP_Upgrader::fs_connect'; match='fs_connect'; definition='fs_connect($directories=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 61'; type='method';}, 
	{name='WP_Upgrader::generic_strings'; match='generic_strings'; definition='generic_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 40'; type='method';}, 
	{name='WP_Upgrader::init'; match='init'; definition='init()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 35'; type='method';}, 
	{name='WP_Upgrader::install_package'; match='install_package'; definition='install_package($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 162'; type='method';}, 
	{name='WP_Upgrader::maintenance_mode'; match='maintenance_mode'; definition='maintenance_mode($enable=false)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 336'; type='method';}, 
	{name='WP_Upgrader::run'; match='run'; definition='run($options)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 266'; type='method';}, 
	{name='WP_Upgrader::unpack_package'; match='unpack_package'; definition='unpack_package($package, $delete_package=true)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 126'; type='method';}, 
	{name='WP_Upgrader_Skin::__construct'; match='__construct'; definition='__construct($args=array())'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 939'; type='method';}, 
	{name='WP_Upgrader_Skin::add_strings'; match='add_strings'; definition='add_strings()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 950'; type='method';}, 
	{name='WP_Upgrader_Skin::after'; match='after'; definition='after()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1007'; type='method';}, 
	{name='WP_Upgrader_Skin::before'; match='before'; definition='before()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 1006'; type='method';}, 
	{name='WP_Upgrader_Skin::error'; match='error'; definition='error($errors)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 977'; type='method';}, 
	{name='WP_Upgrader_Skin::feedback'; match='feedback'; definition='feedback($string)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 992'; type='method';}, 
	{name='WP_Upgrader_Skin::footer'; match='footer'; definition='footer()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 973'; type='method';}, 
	{name='WP_Upgrader_Skin::header'; match='header'; definition='header()'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 965'; type='method';}, 
	{name='WP_Upgrader_Skin::request_filesystem_credentials'; match='request_filesystem_credentials'; definition='request_filesystem_credentials($error=false)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 957'; type='method';}, 
	{name='WP_Upgrader_Skin::set_result'; match='set_result'; definition='set_result($result)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 953'; type='method';}, 
	{name='WP_Upgrader_Skin::set_upgrader'; match='set_upgrader'; definition='set_upgrader($upgrader)'; description=''; file='/wp-admin/includes/class-wp-upgrader.php, line: 944'; type='method';}, 
	{name='WP_User::__construct'; match='__construct'; definition='__construct($id, $name=\'\', $blog_id=\'\')'; description='Constructor - Sets up the object properties. 
Retrieves the userdata and then assigns all of the data keys to direct properties of the object. Calls <code>WP_User::_init_caps()</code> after setting up the object&apos;s user data properties. 

'; file='/wp-includes/capabilities.php, line: 473'; params='@param int string $id User\'s ID or username  
@param int $name Optional. User\'s username  
@param int $blog_id Optional Blog ID, defaults to current blog.  '; return='<code>WP_User</code> '; since='2.0.0 '; type='method';}, 
	{name='WP_User::_init_caps'; match='_init_caps'; definition='_init_caps($cap_key=\'\')'; description='Set up capability object properties. 
Will set the value for the &apos;cap_key&apos; property to current database table prefix, followed by &apos;capabilities&apos;. Will then check to see if the property matching the &apos;cap_key&apos; exists and is an array. If so, it will be used. 
'; file='/wp-includes/capabilities.php, line: 512'; params='@param string $cap_key Optional capability key  '; since='2.1.0 '; type='method';}, 
	{name='WP_User::add_cap'; match='add_cap'; definition='add_cap($cap, $grant=true)'; description='Add capability and grant or deny access to capability. 

'; file='/wp-includes/capabilities.php, line: 673'; params='@param string $cap Capability name.  
@param bool $grant Whether to grant capability to user.  '; since='2.0.0 '; type='method';}, 
	{name='WP_User::add_role'; match='add_role'; definition='add_role($role)'; description='Add role to user. 
Updates the user&apos;s meta data option with capabilities and roles. 

'; file='/wp-includes/capabilities.php, line: 565'; params='@param string $role Role name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_User::for_blog'; match='for_blog'; definition='for_blog($blog_id=\'\')'; description='Set the blog to operate on. Defaults to the current blog. 
'; file='/wp-includes/capabilities.php, line: 772'; params='@param int $blog_id Optional Blog ID, defaults to current blog.  '; since='3.0.0 '; type='method';}, 
	{name='WP_User::get_role_caps'; match='get_role_caps'; definition='get_role_caps()'; description='Retrieve all of the role capabilities and merge with individual capabilities. 
All of the capabilities of the roles the user belongs to are merged with the users individual roles. This also means that the user can be denied specific roles that their role might have, but the specific user isn&apos;t granted permission to. 
'; file='/wp-includes/capabilities.php, line: 536'; since='2.0.0 '; uses='$wp_roles '; type='method';}, 
	{name='WP_User::has_cap'; match='has_cap'; definition='has_cap($cap)'; description='Whether user has capability or role name. 
This is useful for looking up whether the user has a specific role assigned to the user. The second optional parameter can also be used to check for capabilities against a specfic post. 

'; file='/wp-includes/capabilities.php, line: 721'; params='@param string int $cap Capability or role name to search.  
@param int $post_id Optional. Post ID to check capability against specific post.  '; return='bool True, if user has capability; false, if user does not have capability. '; since='2.0.0 '; type='method';}, 
	{name='WP_User::level_reduction'; match='level_reduction'; definition='level_reduction($max, $item)'; description='Choose the maximum level the user has. 
Will compare the level from the $item parameter against the $max parameter. If the item is incorrect, then just the $max parameter value will be returned. 
Used to get the max level based on the capabilities the user has. This is also based on roles, so if the user is assigned the Administrator role then the capability &apos;level_10&apos; will exist and the user will get that value. 

'; file='/wp-includes/capabilities.php, line: 639'; params='@param int $max Max level of user.  
@param string $item Level capability name.  '; return='int Max Level. '; since='2.0.0 '; type='method';}, 
	{name='WP_User::remove_all_caps'; match='remove_all_caps'; definition='remove_all_caps()'; description='Remove all of the capabilities of the user. 
'; file='/wp-includes/capabilities.php, line: 699'; since='2.1.0 '; type='method';}, 
	{name='WP_User::remove_cap'; match='remove_cap'; definition='remove_cap($cap)'; description='Remove capability from user. 

'; file='/wp-includes/capabilities.php, line: 686'; params='@param string $cap Capability name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_User::remove_role'; match='remove_role'; definition='remove_role($role)'; description='Remove role from user. 

'; file='/wp-includes/capabilities.php, line: 580'; params='@param string $role Role name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_User::set_role'; match='set_role'; definition='set_role($role)'; description='Set the role of the user. 
This will remove the previous roles of the user and assign the user the new one. You can set the role to an empty string and it will remove all of the roles from the user. 

'; file='/wp-includes/capabilities.php, line: 601'; params='@param string $role Role name.  '; since='2.0.0 '; type='method';}, 
	{name='WP_User::translate_level_to_cap'; match='translate_level_to_cap'; definition='translate_level_to_cap($level)'; description='Convert numeric level to level capability name. 
Prepends &apos;level_&apos; to level number. 

'; file='/wp-includes/capabilities.php, line: 761'; params='@param int $level Level number, 1 to 10.  '; return='string '; since='2.0.0 '; type='method';}, 
	{name='WP_User::update_user_level_from_caps'; match='update_user_level_from_caps'; definition='update_user_level_from_caps()'; description='Update the maximum user level for the user. 
Updates the &apos;user_level&apos; user metadata (includes prefix that is the database table prefix) with the maximum user level. Gets the value from the all of the capabilities that the user has. 
'; file='/wp-includes/capabilities.php, line: 658'; since='2.0.0 '; type='method';}, 
	{name='WP_User_Query::__construct'; match='__construct'; definition='__construct($query=null)'; description='PHP5 constructor 
'; file='/wp-includes/user.php, line: 373'; params='@param string array $args The query variables  '; return='<code>WP_User_Query</code> '; since='3.1.0 '; type='method';}, 
	{name='WP_User_Query::get_results'; match='get_results'; definition='get_results()'; description='Return the list of users 

'; file='/wp-includes/user.php, line: 608'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_User_Query::get_search_sql'; match='get_search_sql'; definition='get_search_sql($string, $cols, $wild=false)'; description=''; file='/wp-includes/user.php, line: 584'; type='method';}, 
	{name='WP_User_Query::get_total'; match='get_total'; definition='get_total()'; description='Return the total number of users for the current query 

'; file='/wp-includes/user.php, line: 620'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_User_Query::prepare_query'; match='prepare_query'; definition='prepare_query()'; description='Prepare the query variables 
'; file='/wp-includes/user.php, line: 404'; since='3.1.0 '; type='method';}, 
	{name='WP_User_Query::query'; match='query'; definition='query()'; description='Execute the query, with the current variables 
'; file='/wp-includes/user.php, line: 546'; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-admin/includes/class-wp-users-list-table.php, line: 15'; type='method';}, 
	{name='WP_Users_List_Table::ajax_user_can'; match='ajax_user_can'; definition='ajax_user_can()'; description='Checks the current user&apos;s permissions 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 28'; since='3.1.0 '; uses='wp_die()'; type='method';}, 
	{name='WP_Users_List_Table::current_action'; match='current_action'; definition='current_action()'; description='Get the current action selected from the bulk actions dropdown. 

'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 153'; return='string|bool The action name or False if no action was selected '; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::display_rows'; match='display_rows'; definition='display_rows()'; description='Generate the table rows 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 189'; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::extra_tablenav'; match='extra_tablenav'; definition='extra_tablenav($which)'; description='Extra controls to be displayed between bulk actions and pagination 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 136'; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::get_bulk_actions'; match='get_bulk_actions'; definition='get_bulk_actions()'; description='Get an associative array ( option_name =&gt; option_title ) with the list of bulk actions available on this table. 

'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 122'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::get_columns'; match='get_columns'; definition='get_columns()'; description='Get a list of columns. The format is: &apos;internal-name&apos; =&gt; &apos;Title&apos; 

'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 160'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::get_sortable_columns'; match='get_sortable_columns'; definition='get_sortable_columns()'; description='Get a list of sortable columns. The format is: &apos;internal-name&apos; =&gt; &apos;orderby&apos; or &apos;internal-name&apos; =&gt; array( &apos;orderby&apos;, true ) 
The second format will make the initial sorting order be descending 

'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 176'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::get_views'; match='get_views'; definition='get_views()'; description='Get an associative array ( id =&gt; link ) with the list of views available on this table. 

'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 82'; return='array '; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::no_items'; match='no_items'; definition='no_items()'; description='Message to be displayed when there are no items 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 78'; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::prepare_items'; match='prepare_items'; definition='prepare_items()'; description='Prepares the list of items for displaying. 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 35'; since='3.1.0 '; type='method';}, 
	{name='WP_Users_List_Table::single_row'; match='single_row'; definition='single_row($user_object, $style=\'\', $role=\'\', $numposts=0)'; description='Generate HTML for a single row on the users.php admin panel. 
'; file='/wp-admin/includes/class-wp-users-list-table.php, line: 217'; params='@param object $user_object  
@param string $style Optional. Attributes added to the TR element. Must be sanitized.  
@param string $role Key for the $wp_roles array.  
@param int $numposts Optional. Post count to display for this user. Defaults to zero, as in, a new user has made zero posts.  '; return='string '; since='2.1.0 '; type='method';}, 
	{name='WP_Widget::WP_Widget'; match='WP_Widget'; definition='WP_Widget($id_base=false, $name, $widget_options=array(), $control_options=array())'; description='PHP4 constructor '; file='/wp-includes/widgets.php, line: 76'; type='method';}, 
	{name='WP_Widget::__construct'; match='__construct'; definition='__construct($id_base=false, $name, $widget_options=array(), $control_options=array())'; description='PHP5 constructor 
'; file='/wp-includes/widgets.php, line: 93'; params='@param string $id_base Optional Base ID for the widget, lower case, if left empty a portion of the widget\'s class name will be used. Has to be unique.  
@param string $name Name for the widget displayed on the configuration page.  
@param array $widget_options Optional Passed to wp_register_sidebar_widget() 
@param array $control_options Optional Passed to wp_register_widget_control() '; type='method';}, 
	{name='WP_Widget::_get_display_callback'; match='_get_display_callback'; definition='_get_display_callback()'; description=''; file='/wp-includes/widgets.php, line: 154'; type='method';}, 
	{name='WP_Widget::_get_form_callback'; match='_get_form_callback'; definition='_get_form_callback()'; description=''; file='/wp-includes/widgets.php, line: 162'; type='method';}, 
	{name='WP_Widget::_get_update_callback'; match='_get_update_callback'; definition='_get_update_callback()'; description=''; file='/wp-includes/widgets.php, line: 158'; type='method';}, 
	{name='WP_Widget::_register'; match='_register'; definition='_register()'; description=''; file='/wp-includes/widgets.php, line: 127'; type='method';}, 
	{name='WP_Widget::_register_one'; match='_register_one'; definition='_register_one($number=-1)'; description='Helper function: Registers a single instance. '; file='/wp-includes/widgets.php, line: 279'; type='method';}, 
	{name='WP_Widget::_set'; match='_set'; definition='_set($number)'; description=''; file='/wp-includes/widgets.php, line: 149'; type='method';}, 
	{name='WP_Widget::display_callback'; match='display_callback'; definition='display_callback($args, $widget_args=1)'; description='Generate the actual widget content. Just finds the instance and calls <code>widget()</code> . Do NOT over-ride this function. '; file='/wp-includes/widgets.php, line: 169'; type='method';}, 
	{name='WP_Widget::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/widgets.php, line: 66'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget::form_callback'; match='form_callback'; definition='form_callback($widget_args=1)'; description='Generate the control form. Do NOT over-ride this function. '; file='/wp-includes/widgets.php, line: 249'; type='method';}, 
	{name='WP_Widget::get_field_id'; match='get_field_id'; definition='get_field_id($field_name)'; description='Constructs id attributes for use in <code>form()</code> fields 
This function should be used in <code>form()</code> methods to create id attributes for fields to be saved by <code>update()</code> 
'; file='/wp-includes/widgets.php, line: 121'; params='@param string $field_name Field name  '; return='string ID attribute for $field_name '; type='method';}, 
	{name='WP_Widget::get_field_name'; match='get_field_name'; definition='get_field_name($field_name)'; description='Constructs name attributes for use in <code>form()</code> fields 
This function should be used in <code>form()</code> methods to create name attributes for fields to be saved by <code>update()</code> 
'; file='/wp-includes/widgets.php, line: 109'; params='@param string $field_name Field name  '; return='string Name attribute for $field_name '; type='method';}, 
	{name='WP_Widget::get_settings'; match='get_settings'; definition='get_settings()'; description=''; file='/wp-includes/widgets.php, line: 290'; type='method';}, 
	{name='WP_Widget::save_settings'; match='save_settings'; definition='save_settings($settings)'; description=''; file='/wp-includes/widgets.php, line: 285'; type='method';}, 
	{name='WP_Widget::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/widgets.php, line: 58'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget::update_callback'; match='update_callback'; definition='update_callback($widget_args=1)'; description='Deal with changed settings. Do NOT over-ride this function. '; file='/wp-includes/widgets.php, line: 188'; type='method';}, 
	{name='WP_Widget::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/widgets.php, line: 44'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Archives::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 216'; type='method';}, 
	{name='WP_Widget_Archives::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 256'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Archives::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 246'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Archives::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 221'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Calendar::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 329'; type='method';}, 
	{name='WP_Widget_Calendar::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 353'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Calendar::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 346'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Calendar::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 334'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Categories::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 420'; type='method';}, 
	{name='WP_Widget_Categories::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 481'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Categories::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 471'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Categories::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 425'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Factory::WP_Widget_Factory'; match='WP_Widget_Factory'; definition='WP_Widget_Factory()'; description=''; file='/wp-includes/widgets.php, line: 319'; type='method';}, 
	{name='WP_Widget_Factory::_register_widgets'; match='_register_widgets'; definition='_register_widgets()'; description=''; file='/wp-includes/widgets.php, line: 332'; type='method';}, 
	{name='WP_Widget_Factory::register'; match='register'; definition='register($widget_class)'; description=''; file='/wp-includes/widgets.php, line: 323'; type='method';}, 
	{name='WP_Widget_Factory::unregister'; match='unregister'; definition='unregister($widget_class)'; description=''; file='/wp-includes/widgets.php, line: 327'; type='method';}, 
	{name='WP_Widget_Links::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 92'; type='method';}, 
	{name='WP_Widget_Links::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 134'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Links::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 122'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Links::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 97'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Meta::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 281'; type='method';}, 
	{name='WP_Widget_Meta::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 313'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Meta::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 306'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Meta::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 286'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Pages::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 16'; type='method';}, 
	{name='WP_Widget_Pages::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 60'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Pages::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 46'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Pages::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 21'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_RSS::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 695'; type='method';}, 
	{name='WP_Widget_RSS::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 758'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_RSS::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 753'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_RSS::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 701'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Recent_Comments::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 598'; type='method';}, 
	{name='WP_Widget_Recent_Comments::flush_widget_cache'; match='flush_widget_cache'; definition='flush_widget_cache()'; description=''; file='/wp-includes/default-widgets.php, line: 619'; type='method';}, 
	{name='WP_Widget_Recent_Comments::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 675'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Recent_Comments::recent_comments_style'; match='recent_comments_style'; definition='recent_comments_style()'; description=''; file='/wp-includes/default-widgets.php, line: 610'; type='method';}, 
	{name='WP_Widget_Recent_Comments::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 662'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Recent_Comments::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 623'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Recent_Posts::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 512'; type='method';}, 
	{name='WP_Widget_Recent_Posts::flush_widget_cache'; match='flush_widget_cache'; definition='flush_widget_cache()'; description=''; file='/wp-includes/default-widgets.php, line: 574'; type='method';}, 
	{name='WP_Widget_Recent_Posts::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 578'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Recent_Posts::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 561'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Recent_Posts::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 522'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Search::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 173'; type='method';}, 
	{name='WP_Widget_Search::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 192'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Search::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 200'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Search::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 178'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Tag_Cloud::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 988'; type='method';}, 
	{name='WP_Widget_Tag_Cloud::_get_current_taxonomy'; match='_get_current_taxonomy'; definition='_get_current_taxonomy($instance)'; description=''; file='/wp-includes/default-widgets.php, line: 1040'; type='method';}, 
	{name='WP_Widget_Tag_Cloud::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 1023'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Tag_Cloud::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 1017'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Tag_Cloud::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 993'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_Widget_Text::__construct'; match='__construct'; definition='__construct()'; description=''; file='/wp-includes/default-widgets.php, line: 370'; type='method';}, 
	{name='WP_Widget_Text::form'; match='form'; definition='form($instance)'; description='Echo the settings update form 
'; file='/wp-includes/default-widgets.php, line: 398'; params='@param array $instance Current settings  '; type='method';}, 
	{name='WP_Widget_Text::update'; match='update'; definition='update($new_instance, $old_instance)'; description='Update a particular instance. 
This function should check that $new_instance is set correctly. The newly calculated value of $instance should be returned. If &quot;false&quot; is returned, the instance won&apos;t be saved/updated. 
'; file='/wp-includes/default-widgets.php, line: 387'; params='@param array $new_instance New settings for this instance as input by the user via  
@param array $old_instance Old settings for this instance  '; return='array Settings to save or bool false to cancel saving '; type='method';}, 
	{name='WP_Widget_Text::widget'; match='widget'; definition='widget($args, $instance)'; description='Echo the widget content. 
Subclasses should over-ride this function to generate their widget code. 
'; file='/wp-includes/default-widgets.php, line: 376'; params='@param array $args Display arguments including before_title, after_title, before_widget, and after_widget.  
@param array $instance The settings for the particular instance of the widget  '; type='method';}, 
	{name='WP_oEmbed::__construct'; match='__construct'; definition='__construct()'; description='Constructor 
'; file='/wp-includes/class-oembed.php, line: 28'; uses='apply_filters() Filters a list of pre-defined oEmbed providers. '; type='method';}, 
	{name='WP_oEmbed::_fetch_with_format'; match='_fetch_with_format'; definition='_fetch_with_format($provider_url_with_args, $format)'; description='Fetches result from an oEmbed provider for a specific format and complete provider URL 
'; file='/wp-includes/class-oembed.php, line: 183'; params='@param string $provider_url_with_args URL to the provider with full arguments list (url, maxheight, etc.)  
@param string $format Format to use  '; return='bool|object False on failure, otherwise the result in the form of an object. '; since='3.0.0 '; type='method';}, 
	{name='WP_oEmbed::_parse_json'; match='_parse_json'; definition='_parse_json($response_body)'; description='Parses a json response body. 
'; file='/wp-includes/class-oembed.php, line: 200'; since='3.0.0 '; type='method';}, 
	{name='WP_oEmbed::_parse_xml'; match='_parse_xml'; definition='_parse_xml($response_body)'; description='Parses an XML response body. 
'; file='/wp-includes/class-oembed.php, line: 210'; since='3.0.0 '; type='method';}, 
	{name='WP_oEmbed::_strip_newlines'; match='_strip_newlines'; definition='_strip_newlines($html, $data, $url)'; description='Strip any new lines from the HTML. 
'; file='/wp-includes/class-oembed.php, line: 267'; params='@param string $html Existing HTML.  
@param object $data Data object from  
@param string $url The original URL passed to oEmbed.  '; return='string Possibly modified $html '; type='method';}, 
	{name='WP_oEmbed::data2html'; match='data2html'; definition='data2html($data, $url)'; description='Converts a data object from <code>WP_oEmbed::fetch()</code> and returns the HTML. 
'; file='/wp-includes/class-oembed.php, line: 228'; params='@param object $data A data object result from an oEmbed provider.  
@param string $url The URL to the content that is desired to be embedded.  '; return='bool|string False on error, otherwise the HTML needed to embed. '; type='method';}, 
	{name='WP_oEmbed::discover'; match='discover'; definition='discover($url)'; description='Attempts to find oEmbed provider discovery &lt;link&gt; tags at the given URL. 
'; file='/wp-includes/class-oembed.php, line: 101'; params='@param string $url The URL that should be inspected for discovery <link> tags.  '; return='bool|string False on failure, otherwise the oEmbed provider URL. '; type='method';}, 
	{name='WP_oEmbed::fetch'; match='fetch'; definition='fetch($provider, $url, $args=\'\')'; description='Connects to a oEmbed provider and returns the result. 
'; file='/wp-includes/class-oembed.php, line: 158'; params='@param string $provider The URL to the oEmbed provider.  
@param string $url The URL to the content that is desired to be embedded.  
@param array $args Optional arguments. Usually passed from a shortcode.  '; return='bool|object False on failure, otherwise the result in the form of an object. '; type='method';}, 
	{name='WP_oEmbed::get_html'; match='get_html'; definition='get_html($url, $args=\'\')'; description='The do-it-all function that takes a URL and attempts to return the HTML. 
@see <code>WP_oEmbed::discover()</code> <code>WP_oEmbed::fetch()</code> <code>WP_oEmbed::data2html()</code> '; file='/wp-includes/class-oembed.php, line: 67'; params='@param string $url The URL to the content that should be attempted to be embedded.  
@param array $args Optional arguments. Usually passed from a shortcode.  '; return='bool|string False on failure, otherwise the UNSANITIZED (and potentially unsafe) HTML that should be used to embed. '; type='method';}, 
	{name='Walker::display_element'; match='display_element'; definition='display_element($element, $children_elements, $max_depth, $depth=0, $args, $output)'; description='Traverse elements to create list from elements. 
Display one element if the element doesn&apos;t have any children otherwise, display the element and its children. Will only traverse up to the max depth and no ignore elements under that depth. It is possible to set the max depth to include all depths, see <code>walk()</code> method. 
This method shouldn&apos;t be called directly, use the <code>walk()</code> method instead. 
'; file='/wp-includes/class-wp-walker.php, line: 118'; params='@param object $element Data object  
@param array $children_elements List of elements to continue traversing.  
@param int $max_depth Max depth to traverse.  
@param int $depth Depth of current element.  
@param array $args  
@param string $output Passed by reference. Used to append additional content.  '; return='null Null on failure with no changes to parameters. '; since='2.5.0 '; type='method';}, 
	{name='Walker::end_el'; match='end_el'; definition='end_el($output)'; description='Ends the element output, if needed. 
Additional parameters are used in child classes. The args parameter holds additional values that may be used with the child class methods. 
'; file='/wp-includes/class-wp-walker.php, line: 96'; params='@param string $output Passed by reference. Used to append additional content.  '; since='2.1.0 '; type='method';}, 
	{name='Walker::end_lvl'; match='end_lvl'; definition='end_lvl($output)'; description='Ends the list of after the elements are added. 
Additional parameters are used in child classes. The args parameter holds additional values that may be used with the child class methods. This method finishes the list at the end of output of the elements. 
'; file='/wp-includes/class-wp-walker.php, line: 69'; params='@param string $output Passed by reference. Used to append additional content.  '; since='2.1.0 '; type='method';}, 
	{name='Walker::get_number_of_root_elements'; match='get_number_of_root_elements'; definition='get_number_of_root_elements($elements)'; description=''; file='/wp-includes/class-wp-walker.php, line: 368'; type='method';}, 
	{name='Walker::paged_walk'; match='paged_walk'; definition='paged_walk($elements, $max_depth, $page_num, $per_page)'; description=''; file='/wp-includes/class-wp-walker.php, line: 260'; type='method';}, 
	{name='Walker::start_el'; match='start_el'; definition='start_el($output)'; description='Start the element output. 
Additional parameters are used in child classes. The args parameter holds additional values that may be used with the child class methods. Includes the element output also. 
'; file='/wp-includes/class-wp-walker.php, line: 83'; params='@param string $output Passed by reference. Used to append additional content.  '; since='2.1.0 '; type='method';}, 
	{name='Walker::start_lvl'; match='start_lvl'; definition='start_lvl($output)'; description='Starts the list before the elements are added. 
Additional parameters are used in child classes. The args parameter holds additional values that may be used with the child class methods. This method is called at the start of the output list. 
'; file='/wp-includes/class-wp-walker.php, line: 55'; params='@param string $output Passed by reference. Used to append additional content.  '; since='2.1.0 '; type='method';}, 
	{name='Walker::unset_children'; match='unset_children'; definition='unset_children($e, $children_elements)'; description=''; file='/wp-includes/class-wp-walker.php, line: 381'; type='method';}, 
	{name='Walker::walk'; match='walk'; definition='walk($elements, $max_depth)'; description='Display array of elements hierarchically. 
It is a generic function which does not assume any existing order of elements. max_depth = -1 means flatly display every element. max_depth = 0 means display all levels. max_depth &gt; 0 specifies the number of display levels. 
'; file='/wp-includes/class-wp-walker.php, line: 174'; params='@param array $elements  
@param int $max_depth  '; return='string '; since='2.1.0 '; type='method';}, 
	{name='Walker_Category::end_el'; match='end_el'; definition='end_el($output, $page, $depth, $args)'; description='@see <code>Walker::end_el()</code> '; file='/wp-includes/category-template.php, line: 905'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $page Not used.  
@param int $depth Depth of category. Not used.  
@param array $args Only uses \'list\' for whether should append to output.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Category::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth, $args)'; description='@see <code>Walker::end_lvl()</code> '; file='/wp-includes/category-template.php, line: 813'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of category. Used for tab indentation.  
@param array $args Will only append content if style argument value is \'list\'.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Category::start_el'; match='start_el'; definition='start_el($output, $category, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/category-template.php, line: 830'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $category Category data object.  
@param int $depth Depth of category in reference to parents.  
@param array $args  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Category::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth, $args)'; description='@see <code>Walker::start_lvl()</code> '; file='/wp-includes/category-template.php, line: 797'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of category. Used for tab indentation.  
@param array $args Will only append content if style argument value is \'list\'.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_CategoryDropdown::start_el'; match='start_el'; definition='start_el($output, $category, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/category-template.php, line: 946'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $category Category data object.  
@param int $depth Depth of category. Used for padding.  
@param array $args Uses \'selected\', \'show_count\', and \'show_last_update\' keys, if they exist.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Category_Checklist::end_el'; match='end_el'; definition='end_el($output, $category, $depth, $args)'; description=''; file='/wp-admin/includes/template.php, line: 49'; type='method';}, 
	{name='Walker_Category_Checklist::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth, $args)'; description=''; file='/wp-admin/includes/template.php, line: 30'; type='method';}, 
	{name='Walker_Category_Checklist::start_el'; match='start_el'; definition='start_el($output, $category, $depth, $args)'; description=''; file='/wp-admin/includes/template.php, line: 35'; type='method';}, 
	{name='Walker_Category_Checklist::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth, $args)'; description=''; file='/wp-admin/includes/template.php, line: 25'; type='method';}, 
	{name='Walker_Comment::display_element'; match='display_element'; definition='display_element($element, $children_elements, $max_depth, $depth=0, $args, $output)'; description='This function is designed to enhance <code>Walker::display_element()</code> to display children of higher nesting levels than selected inline on the highest depth level displayed. This prevents them being orphaned at the end of the comment list. 
Example: max_depth = 2, with 5 levels of nested content. 1 1.1 1.1.1 1.1.1.1 1.1.1.1.1 1.1.2 1.1.2.1 2 2.2 '; file='/wp-includes/comment-template.php, line: 1299'; type='method';}, 
	{name='Walker_Comment::end_el'; match='end_el'; definition='end_el($output, $comment, $depth, $args)'; description='@see <code>Walker::end_el()</code> '; file='/wp-includes/comment-template.php, line: 1389'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $comment  
@param int $depth Depth of comment.  
@param array $args  '; since='2.7.0 '; type='method';}, 
	{name='Walker_Comment::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth, $args)'; description='@see <code>Walker::end_lvl()</code> '; file='/wp-includes/comment-template.php, line: 1265'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of comment.  
@param array $args Will only append content if style argument value is \'ol\' or \'ul\'.  '; since='2.7.0 '; type='method';}, 
	{name='Walker_Comment::start_el'; match='start_el'; definition='start_el($output, $comment, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/comment-template.php, line: 1329'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $comment Comment data object.  
@param int $depth Depth of comment in reference to parents.  
@param array $args  '; since='2.7.0 '; type='method';}, 
	{name='Walker_Comment::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth, $args)'; description='@see <code>Walker::start_lvl()</code> '; file='/wp-includes/comment-template.php, line: 1241'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of comment.  
@param array $args Uses \'style\' argument for type of HTML list.  '; since='2.7.0 '; type='method';}, 
	{name='Walker_Nav_Menu::end_el'; match='end_el'; definition='end_el($output, $item, $depth)'; description='@see <code>Walker::end_el()</code> '; file='/wp-includes/nav-menu-template.php, line: 106'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $item Page data object. Not used.  
@param int $depth Depth of page. Not Used.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth)'; description='@see <code>Walker::end_lvl()</code> '; file='/wp-includes/nav-menu-template.php, line: 52'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu::start_el'; match='start_el'; definition='start_el($output, $item, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/nav-menu-template.php, line: 67'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $item Menu item data object.  
@param int $depth Depth of menu item. Used for padding.  
@param int $current_page Menu item ID.  
@param object $args  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth)'; description='@see <code>Walker::start_lvl()</code> '; file='/wp-includes/nav-menu-template.php, line: 40'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Checklist::__construct'; match='__construct'; definition='__construct($fields=false)'; description=''; file='/wp-admin/includes/nav-menu.php, line: 214'; type='method';}, 
	{name='Walker_Nav_Menu_Checklist::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth)'; description='@see <code>Walker::end_lvl()</code> '; file='/wp-admin/includes/nav-menu.php, line: 225'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Checklist::start_el'; match='start_el'; definition='start_el($output, $item, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-admin/includes/nav-menu.php, line: 239'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $item Menu item data object.  
@param int $depth Depth of menu item. Used for padding.  
@param object $args  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Checklist::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth)'; description='@see <code>Walker::start_lvl()</code> '; file='/wp-admin/includes/nav-menu.php, line: 220'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Edit::end_lvl'; match='end_lvl'; definition='end_lvl($output)'; description='@see <code>Walker_Nav_Menu::end_lvl()</code> '; file='/wp-admin/includes/nav-menu.php, line: 25'; params='@param string $output Passed by reference.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Edit::start_el'; match='start_el'; definition='start_el($output, $item, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-admin/includes/nav-menu.php, line: 37'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $item Menu item data object.  
@param int $depth Depth of menu item. Used for padding.  
@param object $args  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Nav_Menu_Edit::start_lvl'; match='start_lvl'; definition='start_lvl($output)'; description='@see <code>Walker_Nav_Menu::start_lvl()</code> '; file='/wp-admin/includes/nav-menu.php, line: 17'; params='@param string $output Passed by reference.  '; since='3.0.0 '; type='method';}, 
	{name='Walker_Page::end_el'; match='end_el'; definition='end_el($output, $page, $depth)'; description='@see <code>Walker::end_el()</code> '; file='/wp-includes/post-template.php, line: 1063'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $page Page data object. Not used.  
@param int $depth Depth of page. Not Used.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Page::end_lvl'; match='end_lvl'; definition='end_lvl($output, $depth)'; description='@see <code>Walker::end_lvl()</code> '; file='/wp-includes/post-template.php, line: 1005'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Page::start_el'; match='start_el'; definition='start_el($output, $page, $depth, $args, $current_page)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/post-template.php, line: 1020'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $page Page data object.  
@param int $depth Depth of page. Used for padding.  
@param int $current_page Page ID.  
@param array $args  '; since='2.1.0 '; type='method';}, 
	{name='Walker_Page::start_lvl'; match='start_lvl'; definition='start_lvl($output, $depth)'; description='@see <code>Walker::start_lvl()</code> '; file='/wp-includes/post-template.php, line: 993'; params='@param string $output Passed by reference. Used to append additional content.  
@param int $depth Depth of page. Used for padding.  '; since='2.1.0 '; type='method';}, 
	{name='Walker_PageDropdown::start_el'; match='start_el'; definition='start_el($output, $page, $depth, $args)'; description='@see <code>Walker::start_el()</code> '; file='/wp-includes/post-template.php, line: 1101'; params='@param string $output Passed by reference. Used to append additional content.  
@param object $page Page data object.  
@param int $depth Depth of page in reference to parent pages. Used for padding.  
@param array $args Uses \'selected\' argument for selected page to set selected HTML attribute for option element.  '; since='2.1.0 '; type='method';}, 
	{name='__'; match='__'; definition='__()'; description=''; file='/wp-admin/load-styles.php, line: 17'; type='function';}, 
	{name='_e'; match='_e'; definition='_e($text, $domain=\'default\')'; description='Displays the returned translated text from translate(). 
@see translate() Echoes returned translate() string '; file='/wp-includes/l10n.php, line: 141'; params='@param string $text Text to translate  
@param string $domain Optional. Domain to retrieve the translated text  '; since='1.2.0 '; type='function';}, 
	{name='absint'; match='absint'; definition='absint($maybeint)'; description='Converts value to nonnegative integer. 
'; file='/wp-includes/functions.php, line: 3311'; params='@param mixed $maybeint Data you wish to have convered to an nonnegative integer  '; return='int An nonnegative integer '; since='2.5.0 '; type='function';}, 
	{name='activate_plugin'; match='activate_plugin'; definition='activate_plugin($plugin, $redirect=\'\', $network_wide=false, $silent=false)'; description='Attempts activation of plugin in a &quot;sandbox&quot; and redirects on success. 
A plugin that is already activated will not attempt to be activated again. 
The way it works is by setting the redirection to the error before trying to include the plugin file. If the plugin fails, then the redirection will not be overwritten with the success message. Also, the options will not be updated and the activation hook will not be called on plugin error. 
It should be noted that in no way the below code will actually prevent errors within the file. The code should not be used elsewhere to replicate the &quot;sandbox&quot;, which uses redirection to work. { 13 1} 
If any errors are found or text is outputted, then it will be captured to ensure that the success redirection will update the error redirection. 
'; file='/wp-admin/includes/plugin.php, line: 501'; params='@param string $plugin Plugin path to main plugin file with plugin data.  
@param string $redirect Optional. URL to redirect to.  
@param bool $network_wide Whether to enable the plugin for all sites in the network or just the current site. Multisite only. Default is false.  
@param bool $silent Prevent calling activation hooks. Optional, default is false.  '; return='WP_Error|null <code>WP_Error</code> on invalid file or null on success. '; since='2.5.0 '; type='function';}, 
	{name='activate_plugins'; match='activate_plugins'; definition='activate_plugins($plugins, $redirect=\'\', $network_wide=false, $silent=false)'; description='Activate multiple plugins. 
When <code>WP_Error</code> is returned, it does not mean that one of the plugins had errors. It means that one or more of the plugins file path was invalid. 
The execution will be halted as soon as one of the plugins has an error. 
'; file='/wp-admin/includes/plugin.php, line: 615'; params='@param string array $plugins  
@param string $redirect Redirect to page after successful activation.  
@param bool $network_wide Whether to enable the plugin for all sites in the network.  
@param bool $silent Prevent calling activation hooks. Default is false.  '; return='bool|WP_Error True when finished or <code>WP_Error</code> if there were errors during a plugin activation. '; since='2.6.0 '; type='function';}, 
	{name='activate_sitewide_plugin'; match='activate_sitewide_plugin'; definition='activate_sitewide_plugin()'; description='@see activate_plugin() '; file='/wp-admin/includes/ms-deprecated.php, line: 45'; type='function';}, 
	{name='add_action'; match='add_action'; definition='add_action($tag, $function_to_add, $priority=10, $accepted_args=1)'; description=''; file='/wp-includes/plugin.php, line: 331'; type='function';}, 
	{name='add_blog_option'; match='add_blog_option'; definition='add_blog_option($id, $key, $value)'; description='Add an option for a particular blog. 
'; file='/wp-includes/ms-blogs.php, line: 387'; params='@param int $id The blog id  
@param string $key The option key  
@param mixed $value The option value  '; since='MU '; type='function';}, 
	{name='add_comment_meta'; match='add_comment_meta'; definition='add_comment_meta($comment_id, $meta_key, $meta_value, $unique=false)'; description='Add meta data field to a comment. 

'; file='/wp-includes/comment.php, line: 510'; params='@param int $comment_id Comment ID.  
@param string $meta_key Metadata name.  
@param mixed $meta_value Metadata value.  
@param bool $unique Optional, default is false. Whether the same key should not be added.  '; return='bool False for failure. True for success. '; since='2.9.0 '; uses='add_metadata '; type='function';}, 
	{name='add_comments_page'; match='add_comments_page'; definition='add_comments_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the comments main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1245'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_contextual_help'; match='add_contextual_help'; definition='add_contextual_help($screen, $help)'; description='Add contextual help text for a page 
'; file='/wp-admin/includes/template.php, line: 1849'; params='@param string $screen The handle for the screen to add help to. This is usually the hook name returned by the add_&lowast;_page() functions.  
@param string $help Arbitrary help text  '; since='2.7.0 '; type='function';}, 
	{name='add_custom_background'; match='add_custom_background'; definition='add_custom_background($header_callback=\'\', $admin_header_callback=\'\', $admin_image_div_callback=\'\')'; description='Add callbacks for background image display. 
The parameter $header_callback callback will be required to display the content for the &apos;wp_head&apos; action. The parameter $admin_header_callback callback will be added to <code>Custom_Background</code> class and that will be added to the &apos;admin_menu&apos; action. 

'; file='/wp-includes/theme.php, line: 1707'; params='@param callback $header_callback Call on \'wp_head\' action.  
@param callback $admin_header_callback Call on custom background administration screen.  
@param callback $admin_image_div_callback Output a custom background image div on the custom background administration screen. Optional.  '; since='3.0.0 '; uses=' Sets up for $admin_header_callback for administration panel display.'; type='function';}, 
	{name='add_custom_image_header'; match='add_custom_image_header'; definition='add_custom_image_header($header_callback, $admin_header_callback, $admin_image_div_callback=\'\')'; description='Add callbacks for image header display. 
The parameter $header_callback callback will be required to display the content for the &apos;wp_head&apos; action. The parameter $admin_header_callback callback will be added to <code>Custom_Image_Header</code> class and that will be added to the &apos;admin_menu&apos; action. 

'; file='/wp-includes/theme.php, line: 1564'; params='@param callback $header_callback Call on \'wp_head\' action.  
@param callback $admin_header_callback Call on custom header administration screen.  
@param callback $admin_image_div_callback Output a custom header image div on the custom header administration screen. Optional.  '; since='2.1.0 '; uses=' Sets up for $admin_header_callback for administration panel display.'; type='function';}, 
	{name='add_dashboard_page'; match='add_dashboard_page'; definition='add_dashboard_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the Dashboard main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1140'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_editor_style'; match='add_editor_style'; definition='add_editor_style($stylesheet=\'editor-style.css\')'; description='Add callback for custom TinyMCE editor stylesheets. 
The parameter $stylesheet is the name of the stylesheet, relative to the theme root. It also accepts an array of stylesheets. It is optional and defaults to &apos;editor-style.css&apos;. 
Supports RTL stylesheets automatically by searching for the -rtl prefix, e.g. editor-style-rtl.css. If an array of stylesheets is passed to add_editor_style(), RTL is only added for the first stylesheet. 
'; file='/wp-includes/theme.php, line: 1807'; params='@param mixed $stylesheet Optional. Stylesheet name or array thereof, relative to theme root. Defaults to \'editor-style.css\'  '; since='3.0.0 '; type='function';}, 
	{name='add_existing_user_to_blog'; match='add_existing_user_to_blog'; definition='add_existing_user_to_blog($details=false)'; description='Add a user to a blog based on details from maybe_add_existing_user_to_blog(). 

'; file='/wp-includes/ms-functions.php, line: 1840'; params='@param array $details  '; since='MU '; uses='add_user_to_blog()'; type='function';}, 
	{name='add_filter'; match='add_filter'; definition='add_filter($tag, $function_to_add, $priority=10, $accepted_args=1)'; description=''; file='/wp-includes/plugin.php, line: 65'; type='function';}, 
	{name='add_image_size'; match='add_image_size'; definition='add_image_size($name, $width=0, $height=0, $crop=false)'; description='Registers a new image size '; file='/wp-includes/media.php, line: 181'; type='function';}, 
	{name='add_js'; match='add_js'; definition='add_js()'; description=''; file='/wp-admin/options-reading.php, line: 24'; type='function';}, 
	{name='add_link'; match='add_link'; definition='add_link()'; description='Add a link to using values provided in $_POST. 
'; file='/wp-admin/includes/bookmark.php, line: 16'; return='int|WP_Error Value 0 or <code>WP_Error</code> on failure. The link ID on success. '; since='2.0.0 '; type='function';}, 
	{name='add_links_page'; match='add_links_page'; definition='add_links_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the links main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1203'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_magic_quotes'; match='add_magic_quotes'; definition='add_magic_quotes($array)'; description='Walks the array while sanitizing the contents. 
'; file='/wp-includes/functions.php, line: 1521'; params='@param array $array Array to used to walk while sanitizing contents.  '; return='array Sanitized $array. '; since='0.71 '; type='function';}, 
	{name='add_management_page'; match='add_management_page'; definition='add_management_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the tools main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1032'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_media_page'; match='add_media_page'; definition='add_media_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the media main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1182'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_menu_page'; match='add_menu_page'; definition='add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\', $icon_url=\'\', $position=NULL)'; description='Add a top level menu page 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 866'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page.  
@param string $icon_url The url to the icon to be used for this menu  
@param int $position The position in the menu order this one should appear '; return='string The resulting page&apos;s hook_suffix '; type='function';}, 
	{name='add_meta'; match='add_meta'; definition='add_meta($post_ID)'; description='{ '; file='/wp-admin/includes/post.php, line: 664'; type='function';}, 
	{name='add_meta_box'; match='add_meta_box'; definition='add_meta_box($id, $title, $callback, $page, $context=\'advanced\', $priority=\'default\', $callback_args=null)'; description='Add a meta box to an edit form. 
'; file='/wp-admin/includes/template.php, line: 872'; params='@param string $id String for use in the \'id\' attribute of tags.  
@param string $title Title of the meta box.  
@param string $callback Function that fills the box with the desired content. The function should echo its output.  
@param string $page The type of edit page on which to show the box (post, page, link).  
@param string $context The context within the page where the boxes should show (\'normal\', \'advanced\').  
@param string $priority The priority within the context where the boxes should show (\'high\', \'low\').  '; since='2.5.0 '; type='function';}, 
	{name='add_metadata'; match='add_metadata'; definition='add_metadata($meta_type, $object_id, $meta_key, $meta_value, $unique=false)'; description='Add metadata for the specified object. 

'; file='/wp-includes/meta.php, line: 31'; params='@param string $meta_type Type of object metadata is for (e.g., comment, post, or user)  
@param int $object_id ID of the object metadata is for  
@param string $meta_key Metadata key  
@param string $meta_value Metadata value  
@param bool $unique Optional, default is false. Whether the specified metadata key should be unique for the object. If true, and the object already has a value for the specified metadata key, no change will be made  '; return='bool True on successful update, false on failure. '; since='2.9.0 '; uses='$wpdb WordPress database object for queries. 
do_action() Calls \'added_{$meta_type}_meta\' with meta_id of added metadata entry, object ID, meta key, and meta value'; type='function';}, 
	{name='add_new_user_to_blog'; match='add_new_user_to_blog'; definition='add_new_user_to_blog($user_id, $email, $meta)'; description='Add a newly created user to the appropriate blog 
'; file='/wp-includes/ms-functions.php, line: 1859'; params='@param int $user_id  
@param string $email  
@param array $meta  '; since='MU '; type='function';}, 
	{name='add_object_page'; match='add_object_page'; definition='add_object_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\', $icon_url=\'\')'; description='Add a top level menu page in the &apos;objects&apos; section 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 916'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page.  
@param string $icon_url The url to the icon to be used for this menu '; return='string The resulting page&apos;s hook_suffix '; type='function';}, 
	{name='add_option'; match='add_option'; definition='add_option($option, $value=\'\', $deprecated=\'\', $autoload=\'yes\')'; description=''; file='/wp-includes/functions.php, line: 591'; type='function';}, 
	{name='add_option_update_handler'; match='add_option_update_handler'; definition='add_option_update_handler($option_group, $option_name, $sanitize_callback=\'\')'; description='Register a setting and its sanitization callback 
@see register_setting() '; file='/wp-admin/includes/deprecated.php, line: 142'; params='@param string $option_group A settings group name. Should correspond to a whitelisted option key name. Default whitelisted option key names include \"general,\" \"discussion,\" and \"reading,\" among others.  
@param string $option_name The name of an option to sanitize and save.  
@param unknown_type $sanitize_callback A callback function that sanitizes the option\'s value.  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='add_option_whitelist'; match='add_option_whitelist'; definition='add_option_whitelist($new_options, $options=\'\')'; description='{ '; file='/wp-admin/includes/plugin.php, line: 1663'; type='function';}, 
	{name='add_options_page'; match='add_options_page'; definition='add_options_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the options main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1053'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_pages_page'; match='add_pages_page'; definition='add_pages_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the pages main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1224'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_ping'; match='add_ping'; definition='add_ping($post_id, $uri)'; description='Add a URL to those already pung. 

'; file='/wp-includes/post.php, line: 3004'; params='@param int $post_id Post ID.  
@param string $uri Ping URI.  '; return='int How many rows were updated. '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='add_plugins_page'; match='add_plugins_page'; definition='add_plugins_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the plugins main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1095'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_post_meta'; match='add_post_meta'; definition='add_post_meta($post_id, $meta_key, $meta_value, $unique=false)'; description='Add meta data field to a post. 
Post meta data is called &quot;Custom Fields&quot; on the Administration Screen. 

'; file='/wp-includes/post.php, line: 1413'; params='@param int $post_id Post ID.  
@param string $meta_key Metadata name.  
@param mixed $meta_value Metadata value.  
@param bool $unique Optional, default is false. Whether the same key should not be added.  '; return='bool False for failure. True for success. '; since='1.5.0 '; uses='$wpdb '; type='function';}, 
	{name='add_post_type_support'; match='add_post_type_support'; definition='add_post_type_support($post_type, $feature)'; description='Register support of certain features for a post type. 
All features are directly associated with a functional area of the edit screen, such as the editor or a meta box: &apos;title&apos;, &apos;editor&apos;, &apos;comments&apos;, &apos;revisions&apos;, &apos;trackbacks&apos;, &apos;author&apos;, &apos;excerpt&apos;, &apos;page-attributes&apos;, &apos;thumbnail&apos;, and &apos;custom-fields&apos;. 
Additionally, the &apos;revisions&apos; feature dictates whether the post type will store revisions, and the &apos;comments&apos; feature dicates whether the comments count will show on the edit screen. 
'; file='/wp-includes/post.php, line: 1255'; params='@param string $post_type The post type for which to add the feature  
@param string array $feature the feature being added, can be an array of feature strings or a single string  '; since='3.0.0 '; type='function';}, 
	{name='add_posts_page'; match='add_posts_page'; definition='add_posts_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the posts main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1161'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_query_arg'; match='add_query_arg'; definition='add_query_arg()'; description='Retrieve a modified URL query string. 
You can rebuild the URL and append a new query variable to the URL query by using this function. You can also retrieve the full URL with query data. 
Adding a single key &amp; value or an associative array. Setting a key value to emptystring removes the key. Omitting oldquery_or_uri uses the $_SERVER value. 
'; file='/wp-includes/functions.php, line: 1430'; params='@param mixed $param1 Either newkey or an associative_array  
@param mixed $param2 Either newvalue or oldquery or uri  
@param mixed $param3 Optional. Old query or uri  '; return='string New URL query string. '; since='1.5.0 '; type='function';}, 
	{name='add_role'; match='add_role'; definition='add_role($role, $display_name, $capabilities=array())'; description='Add role, if it does not exist. 
@see <code>WP_Roles::add_role()</code> Uses method to add role. '; file='/wp-includes/capabilities.php, line: 1152'; params='@param string $role Role name.  
@param string $display_name Display name for role.  
@param array $capabilities List of capabilities, e.g. array( \'edit_posts\' => true, \'delete_posts\' => false );  '; return='null|WP_Role <code>WP_Role</code> object if role is added, null if already exists. '; since='2.0.0 '; type='function';}, 
	{name='add_screen_option'; match='add_screen_option'; definition='add_screen_option($option, $args=array())'; description='Register and configure an admin screen option 
'; file='/wp-admin/includes/template.php, line: 1906'; params='@param string $option An option name.  
@param mixed $args Option dependent arguments  '; return='void '; since='3.1.0 '; type='function';}, 
	{name='add_settings_error'; match='add_settings_error'; definition='add_settings_error($setting, $code, $message, $type=\'error\')'; description='Register a settings error to be displayed to the user 
Part of the Settings API. Use this to show messages to users about settings validation problems, missing settings or anything else. 
Settings errors should be added inside the $sanitize_callback function defined in register_setting() for a given setting to give feedback about the submission. 
By default messages will show immediately after the submission that generated the error. Additional calls to settings_errors() can be used to show errors even when the settings page is first accessed. 

) '; file='/wp-admin/includes/template.php, line: 1231'; params='@param string $setting Slug title of the setting to which this error applies  
@param string $code Slug-name to identify the error. Used as part of \'id\' attribute in HTML output.  
@param string $message The formatted message text to display to the user (will be shown inside styled and  
@param string $type The type of message it is, controls HTML class. Use \'error\' or \'updated\'.  '; since='3.0.0 '; type='function';}, 
	{name='add_settings_field'; match='add_settings_field'; definition='add_settings_field($id, $title, $callback, $page, $section=\'default\', $args=array())'; description='Add a new field to a section of a settings page 
Part of the Settings API. Use this to define a settings field that will show as part of a settings section inside a settings page. The fields are shown using do_settings_fields() in do_settings-sections() 
The $callback argument should be the name of a function that echoes out the html input tags for this setting field. Use get_option() to retrive existing values to show. 

'; file='/wp-admin/includes/template.php, line: 1128'; params='@param string $id Slug-name to identify the field. Used in the \'id\' attribute of tags.  
@param string $title Formatted title of the field. Shown as the label for the field during output.  
@param string $callback Function that fills the field with the desired form inputs. The function should echo its output.  
@param string $page The slug-name of the settings page on which to show the section (general, reading, writing, ...).  
@param string $section The slug-name of the section of the settingss page in which to show the box (default, ...).  
@param array $args Additional arguments  '; since='2.7.0 '; type='function';}, 
	{name='add_settings_section'; match='add_settings_section'; definition='add_settings_section($id, $title, $callback, $page)'; description='Add a new section to a settings page. 
Part of the Settings API. Use this to define new settings sections for an admin page. Show settings sections in your admin page callback function with do_settings_sections(). Add settings fields to your section with add_settings_field() 
The $callback argument should be the name of a function that echoes out any content you want to show at the top of the settings section before the actual fields. It can output nothing if you want. 

'; file='/wp-admin/includes/template.php, line: 1088'; params='@param string $id Slug-name to identify the section. Used in the \'id\' attribute of tags.  
@param string $title Formatted title of the section. Shown as the heading for the section.  
@param string $callback Function that echos out any content at the top of the section (between heading and fields).  
@param string $page The slug-name of the settings page on which to show the section. Built-in pages include \'general\', \'reading\', \'writing\', \'discussion\', \'media\', etc. Create your own using add_options_page();  '; since='2.7.0 '; type='function';}, 
	{name='add_shortcode'; match='add_shortcode'; definition='add_shortcode($tag, $func)'; description='Add hook for shortcode tag. 
There can only be one hook for each shortcode. Which means that if another plugin has a similar shortcode, it will override yours or yours will override theirs depending on which order the plugins are included and/or ran. 
Simplest example of a shortcode tag using the API: 
// [footag foo=&quot;bar&quot;] function footag_func($atts) { return &quot;foo = {$atts[foo]}&quot;; } add_shortcode(&apos;footag&apos;, &apos;footag_func&apos;); 
Example with nice attribute defaults: 
// [bartag foo=&quot;bar&quot;] function bartag_func($atts) { extract(shortcode_atts(array( &apos;foo&apos; =&gt; &apos;no foo&apos;, &apos;baz&apos; =&gt; &apos;default baz&apos;, ), $atts)); 
return &quot;foo = {$foo}&quot;; } add_shortcode(&apos;bartag&apos;, &apos;bartag_func&apos;); 
Example with enclosed content: 
// [baztag]content[/baztag] function baztag_func($atts, $content=&apos;&apos;) { return &quot;content = $content&quot;; } add_shortcode(&apos;baztag&apos;, &apos;baztag_func&apos;); 

'; file='/wp-includes/shortcodes.php, line: 93'; params='@param string $tag Shortcode tag to be searched in post content.  
@param callable $func Hook to run when shortcode is found.  '; since='2.5 '; uses='$shortcode_tags'; type='function';}, 
	{name='add_site_option'; match='add_site_option'; definition='add_site_option($option, $value)'; description=''; file='/wp-includes/functions.php, line: 3772'; type='function';}, 
	{name='add_submenu_page'; match='add_submenu_page'; definition='add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add a sub menu page 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 968'; params='@param string $parent_slug The slug name for the parent menu (or the file name of a standard WordPress admin page)  
@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_theme_page'; match='add_theme_page'; definition='add_theme_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the themes main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1074'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_theme_support'; match='add_theme_support'; definition='add_theme_support($feature)'; description='Allows a theme to register its support of a certain feature 
Must be called in the theme&apos;s functions.php file to work. If attached to a hook, it must be after_setup_theme. The init hook may be too late for some features. 
'; file='/wp-includes/theme.php, line: 1851'; params='@param string $feature the feature being added  '; since='2.9.0 '; type='function';}, 
	{name='add_thickbox'; match='add_thickbox'; definition='add_thickbox()'; description='Enqueues the default ThickBox js and css. 
If any of the settings need to be changed, this can be done with another js file similar to media-upload.js and theme-preview.js. That file should require array(&apos;thickbox&apos;) to ensure it is loaded after. 
'; file='/wp-includes/general-template.php, line: 2155'; since='2.5.0 '; type='function';}, 
	{name='add_user'; match='add_user'; definition='add_user()'; description='Creates a new user from the &quot;Users&quot; form using $_POST information. 
It seems that the first half is for backwards compatibility, but only has the ability to alter the user&apos;s role. WordPress core seems to use this function only in the second way, running edit_user() with no id so as to create a new user. 
'; file='/wp-admin/includes/user.php, line: 22'; params='@param int $user_id Optional. User ID.  '; return='null|WP_Error|int Null when adding user, <code>WP_Error</code> or User ID integer when no parameters. '; since='2.0 '; type='function';}, 
	{name='add_user_meta'; match='add_user_meta'; definition='add_user_meta($user_id, $meta_key, $meta_value, $unique=false)'; description='Add meta data field to a user. 
Post meta data is called &quot;Custom Fields&quot; on the Administration Screens. 

'; file='/wp-includes/user.php, line: 758'; params='@param int $user_id Post ID.  
@param string $meta_key Metadata name.  
@param mixed $meta_value Metadata value.  
@param bool $unique Optional, default is false. Whether the same key should not be added.  '; return='bool False for failure. True for success. '; since='3.0.0 '; uses='add_metadata() '; type='function';}, 
	{name='add_user_to_blog'; match='add_user_to_blog'; definition='add_user_to_blog($blog_id, $user_id, $role)'; description='Add a user to a blog. 
Use the &apos;add_user_to_blog&apos; action to fire an event when users are added to a blog. 
'; file='/wp-includes/ms-functions.php, line: 207'; params='@param int $blog_id ID of the blog you\'re adding the user to.  
@param int $user_id ID of the user you\'re adding.  
@param string $role The role you want the user to have  '; return='bool '; since='MU 1.0 '; type='function';}, 
	{name='add_users_page'; match='add_users_page'; definition='add_users_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\')'; description='Add sub menu page to the Users/Profile main menu. 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 1116'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page. '; return='string|bool The resulting page&apos;s hook_suffix, or false if the user does not have the capability required. '; type='function';}, 
	{name='add_utility_page'; match='add_utility_page'; definition='add_utility_page($page_title, $menu_title, $capability, $menu_slug, $function=\'\', $icon_url=\'\')'; description='Add a top level menu page in the &apos;utility&apos; section 
This function takes a capability which will be used to determine whether or not a page is included in the menu. 
The function which is hooked in to handle the output of the page must check that the user has the required capability as well. 
'; file='/wp-admin/includes/plugin.php, line: 942'; params='@param string $page_title The text to be displayed in the title tags of the page when the menu is selected  
@param string $menu_title The text to be used for the menu  
@param string $capability The capability required for this menu to be displayed to the user.  
@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param callback $function The function to be called to output the content for this page.  
@param string $icon_url The url to the icon to be used for this menu '; return='string The resulting page&apos;s hook_suffix '; type='function';}, 
	{name='addslashes_gpc'; match='addslashes_gpc'; definition='addslashes_gpc($gpc)'; description='Adds slashes to escape strings. 
Slashes will first be removed if magic_quotes_gpc is set, see <code>http://www.php.net/magic_quotes</code> for more details. 
'; file='/wp-includes/formatting.php, line: 1215'; params='@param string $gpc The string returned from HTTP request data.  '; return='string Returns a string escaped with slashes. '; since='0.71 '; type='function';}, 
	{name='adjacent_image_link'; match='adjacent_image_link'; definition='adjacent_image_link($prev=true, $size=\'thumbnail\', $text=false)'; description='Display next or previous image link that has the same post parent. 
Retrieves the current attachment object from the $post global. 
'; file='/wp-includes/media.php, line: 911'; params='@param bool $prev Optional. Default is true to display previous link, true for next.  '; since='2.5.0 '; type='function';}, 
	{name='adjacent_post_link'; match='adjacent_post_link'; definition='adjacent_post_link($format, $link, $in_same_cat=false, $excluded_categories=\'\', $previous=true)'; description='Display adjacent post link. 
Can be either next post link or previous. 
'; file='/wp-includes/link-template.php, line: 1443'; params='@param string $format Link anchor format.  
@param string $link Link permalink format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  
@param bool $previous Optional, default is true. Whether display link to previous post.  '; since='2.5.0 '; type='function';}, 
	{name='adjacent_posts_rel_link'; match='adjacent_posts_rel_link'; definition='adjacent_posts_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display relational links for the posts adjacent to the current post. 
'; file='/wp-includes/link-template.php, line: 1202'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='2.8.0 '; type='function';}, 
	{name='adjacent_posts_rel_link_wp_head'; match='adjacent_posts_rel_link_wp_head'; definition='adjacent_posts_rel_link_wp_head()'; description='Display relational links for the posts adjacent to the current post for single post pages. 
This is meant to be attached to actions like &apos;wp_head&apos;. Do not call this directly in plugins or theme templates. '; file='/wp-includes/link-template.php, line: 1214'; since='3.0.0 '; type='function';}, 
	{name='admin_color_scheme_picker'; match='admin_color_scheme_picker'; definition='admin_color_scheme_picker()'; description='Display the default admin color scheme picker (Used in user-edit.php) 
'; file='/wp-admin/includes/misc.php, line: 565'; since='3.0.0 '; type='function';}, 
	{name='admin_url'; match='admin_url'; definition='admin_url()'; description=''; file='/wp-admin/load-styles.php, line: 78'; type='function';}, 
	{name='allow_subdirectory_install'; match='allow_subdirectory_install'; definition='allow_subdirectory_install()'; description='Allow subdirectory install 
'; file='/wp-admin/network.php, line: 66'; return='bool Whether subdirectory install is allowed '; since='3.0.0 '; type='function';}, 
	{name='allow_subdomain_install'; match='allow_subdomain_install'; definition='allow_subdomain_install()'; description='Allow subdomain install 
'; file='/wp-admin/network.php, line: 53'; return='bool Whether subdomain install is allowed '; since='3.0.0 '; type='function';}, 
	{name='allowed_tags'; match='allowed_tags'; definition='allowed_tags()'; description='Display all of the allowed tags in HTML format with attributes. 
This is useful for displaying in the comment area, which elements and attributes are supported. As well as any plugins which want to display it. 

'; file='/wp-includes/general-template.php, line: 1301'; return='string HTML allowed tags entity encoded. '; since='1.0.1 '; uses='$allowedtags'; type='function';}, 
	{name='antispambot'; match='antispambot'; definition='antispambot($emailaddy, $mailto=0)'; description='Converts email addresses characters to HTML entities to block spam bots. 
'; file='/wp-includes/formatting.php, line: 1273'; params='@param string $emailaddy Email address.  
@param int $mailto Optional. Range from 0 to 1. Used for encoding.  '; return='string Converted email address. '; since='0.71 '; type='function';}, 
	{name='apache_mod_loaded'; match='apache_mod_loaded'; definition='apache_mod_loaded($mod, $default=false)'; description='Does the specified module exist in the apache config? 
'; file='/wp-includes/functions.php, line: 3527'; params='@param string $mod e.g. mod_rewrite  
@param bool $default The default return value if the module is not found  '; return='bool '; since='2.5.0 '; type='function';}, 
	{name='apply_filters'; match='apply_filters'; definition='apply_filters($tag, $value)'; description=''; file='/wp-includes/plugin.php, line: 134'; type='function';}, 
	{name='apply_filters_ref_array'; match='apply_filters_ref_array'; definition='apply_filters_ref_array($tag, $args)'; description=''; file='/wp-includes/plugin.php, line: 197'; type='function';}, 
	{name='array Stores the default attributes to be stripped by SimplePie::strip_attributes'; match='strip_attributes'; definition='strip_attributes($attribs=array(\'bgsound\', \'class\', \'expr\', \'id\', \'style\', \'onclick\', \'onerror\', \'onfinish\', \'onmouseover\', \'onmouseout\', \'onfocus\', \'onblur\', \'lowsrc\', \'dynsrc\'))'; description='@see <code>SimplePie::strip_attributes()</code> '; file='/wp-includes/class-simplepie.php, line: 14772'; type='method';}, 
	{name='array Stores the default tags to be stripped by SimplePie::strip_htmltags'; match='strip_htmltags'; definition='strip_htmltags($tags=array(\'base\', \'blink\', \'body\', \'doctype\', \'embed\', \'font\', \'form\', \'frame\', \'frameset\', \'html\', \'iframe\', \'input\', \'marquee\', \'meta\', \'noscript\', \'object\', \'param\', \'script\', \'style\'))'; description='@see <code>SimplePie::strip_htmltags()</code> '; file='/wp-includes/class-simplepie.php, line: 14748'; type='method';}, 
	{name='atom_enclosure'; match='atom_enclosure'; definition='atom_enclosure()'; description=''; file='/wp-includes/feed.php, line: 419'; type='function';}, 
	{name='attribute_escape'; match='attribute_escape'; definition='attribute_escape($text)'; description='Escaping for HTML attributes. 
@see esc_attr() '; file='/wp-includes/deprecated.php, line: 2144'; params='@param string $text  '; return='string '; since='2.0.6 '; type='function';}, 
	{name='auth_redirect'; match='auth_redirect'; definition='auth_redirect()'; description='Checks if a user is logged in, if not it redirects them to the login page. 
'; file='/wp-includes/pluggable.php, line: 799'; since='1.5 '; type='function';}, 
	{name='author_can'; match='author_can'; definition='author_can($post, $capability)'; description='Whether author of supplied post has capability or role. 
'; file='/wp-includes/capabilities.php, line: 1086'; params='@param int object $post Post ID or post object.  
@param string $capability Capability or role name.  '; return='bool '; since='2.9.0 '; type='function';}, 
	{name='automatic_feed_links'; match='automatic_feed_links'; definition='automatic_feed_links($add=true)'; description='Enable/disable automatic general feed link outputting. 

'; file='/wp-includes/deprecated.php, line: 2452'; params='@param boolean $add Optional, default is true. Add or remove links. Defaults to true.  '; since='2.8.0 '; type='function';}, 
	{name='avoid_blog_page_permalink_collision'; match='avoid_blog_page_permalink_collision'; definition='avoid_blog_page_permalink_collision($data, $postarr)'; description=''; file='/wp-admin/includes/ms.php, line: 605'; type='function';}, 
	{name='background_color'; match='background_color'; definition='background_color()'; description='Display background color value. 
'; file='/wp-includes/theme.php, line: 1688'; since='3.0.0 '; type='function';}, 
	{name='background_image'; match='background_image'; definition='background_image()'; description='Display background image path. 
'; file='/wp-includes/theme.php, line: 1665'; since='3.0.0 '; type='function';}, 
	{name='backslashit'; match='backslashit'; definition='backslashit($string)'; description='Adds backslashes before letters and before a number at the start of a string. 
'; file='/wp-includes/formatting.php, line: 1164'; params='@param string $string Value to which backslashes will be added.  '; return='string String with backslashes inserted. '; since='0.71 '; type='function';}, 
	{name='balanceTags'; match='balanceTags'; definition='balanceTags($text, $force=false)'; description='Will only balance the tags if forced to and the option is set to balance tags. 
The option &apos;use_balanceTags&apos; is used for whether the tags will be balanced. Both the $force parameter and &apos;use_balanceTags&apos; option will have to be true before the tags will be balanced. 
'; file='/wp-includes/formatting.php, line: 976'; params='@param string $text Text to be balanced  
@param bool $force Forces balancing, ignoring the value of the option. Default false.  '; return='string Balanced text '; since='0.71 '; type='function';}, 
	{name='before_last_bar'; match='before_last_bar'; definition='before_last_bar($string)'; description=''; file='/wp-includes/l10n.php, line: 72'; type='function';}, 
	{name='bloginfo'; match='bloginfo'; definition='bloginfo($show=\'\')'; description='Display information about the blog. 
@see get_bloginfo() For possible values for the parameter. '; file='/wp-includes/general-template.php, line: 371'; params='@param string $show What to display.  '; since='0.71 '; type='function';}, 
	{name='bloginfo_rss'; match='bloginfo_rss'; definition='bloginfo_rss($show=\'\')'; description=''; file='/wp-includes/feed.php, line: 48'; type='function';}, 
	{name='body_class'; match='body_class'; definition='body_class($class=\'\')'; description='Display the classes for the body element. 
'; file='/wp-includes/post-template.php, line: 388'; params='@param string array $class One or more classes to add to the class list.  '; since='2.8.0 '; type='function';}, 
	{name='bool_from_yn'; match='bool_from_yn'; definition='bool_from_yn($yn)'; description='Whether input is yes or no. Must be &apos;y&apos; to be true. 
'; file='/wp-includes/functions.php, line: 1751'; params='@param string $yn Character string containing either \'y\' or \'n\'  '; return='bool True if yes, false on anything else '; since='1.0.0 '; type='function';}, 
	{name='build_query'; match='build_query'; definition='build_query($data)'; description='Build URL query based on an associative and, or indexed array. 
This is a convenient function for easily building url queries. It sets the separator to &apos;&amp;&apos; and uses _http_build_query() function. 
@see _http_build_query() Used to build the query <code>more on what http_build_query() does. 2.3.0 array $data URL-encode key/value pairs. string URL encoded string </code> '; file='/wp-includes/functions.php, line: 1379'; type='function';}, 
	{name='bulk_edit_posts'; match='bulk_edit_posts'; definition='bulk_edit_posts($post_data=null)'; description='Process the post data for the bulk editing of posts. 
Updates all bulk edited posts/pages, adding (but not removing) tags and categories. Skips pages when they would be their own parent or child. 
'; file='/wp-admin/includes/post.php, line: 269'; params='@param array $post_data Optional, the array of post data to process if not provided will use $_POST superglobal.  '; return='array '; since='2.7.0 '; type='function';}, 
	{name='cache_javascript_headers'; match='cache_javascript_headers'; definition='cache_javascript_headers()'; description='Set the headers for caching for 10 days with JavaScript content type. 
'; file='/wp-includes/functions.php, line: 1724'; since='2.1.0 '; type='function';}, 
	{name='cache_users'; match='cache_users'; definition='cache_users($users)'; description='Retrieve info for user lists to prevent multiple queries by get_userdata() 
'; file='/wp-includes/pluggable.php, line: 135'; params='@param array $users User ID numbers list  '; since='3.0.0 '; type='function';}, 
	{name='calendar_week_mod'; match='calendar_week_mod'; definition='calendar_week_mod($num)'; description='Get number of days since the start of the week. 
'; file='/wp-includes/general-template.php, line: 1059'; params='@param int $num Number of day.  '; return='int Days since the start of the week. '; since='1.5.0 get_calendar() '; type='function';}, 
	{name='can_edit_network'; match='can_edit_network'; definition='can_edit_network($site_id)'; description='Whether or not we can edit this network from this page 
By default editing of network is restricted to the Network Admin for that site_id this allows for this to be overridden 
'; file='/wp-admin/includes/ms.php, line: 750'; params='@param integer $site_id The network/site id to check.  '; since='3.1.0 '; type='function';}, 
	{name='cancel_comment_reply_link'; match='cancel_comment_reply_link'; definition='cancel_comment_reply_link($text=\'\')'; description='Display HTML content for cancel comment reply link. 
'; file='/wp-includes/comment-template.php, line: 1154'; params='@param string $text Optional. Text to display for cancel reply link.  '; since='2.7.0 '; type='function';}, 
	{name='capital_P_dangit'; match='capital_P_dangit'; definition='capital_P_dangit($text)'; description='Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence). 
Violating our coding standards for a good function name. 
'; file='/wp-includes/formatting.php, line: 2898'; since='3.0.0 '; type='function';}, 
	{name='cat_is_ancestor_of'; match='cat_is_ancestor_of'; definition='cat_is_ancestor_of($cat1, $cat2)'; description='Check if a category is an ancestor of another category. 
You can use either an id or the category object for both parameters. If you use an integer the category will be retrieved. 
'; file='/wp-includes/category.php, line: 209'; params='@param int object $cat1 ID or object to check if this is the parent category.  
@param int object $cat2 The child category.  '; return='bool Whether $cat2 is child of $cat1 '; since='2.1.0 '; type='function';}, 
	{name='category_description'; match='category_description'; definition='category_description($category=0)'; description='Retrieve category description. 
'; file='/wp-includes/category-template.php, line: 262'; params='@param int $category Optional. Category ID. Will use global category ID by default.  '; return='string Category description, available. '; since='1.0.0 '; type='function';}, 
	{name='category_exists'; match='category_exists'; definition='category_exists($cat_name, $parent=0)'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 21'; type='function';}, 
	{name='check_admin_referer'; match='check_admin_referer'; definition='check_admin_referer($action=-1, $query_arg=\'_wpnonce\')'; description='Makes sure that a user was referred from another admin page. 
To avoid security exploits. 

'; file='/wp-includes/pluggable.php, line: 868'; params='@param string $action Action nonce  
@param string $query_arg where to look for nonce in $_REQUEST (since 2.5)  '; since='1.2.0 '; uses='do_action() Calls \'check_admin_referer\' on $action.'; type='function';}, 
	{name='check_ajax_referer'; match='check_ajax_referer'; definition='check_ajax_referer($action=-1, $query_arg=false, $die=true)'; description='Verifies the AJAX request to prevent processing requests external of the blog. 
'; file='/wp-includes/pluggable.php, line: 892'; params='@param string $action Action nonce  
@param string $query_arg where to look for nonce in $_REQUEST (since 2.5)  '; since='2.0.3 '; type='function';}, 
	{name='check_and_publish_future_post'; match='check_and_publish_future_post'; definition='check_and_publish_future_post($post_id)'; description='Publish future post and make sure post ID has future post status. 
Invoked by cron &apos;publish_future_post&apos; event. This safeguard prevents cron from publishing drafts, etc. 
'; file='/wp-includes/post.php, line: 2764'; params='@param int $post_id Post ID.  '; return='null Nothing is returned. Which can mean that no action is required or post was published. '; since='2.5.0 '; type='function';}, 
	{name='check_comment'; match='check_comment'; definition='check_comment($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type)'; description='Checks whether a comment passes internal checks to be allowed to add. 
If comment moderation is set in the administration, then all comments, regardless of their type and whitelist will be set to false. If the number of links exceeds the amount in the administration, then the check fails. If any of the parameter contents match the blacklist of words, then the check fails. 
If the number of links exceeds the amount in the administration, then the check fails. If any of the parameter contents match the blacklist of words, then the check fails. 
If the comment author was approved before, then the comment is automatically whitelisted. 
If none of the checks fail, then the failback is to set the check to pass (return true). 

'; file='/wp-includes/comment.php, line: 41'; params='@param string $author Comment Author\'s name  
@param string $email Comment Author\'s email  
@param string $url Comment Author\'s URL  
@param string $comment Comment contents  
@param string $user_ip Comment Author\'s IP address  
@param string $user_agent Comment Author\'s User Agent  
@param string $comment_type Comment type, either user submitted comment, trackback, or pingback  '; return='bool Whether the checks passed (true) and the comments should be displayed or set to moderated '; since='1.2.0 '; uses='$wpdb'; type='function';}, 
	{name='check_comment_flood_db'; match='check_comment_flood_db'; definition='check_comment_flood_db($ip, $email, $date)'; description='Check whether comment flooding is occurring. 
Won&apos;t run, if current user can manage options, so to not block administrators. 

'; file='/wp-includes/comment.php, line: 675'; params='@param string $ip Comment IP.  
@param string $email Comment author email address.  
@param string $date MySQL time string.  '; since='2.3.0 '; uses='$wpdb 
apply_filters() Calls \'comment_flood_filter\' filter with first parameter false, last comment timestamp, new comment timestamp. 
do_action() Calls \'comment_flood_trigger\' action with parameters with last comment timestamp and new comment timestamp.'; type='function';}, 
	{name='check_import_new_users'; match='check_import_new_users'; definition='check_import_new_users($permission)'; description=''; file='/wp-admin/includes/ms.php, line: 535'; type='function';}, 
	{name='check_password_reset_key'; match='check_password_reset_key'; definition='check_password_reset_key($key, $login)'; description='Retrieves a user row based on password reset key and login 

'; file='/wp-login.php, line: 249'; params='@param string $key Hash to validate sending user\'s password  
@param string $login The user login '; return='object|WP_Error '; uses='$wpdb WordPress Database object'; type='function';}, 
	{name='check_upload_mimes'; match='check_upload_mimes'; definition='check_upload_mimes($mimes)'; description='Check an array of MIME types against a whitelist. 
WordPress ships with a set of allowed upload filetypes, which is defined in wp-includes/functions.php in get_allowed_mime_types(). This function is used to filter that list against the filetype whitelist provided by Multisite Super Admins at wp-admin/network/settings.php. 
'; file='/wp-includes/ms-functions.php, line: 1593'; params='@param array $mimes  '; return='array '; since='MU '; type='function';}, 
	{name='check_upload_size'; match='check_upload_size'; definition='check_upload_size($file)'; description='Determine if uploaded file exceeds space quota. 
'; file='/wp-admin/includes/ms.php, line: 18'; params='@param array $file $_FILES array for a given file.  '; return='array $_FILES array with &apos;error&apos; key set if file exceeds quota. &apos;error&apos; is empty otherwise. '; since='3.0.0 '; type='function';}, 
	{name='checked'; match='checked'; definition='checked($checked, $current=true, $echo=true)'; description='Outputs the html checked attribute. 
Compares the first two arguments and if identical marks as checked 
'; file='/wp-includes/general-template.php, line: 2265'; params='@param mixed $checked One of the values to compare  
@param mixed $current (true) The other value to compare if not just true  
@param bool $echo Whether to echo or just return the string  '; return='string html attribute or empty string '; since='1.0.0 '; type='function';}, 
	{name='choose_primary_blog'; match='choose_primary_blog'; definition='choose_primary_blog()'; description=''; file='/wp-admin/includes/ms.php, line: 628'; type='function';}, 
	{name='clean_attachment_cache'; match='clean_attachment_cache'; definition='clean_attachment_cache($id, $clean_terms=false)'; description=''; file='/wp-includes/post.php, line: 4485'; type='function';}, 
	{name='clean_bookmark_cache'; match='clean_bookmark_cache'; definition='clean_bookmark_cache($bookmark_id)'; description='Deletes bookmark cache 
'; file='/wp-includes/bookmark.php, line: 375'; since='2.7.0 '; uses='wp_cache_delete() Deletes the contents of \'get_bookmarks\' '; type='function';}, 
	{name='clean_category_cache'; match='clean_category_cache'; definition='clean_category_cache($id)'; description='Remove the category cache data based on ID. 

'; file='/wp-includes/category.php, line: 316'; params='@param int $id Category ID  '; since='2.1.0 '; uses='clean_term_cache() Clears the cache for the category based on ID'; type='function';}, 
	{name='clean_comment_cache'; match='clean_comment_cache'; definition='clean_comment_cache($ids)'; description=''; file='/wp-includes/comment.php, line: 1926'; type='function';}, 
	{name='clean_object_term_cache'; match='clean_object_term_cache'; definition='clean_object_term_cache($object_ids, $object_type)'; description=''; file='/wp-includes/taxonomy.php, line: 2482'; type='function';}, 
	{name='clean_page_cache'; match='clean_page_cache'; definition='clean_page_cache($id)'; description=''; file='/wp-includes/post.php, line: 4387'; type='function';}, 
	{name='clean_post_cache'; match='clean_post_cache'; definition='clean_post_cache($id)'; description=''; file='/wp-includes/post.php, line: 4325'; type='function';}, 
	{name='clean_pre'; match='clean_pre'; definition='clean_pre($matches)'; description='Accepts matches array from preg_replace_callback in wpautop() or a string. 
Ensures that the contents of a &lt; &gt;...&lt; &gt; HTML block are not converted into paragraphs or line-breaks. 
'; file='/wp-includes/formatting.php, line: 143'; params='@param array string $matches The array or string  '; return='string The pre block without paragraph/line-break conversion. '; since='1.2.0 '; type='function';}, 
	{name='clean_term_cache'; match='clean_term_cache'; definition='clean_term_cache($ids, $taxonomy=\'\', $clean_taxonomy=true)'; description=''; file='/wp-includes/taxonomy.php, line: 2506'; type='function';}, 
	{name='clean_url'; match='clean_url'; definition='clean_url($url, $protocols=null, $context=\'display\')'; description='Checks and cleans a URL. 
A number of characters are removed from the URL. If the URL is for displaying (the default behaviour) amperstands are also replaced. The &apos;clean_url&apos; filter is applied to the returned cleaned URL. 
@see Alias for esc_url() '; file='/wp-includes/deprecated.php, line: 2089'; params='@param string $url The URL to be cleaned.  
@param array $protocols Optional. An array of acceptable protocols.  
@param string $context Optional. How the URL will be used. Default is \'display\'.  '; return='string The cleaned $url after the &apos;clean_url&apos; filter is applied. '; since='1.2.0 '; type='function';}, 
	{name='clean_user_cache'; match='clean_user_cache'; definition='clean_user_cache($id)'; description='Clean all user caches 
'; file='/wp-includes/user.php, line: 1280'; params='@param int $id User ID  '; since='3.0.0 '; type='function';}, 
	{name='clear_global_post_cache'; match='clear_global_post_cache'; definition='clear_global_post_cache($post_id)'; description='@see clean_post_cache() '; file='/wp-includes/ms-deprecated.php, line: 115'; since='MU '; type='function';}, 
	{name='codepress_footer_js'; match='codepress_footer_js'; definition='codepress_footer_js()'; description='Adds Javascript required to make CodePress work on the theme/plugin editors. 
'; file='/wp-admin/includes/deprecated.php, line: 184'; since='2.8.0 '; type='function';}, 
	{name='codepress_get_lang'; match='codepress_get_lang'; definition='codepress_get_lang($filename)'; description='Determines the language to use for CodePress syntax highlighting. 

'; file='/wp-admin/includes/deprecated.php, line: 173'; params='@param string $filename  '; since='2.8.0 '; type='function';}, 
	{name='comment_ID'; match='comment_ID'; definition='comment_ID()'; description='Displays the comment id of the current comment. 
@see get_comment_ID() Echoes Result '; file='/wp-includes/comment-template.php, line: 458'; since='0.71 '; type='function';}, 
	{name='comment_author'; match='comment_author'; definition='comment_author($comment_ID=0)'; description='Displays the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 46'; params='@param int $comment_ID The ID of the comment for which to print the author. Optional.  '; since='0.71 '; uses='apply_filters() Calls \'comment_author\' on comment author before displaying'; type='function';}, 
	{name='comment_author_IP'; match='comment_author_IP'; definition='comment_author_IP($comment_ID=0)'; description='Display the IP address of the author of the current comment. 
@see get_comment_author_IP() Echoes Result '; file='/wp-includes/comment-template.php, line: 194'; params='@param int $comment_ID The ID of the comment for which to print the author\'s IP address. Optional.  '; since='0.71 '; type='function';}, 
	{name='comment_author_email'; match='comment_author_email'; definition='comment_author_email($comment_ID=0)'; description='Display the email of the author of the current global $comment. 
Care should be taken to protect the email address and assure that email harvesters do not capture your commentors&apos; email address. Most assume that their email address will not appear in raw form on the blog. Doing so will enable anyone, including those that people don&apos;t want to get the email address and use it for their own means good and bad. 

'; file='/wp-includes/comment-template.php, line: 80'; params='@param int $comment_ID The ID of the comment for which to print the author\'s email. Optional.  '; since='0.71 '; uses='apply_filters() Calls \'author_email\' hook on the author email'; type='function';}, 
	{name='comment_author_email_link'; match='comment_author_email_link'; definition='comment_author_email_link($linktext=\'\', $before=\'\', $after=\'\')'; description='Display the html email link to the author of the current comment. 
Care should be taken to protect the email address and assure that email harvesters do not capture your commentors&apos; email address. Most assume that their email address will not appear in raw form on the blog. Doing so will enable anyone, including those that people don&apos;t want to get the email address and use it for their own means good and bad. 

'; file='/wp-includes/comment-template.php, line: 102'; params='@param string $linktext The text to display instead of the comment author\'s email address  
@param string $before The text or HTML to display before the email link.  
@param string $after The text or HTML to display after the email link.  '; since='0.71 '; uses='apply_filters() Calls \'comment_email\' hook for the display of the comment author\'s email 
get_comment_author_email_link() For generating the link '; type='function';}, 
	{name='comment_author_link'; match='comment_author_link'; definition='comment_author_link($comment_ID=0)'; description='Display the html link to the url of the author of the current comment. 
@see get_comment_author_link() Echoes result '; file='/wp-includes/comment-template.php, line: 167'; params='@param int $comment_ID The ID of the comment for which to print the author\'s link. Optional.  '; since='0.71 '; type='function';}, 
	{name='comment_author_rss'; match='comment_author_rss'; definition='comment_author_rss()'; description=''; file='/wp-includes/feed.php, line: 265'; type='function';}, 
	{name='comment_author_url'; match='comment_author_url'; definition='comment_author_url($comment_ID=0)'; description='Display the url of the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 223'; params='@param int $comment_ID The ID of the comment for which to print the author\'s URL. Optional.  '; since='0.71 '; uses='apply_filters() 
get_comment_author_url() Retrieves the comment author\'s URL'; type='function';}, 
	{name='comment_author_url_link'; match='comment_author_url_link'; definition='comment_author_url_link($linktext=\'\', $before=\'\', $after=\'\')'; description='Displays the HTML link of the url of the author of the current comment. 
@see get_comment_author_url_link() Echoes result '; file='/wp-includes/comment-template.php, line: 266'; params='@param string $linktext The text to display instead of the comment author\'s email address  
@param string $before The text or HTML to display before the email link.  
@param string $after The text or HTML to display after the email link.  '; since='0.71 '; type='function';}, 
	{name='comment_class'; match='comment_class'; definition='comment_class($class=\'\', $comment_id=null, $post_id=null, $echo=true)'; description='Generates semantic classes for each comment element 
'; file='/wp-includes/comment-template.php, line: 280'; params='@param string array $class One or more classes to add to the class list  
@param int $comment_id An optional comment ID  
@param int $post_id An optional post ID  
@param bool $echo Whether comment_class should echo or return  '; since='2.7.0 '; type='function';}, 
	{name='comment_date'; match='comment_date'; definition='comment_date($d=\'\', $comment_ID=0)'; description='Display the comment date of the current comment. 
'; file='/wp-includes/comment-template.php, line: 389'; params='@param string $d The format of the date (defaults to user\'s config)  
@param int $comment_ID The ID of the comment for which to print the date. Optional.  '; since='0.71 '; type='function';}, 
	{name='comment_excerpt'; match='comment_excerpt'; definition='comment_excerpt($comment_ID=0)'; description='Display the excerpt of the current comment. 

'; file='/wp-includes/comment-template.php, line: 434'; params='@param int $comment_ID The ID of the comment for which to print the excerpt. Optional.  '; since='1.2.0 '; uses='apply_filters() Calls \'comment_excerpt\' hook before displaying excerpt'; type='function';}, 
	{name='comment_exists'; match='comment_exists'; definition='comment_exists($comment_author, $comment_date)'; description='{ '; file='/wp-admin/includes/comment.php, line: 19'; type='function';}, 
	{name='comment_footer_die'; match='comment_footer_die'; definition='comment_footer_die($msg)'; description='Display error message at bottom of comments. 
'; file='/wp-admin/comment.php, line: 37'; params='@param string $msg Error Message. Assumed to contain HTML and be sanitized.  '; type='function';}, 
	{name='comment_form'; match='comment_form'; definition='comment_form($args=array(), $post_id=null)'; description='Outputs a complete commenting form for use within a template. Most strings and form fields may be controlled through the $args array passed into the function, while you may also choose to use the comment_form_default_fields filter to modify the array of default fields if you&apos;d just like to add a new one or remove a single field. All fields are also individually passed through a filter of the form comment_form_field_$name where $name is the key used in the array of fields. 
'; file='/wp-includes/comment-template.php, line: 1510'; params='@param array $args Options for strings, fields etc in the form  
@param mixed $post_id Post ID to generate the form for, uses the current post if null  '; return='void '; since='3.0.0 '; type='function';}, 
	{name='comment_form_title'; match='comment_form_title'; definition='comment_form_title($noreplytext=false, $replytext=false, $linktoparent=TRUE)'; description='Display text based on comment reply status. Only affects users with Javascript disabled. 
'; file='/wp-includes/comment-template.php, line: 1194'; params='@param string $noreplytext Optional. Text to display when not replying to a comment.  
@param string $replytext Optional. Text to display when replying to a comment. Accepts \"%s\" for the author of the comment being replied to.  
@param string $linktoparent Optional. Boolean to control making the author\'s name a link to their comment.  '; since='2.7.0 '; type='function';}, 
	{name='comment_guid'; match='comment_guid'; definition='comment_guid($comment_id=null)'; description=''; file='/wp-includes/feed.php, line: 211'; type='function';}, 
	{name='comment_id_fields'; match='comment_id_fields'; definition='comment_id_fields($id=0)'; description='Output hidden input HTML for replying to comments. 
@see get_comment_id_fields() Echoes result '; file='/wp-includes/comment-template.php, line: 1181'; since='2.7.0 '; type='function';}, 
	{name='comment_link'; match='comment_link'; definition='comment_link()'; description='Display the link to the comments. 
'; file='/wp-includes/feed.php, line: 239'; since='1.5.0 '; type='function';}, 
	{name='comment_reply_link'; match='comment_reply_link'; definition='comment_reply_link($args=array(), $comment=null, $post=null)'; description='Displays the HTML content for reply to comment link. 
@see get_comment_reply_link() Echoes result '; file='/wp-includes/comment-template.php, line: 1077'; params='@param array $args Optional. Override default options.  
@param int $comment Optional. Comment being replied to.  
@param int $post Optional. Post that the comment is going to be displayed on.  '; return='string|bool|null Link to show comment form, if successful. False, if comments are closed. '; since='2.7.0 '; type='function';}, 
	{name='comment_text'; match='comment_text'; definition='comment_text($comment_ID=0)'; description='Displays the text of the current comment. 

'; file='/wp-includes/comment-template.php, line: 612'; params='@param int $comment_ID The ID of the comment for which to print the text. Optional.  '; since='0.71 '; uses='apply_filters() Passes the comment content through the \'comment_text\' hook before display 
get_comment_text() Gets the comment content'; type='function';}, 
	{name='comment_text_rss'; match='comment_text_rss'; definition='comment_text_rss()'; description=''; file='/wp-includes/feed.php, line: 278'; type='function';}, 
	{name='comment_time'; match='comment_time'; definition='comment_time($d=\'\')'; description='Display the comment time of the current comment. 
'; file='/wp-includes/comment-template.php, line: 646'; params='@param string $d Optional. The format of the time (defaults to user\'s config)  '; since='0.71 '; type='function';}, 
	{name='comment_type'; match='comment_type'; definition='comment_type($commenttxt=false, $trackbacktxt=false, $pingbacktxt=false)'; description='Display the comment type of the current comment. 
'; file='/wp-includes/comment-template.php, line: 677'; params='@param string $commenttxt The string to display for comment type  
@param string $trackbacktxt The string to display for trackback type  
@param string $pingbacktxt The string to display for pingback type  '; since='0.71 '; type='function';}, 
	{name='comments_link'; match='comments_link'; definition='comments_link($deprecated=\'\', $deprecated_2=\'\')'; description='Displays the link to the current post comments. 
'; file='/wp-includes/comment-template.php, line: 530'; params='@param string $deprecated Not Used  
@param bool $deprecated_2 Not Used  '; since='0.71 '; type='function';}, 
	{name='comments_link_feed'; match='comments_link_feed'; definition='comments_link_feed()'; description='Outputs the link to the comments for the current post in an xml safe way 
'; file='/wp-includes/feed.php, line: 198'; return='none '; since='3.0.0 '; type='function';}, 
	{name='comments_number'; match='comments_number'; definition='comments_number($zero=false, $one=false, $more=false, $deprecated=\'\')'; description='Display the language string for the number of comments the current post has. 

'; file='/wp-includes/comment-template.php, line: 573'; params='@param string $zero Text for no comments  
@param string $one Text for one comment  
@param string $more Text for more than one comment  
@param string $deprecated Not used.  '; since='0.71 '; uses='apply_filters() Calls the \'comments_number\' hook on the output and number of comments respectively.'; type='function';}, 
	{name='comments_open'; match='comments_open'; definition='comments_open($post_id=NULL)'; description='Whether the current post is open for comments. 

'; file='/wp-includes/comment-template.php, line: 772'; params='@param int $post_id An optional post ID to check instead of the current post.  '; return='bool True if the comments are open '; since='1.5.0 '; uses='$post'; type='function';}, 
	{name='comments_popup_link'; match='comments_popup_link'; definition='comments_popup_link($zero=false, $one=false, $more=false, $css_class=\'\', $none=false)'; description='Displays the link to the comments popup window for the current post ID. 
Is not meant to be displayed on single posts and pages. Should be used on the lists of posts 

'; file='/wp-includes/comment-template.php, line: 969'; params='@param string $zero The string to display when no comments  
@param string $one The string to display when only one comment is available  
@param string $more The string to display when there are more than one comment  
@param string $css_class The CSS class to use for comments  
@param string $none The string to display when comments have been turned off  '; return='null Returns null on single posts and pages. '; since='0.71 '; uses='$wpcommentspopupfile 
$wpcommentsjavascript 
$post'; type='function';}, 
	{name='comments_popup_script'; match='comments_popup_script'; definition='comments_popup_script($width=400, $height=400, $file=\'\')'; description='Displays the JS popup script to show a comment. 
If the $file parameter is empty, then the home page is assumed. The defaults for the window are 400px by 400px. 
For the comment link popup to work, this function has to be called or the normal comment link will be assumed. 

'; file='/wp-includes/comment-template.php, line: 937'; params='@param int $width Optional. The width of the popup window  
@param int $height Optional. The height of the popup window  
@param string $file Optional. Sets the location of the popup window  '; since='0.71 '; type='function';}, 
	{name='comments_rss'; match='comments_rss'; definition='comments_rss()'; description='Return link to the post RSS feed. 
@see get_post_comments_feed_link() '; file='/wp-includes/deprecated.php, line: 1216'; return='string '; since='1.5 '; type='function';}, 
	{name='comments_rss_link'; match='comments_rss_link'; definition='comments_rss_link($link_text=\'Comments RSS\')'; description='Print RSS comment feed link. 
@see post_comments_feed_link() '; file='/wp-includes/deprecated.php, line: 1158'; params='@param string $link_text  '; since='1.0.1 '; type='function';}, 
	{name='comments_template'; match='comments_template'; definition='comments_template($file=\'/comments.php\', $separate_comments=false)'; description='Loads the comment template specified in $file. 
Will not display the comments template if not on single post or page, or if the post does not have comments. 
Uses the WordPress database object to query for the comments. The comments are passed through the &apos;comments_array&apos; filter hook with the list of comments and the post ID respectively. 
The $file path is passed through a filter hook called, &apos;comments_template&apos; which includes the TEMPLATEPATH and $file combined. Tries the $filtered path first and if it fails it will require the default comment themplate from the default theme. If either does not exist, then the WordPress process will be halted. It is advised for that reason, that the default theme is not deleted. 

'; file='/wp-includes/comment-template.php, line: 849'; params='@param string $file Optional, default \'/comments.php\'. The file to load  
@param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false.  '; return='null Returns null if no comments appear '; since='1.5.0 '; uses='$wpdb 
$post 
$withcomments Will not try to get the comments if the post has none.'; type='function';}, 
	{name='compression_test'; match='compression_test'; definition='compression_test()'; description='Test support for compressing JavaScript from PHP 
Outputs JavaScript that tests if compression from PHP works as expected and sets an option with the result. Has no effect when the current user is not an administrator. To run the test again the option &apos;can_compress_scripts&apos; has to be deleted. 
'; file='/wp-admin/includes/template.php, line: 2005'; since='2.8.0 '; type='function';}, 
	{name='confirm_delete_users'; match='confirm_delete_users'; definition='confirm_delete_users($users)'; description=''; file='/wp-admin/network/edit.php, line: 21'; type='function';}, 
	{name='content_url'; match='content_url'; definition='content_url($path=\'\')'; description=''; file='/wp-includes/link-template.php, line: 2104'; type='function';}, 
	{name='convert_chars'; match='convert_chars'; definition='convert_chars($content, $deprecated=\'\')'; description='Converts a number of characters from a string. 
Metadata tags &lt;&lt;title&gt;&gt; and &lt;&lt;category&gt;&gt; are removed, &lt; &gt; and &lt; &gt; are converted into correct XHTML and Unicode characters are converted to the valid range. 
'; file='/wp-includes/formatting.php, line: 906'; params='@param string $content String of characters to be converted.  
@param string $deprecated Not used.  '; return='string Converted string. '; since='0.71 '; type='function';}, 
	{name='convert_smilies'; match='convert_smilies'; definition='convert_smilies($text)'; description='Convert text equivalent of smilies to images. 
Will only convert smilies if the option &apos;use_smilies&apos; is true and the global used in the function isn&apos;t empty. 

'; file='/wp-includes/formatting.php, line: 1464'; params='@param string $text Content to convert smilies from text.  '; return='string Converted content with text smilies replaced with images. '; since='0.71 '; uses='$wp_smiliessearch'; type='function';}, 
	{name='convert_to_screen'; match='convert_to_screen'; definition='convert_to_screen($screen)'; description='Convert a screen string to a screen object 
'; file='/wp-admin/includes/template.php, line: 1699'; params='@param string $screen The name of the screen  '; return='object An object containing the safe screen name and id '; since='3.0.0 '; type='function';}, 
	{name='copy_dir'; match='copy_dir'; definition='copy_dir($from, $to, $skip_list=array())'; description='Copies a directory from one location to another via the WordPress Filesystem Abstraction. Assumes that WP_Filesystem() has already been called and setup. 
'; file='/wp-admin/includes/file.php, line: 733'; params='@param string $from source directory  
@param string $to destination directory  
@param array $skip_list a list of files/folders to skip copying  '; return='mixed <code>WP_Error</code> on failure, True on success. '; since='2.5.0 '; type='function';}, 
	{name='core_update_footer'; match='core_update_footer'; definition='core_update_footer($msg=\'\')'; description=''; file='/wp-admin/includes/update.php, line: 84'; type='function';}, 
	{name='core_upgrade_preamble'; match='core_upgrade_preamble'; definition='core_upgrade_preamble()'; description='Display upgrade WordPress for downloading latest or upgrading automatically form. 
'; file='/wp-admin/update-core.php, line: 125'; return='null '; since='2.7 '; type='function';}, 
	{name='count_many_users_posts'; match='count_many_users_posts'; definition='count_many_users_posts($users, $post_type=\'post\')'; description='Number of posts written by a list of users. 
'; file='/wp-includes/user.php, line: 172'; params='@param array $user_ids Array of user IDs.  
@param string array $post_type Optional. Post type to check. Defaults to post.  '; return='array Amount of posts each user has written. '; since='3.0.0 '; type='function';}, 
	{name='count_user_posts'; match='count_user_posts'; definition='count_user_posts($userid)'; description='Number of posts user has written. 

'; file='/wp-includes/user.php, line: 154'; params='@param int $userid User ID.  '; return='int Amount of posts user has written. '; since='3.0.0 '; uses='$wpdb WordPress database object for queries.'; type='function';}, 
	{name='count_users'; match='count_users'; definition='count_users($strategy=\'time\')'; description='Count number of users who have each of the user roles. 
Assumes there are neither duplicated nor orphaned capabilities meta_values. Assumes role names are unique phrases. Same assumption made by <code>WP_User_Query::prepare_query()</code> Using $strategy = &apos;time&apos; this is CPU-intensive and should handle around 10^7 users. Using $strategy = &apos;memory&apos; this is memory-intensive and should handle around 10^5 users, but see <code>WP</code> Bug #12257. 
'; file='/wp-includes/user.php, line: 833'; params='@param string $strategy \'time\' or \'memory\'  '; return='array Includes a grand total and an array of counts indexed by role strings. '; since='3.0.0 '; type='function';}, 
	{name='create_empty_blog'; match='create_empty_blog'; definition='create_empty_blog($domain, $path, $weblog_title, $site_id=1)'; description='Create an empty blog. 

'; file='/wp-includes/ms-functions.php, line: 308'; params='@param string $domain The new blog\'s domain.  
@param string $path The new blog\'s path.  
@param string $string The new blog\'s title.  
@param int $site Optional. Defaults to 1.  '; return='int The ID of the newly created blog '; since='MU 1.0 '; uses='install_blog()'; type='function';}, 
	{name='create_initial_post_types'; match='create_initial_post_types'; definition='create_initial_post_types()'; description='Creates the initial post types when &apos;init&apos; action is fired. 
'; file='/wp-includes/post.php, line: 19'; since='2.9.0 '; type='function';}, 
	{name='create_initial_taxonomies'; match='create_initial_taxonomies'; definition='create_initial_taxonomies()'; description='Creates the initial taxonomies when &apos;init&apos; action is fired. '; file='/wp-includes/taxonomy.php, line: 17'; type='function';}, 
	{name='create_user'; match='create_user'; definition='create_user($username, $password, $email)'; description='An alias of wp_create_user(). 
@see wp_create_user() '; file='/wp-includes/deprecated.php, line: 1234'; params='@param string $username The user\'s username.  
@param string $password The user\'s password.  
@param string $email The user\'s email (optional).  '; return='int The new user&apos;s ID. '; since='2.0 '; type='function';}, 
	{name='current_filter'; match='current_filter'; definition='current_filter()'; description=''; file='/wp-includes/plugin.php, line: 306'; type='function';}, 
	{name='current_theme_info'; match='current_theme_info'; definition='current_theme_info()'; description='{ '; file='/wp-admin/includes/theme.php, line: 16'; type='function';}, 
	{name='current_theme_supports'; match='current_theme_supports'; definition='current_theme_supports($feature)'; description='Checks a theme&apos;s support for a given feature 
'; file='/wp-includes/theme.php, line: 1918'; params='@param string $feature the feature being checked  '; return='boolean '; since='2.9.0 '; type='function';}, 
	{name='current_time'; match='current_time'; definition='current_time($type, $gmt=0)'; description='Retrieve the current time based on specified type. 
The &apos;mysql&apos; type will return the time in the format for MySQL DATETIME field. The &apos;timestamp&apos; type will return the current timestamp. 
If $gmt is set to either &apos;1&apos; or &apos;true&apos;, then both types will use GMT time. if $gmt is false, the output is adjusted with the GMT offset in the WordPress option. 
'; file='/wp-includes/functions.php, line: 59'; params='@param string $type Either \'mysql\' or \'timestamp\'.  
@param int bool $gmt Optional. Whether to use GMT timezone. Default is false.  '; return='int|string String if $type is &apos;gmt&apos;, int if $type is &apos;timestamp&apos;. '; since='1.0.0 '; type='function';}, 
	{name='current_user_can'; match='current_user_can'; definition='current_user_can($capability)'; description='Whether current user has capability or role. 
'; file='/wp-includes/capabilities.php, line: 1038'; params='@param string $capability Capability or role name.  '; return='bool '; since='2.0.0 '; type='function';}, 
	{name='current_user_can_for_blog'; match='current_user_can_for_blog'; definition='current_user_can_for_blog($blog_id, $capability)'; description='Whether current user has a capability or role for a given blog. 
'; file='/wp-includes/capabilities.php, line: 1059'; params='@param int $blog_id Blog ID  
@param string $capability Capability or role name.  '; return='bool '; since='3.0.0 '; type='function';}, 
	{name='date_i18n'; match='date_i18n'; definition='date_i18n($dateformatstring, $unixtimestamp=false, $gmt=false)'; description='Retrieve the date in localized format, based on timestamp. 
If the locale specifies the locale month and weekday, then the locale will take over the format for the date. If it isn&apos;t, then the date format string will be used instead. 
'; file='/wp-includes/functions.php, line: 84'; params='@param string $dateformatstring Format to display the date.  
@param int $unixtimestamp Optional. Unix timestamp.  
@param bool $gmt Optional, default is false. Whether to convert to GMT for time.  '; return='string The date, translated if locale specifies it. '; since='0.71 '; type='function';}, 
	{name='deactivate_plugins'; match='deactivate_plugins'; definition='deactivate_plugins($plugins, $silent=false)'; description='Deactivate a single plugin or multiple plugins. 
The deactivation hook is disabled by the plugin upgrader by using the $silent parameter. 
'; file='/wp-admin/includes/plugin.php, line: 560'; params='@param string array $plugins Single plugin or list of plugins to deactivate.  
@param bool $silent Prevent calling deactivation hooks. Default is false.  '; since='2.5.0 '; type='function';}, 
	{name='deactivate_sitewide_plugin'; match='deactivate_sitewide_plugin'; definition='deactivate_sitewide_plugin($plugin=false)'; description='@see deactivate_sitewide_plugin() '; file='/wp-admin/includes/ms-deprecated.php, line: 54'; type='function';}, 
	{name='dead_db'; match='dead_db'; definition='dead_db()'; description='Load custom DB error or display WordPress DB error. 
If a file exists in the wp-content directory named db-error.php, then it will be loaded instead of displaying the WordPress DB error. If it is not found, then the WordPress DB error will be displayed instead. 
The WordPress DB error sets the HTTP status header to 500 to try to prevent search engines from caching the message. Custom DB messages should do the same. 
This function was backported to the the WordPress 2.3.2, but originally was added in WordPress 2.5.0. 
'; file='/wp-includes/functions.php, line: 3270'; since='2.3.2 '; uses='$wpdb '; type='function';}, 
	{name='debug'; match='debug'; definition='debug($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 63'; type='function';}, 
	{name='debug_fclose'; match='debug_fclose'; definition='debug_fclose($fp)'; description=''; file='/wp-includes/functions.php, line: 1174'; type='function';}, 
	{name='debug_fopen'; match='debug_fopen'; definition='debug_fopen($filename, $mode)'; description=''; file='/wp-includes/functions.php, line: 1131'; type='function';}, 
	{name='debug_fwrite'; match='debug_fwrite'; definition='debug_fwrite($fp, $string)'; description=''; file='/wp-includes/functions.php, line: 1155'; type='function';}, 
	{name='default_password_nag'; match='default_password_nag'; definition='default_password_nag()'; description=''; file='/wp-admin/includes/user.php, line: 368'; since='2.8.0 '; type='function';}, 
	{name='default_password_nag_edit_user'; match='default_password_nag_edit_user'; definition='default_password_nag_edit_user($user_ID, $old_data)'; description=''; file='/wp-admin/includes/user.php, line: 352'; since='2.8.0 '; type='function';}, 
	{name='default_password_nag_handler'; match='default_password_nag_handler'; definition='default_password_nag_handler($errors=false)'; description=''; file='/wp-admin/includes/user.php, line: 336'; since='2.8.0 '; type='function';}, 
	{name='default_topic_count_scale'; match='default_topic_count_scale'; definition='default_topic_count_scale($count)'; description='Default topic count scaling for tag links 
'; file='/wp-includes/category-template.php, line: 577'; params='@param integer $count number of posts with that tag  '; return='integer scaled count '; type='function';}, 
	{name='default_topic_count_text'; match='default_topic_count_text'; definition='default_topic_count_text($count)'; description='Default text for tooltip for tag links 
'; file='/wp-includes/category-template.php, line: 567'; params='@param integer $count number of posts with that tag  '; return='string text for the tooltip of a tag link. '; type='function';}, 
	{name='delete_all_user_settings'; match='delete_all_user_settings'; definition='delete_all_user_settings()'; description=''; file='/wp-includes/functions.php, line: 1020'; type='function';}, 
	{name='delete_blog_option'; match='delete_blog_option'; definition='delete_blog_option($id, $key)'; description='Delete an option for a particular blog. 
'; file='/wp-includes/ms-blogs.php, line: 404'; params='@param int $id The blog id  
@param string $key The option key  '; since='MU '; type='function';}, 
	{name='delete_comment_meta'; match='delete_comment_meta'; definition='delete_comment_meta($comment_id, $meta_key, $meta_value=\'\')'; description='Remove metadata matching criteria from a comment. 
You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed. 

'; file='/wp-includes/comment.php, line: 530'; params='@param int $comment_id comment ID  
@param string $meta_key Metadata name.  
@param mixed $meta_value Optional. Metadata value.  '; return='bool False for failure. True for success. '; since='2.9.0 '; uses='delete_metadata '; type='function';}, 
	{name='delete_get_calendar_cache'; match='delete_get_calendar_cache'; definition='delete_get_calendar_cache()'; description='Purge the cached results of get_calendar. 
@see get_calendar '; file='/wp-includes/general-template.php, line: 1282'; since='2.1.0 '; type='function';}, 
	{name='delete_meta'; match='delete_meta'; definition='delete_meta($mid)'; description='{ '; file='/wp-admin/includes/post.php, line: 705'; type='function';}, 
	{name='delete_metadata'; match='delete_metadata'; definition='delete_metadata($meta_type, $object_id, $meta_key, $meta_value=\'\', $delete_all=false)'; description='Delete metadata for the specified object. 

'; file='/wp-includes/meta.php, line: 177'; params='@param string $meta_type Type of object metadata is for (e.g., comment, post, or user)  
@param int $object_id ID of the object metadata is for  
@param string $meta_key Metadata key  
@param string $meta_value Optional. Metadata value. If specified, only delete metadata entries with this value. Otherwise, delete all entries with the specified meta_key.  
@param bool $delete_all Optional, default is false. If true, delete matching metadata entries for all objects, ignoring the specified object_id. Otherwise, only delete matching metadata entries for the specified object_id.  '; return='bool True on successful delete, false on failure. '; since='2.9.0 '; uses='$wpdb WordPress database object for queries. 
do_action() Calls \'deleted_{$meta_type}_meta\' after deleting with meta_id of deleted metadata entries, object ID, meta key, and meta value'; type='function';}, 
	{name='delete_option'; match='delete_option'; definition='delete_option($option)'; description=''; file='/wp-includes/functions.php, line: 658'; type='function';}, 
	{name='delete_plugins'; match='delete_plugins'; definition='delete_plugins($plugins, $redirect=\'\')'; description='Remove directory and files of a plugin for a single or list of plugin(s). 
If the plugins parameter list is empty, false will be returned. True when completed. 
'; file='/wp-admin/includes/plugin.php, line: 646'; params='@param array $plugins List of plugin  
@param string $redirect Redirect to page when complete.  '; return='mixed '; since='2.6.0 '; type='function';}, 
	{name='delete_post_meta'; match='delete_post_meta'; definition='delete_post_meta($post_id, $meta_key, $meta_value=\'\')'; description='Remove metadata matching criteria from a post. 
You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed. 

'; file='/wp-includes/post.php, line: 1437'; params='@param int $post_id post ID  
@param string $meta_key Metadata name.  
@param mixed $meta_value Optional. Metadata value.  '; return='bool False for failure. True for success. '; since='1.5.0 '; uses='$wpdb '; type='function';}, 
	{name='delete_post_meta_by_key'; match='delete_post_meta_by_key'; definition='delete_post_meta_by_key($post_meta_key)'; description='Delete everything from post meta matching meta key. 

'; file='/wp-includes/post.php, line: 1497'; params='@param string $post_meta_key Key to search for when deleting.  '; return='bool Whether the post meta key was deleted from the database '; since='2.3.0 '; uses='$wpdb'; type='function';}, 
	{name='delete_site_option'; match='delete_site_option'; definition='delete_site_option($option)'; description=''; file='/wp-includes/functions.php, line: 3815'; type='function';}, 
	{name='delete_site_transient'; match='delete_site_transient'; definition='delete_site_transient($transient)'; description=''; file='/wp-includes/functions.php, line: 3904'; type='function';}, 
	{name='delete_theme'; match='delete_theme'; definition='delete_theme($template, $redirect=\'\')'; description='Remove a theme 
'; file='/wp-admin/includes/theme.php, line: 49'; params='@param string $template Template directory of the theme to delete  
@param string $redirect Redirect to page when complete.  '; return='mixed '; since='2.8.0 '; type='function';}, 
	{name='delete_transient'; match='delete_transient'; definition='delete_transient($transient)'; description=''; file='/wp-includes/functions.php, line: 701'; type='function';}, 
	{name='delete_user_meta'; match='delete_user_meta'; definition='delete_user_meta($user_id, $meta_key, $meta_value=\'\')'; description='Remove metadata matching criteria from a user. 
You can match based on the key, or key and value. Removing based on key and value, will keep from removing duplicate metadata with the same key. It also allows removing all metadata matching key, if needed. 

'; file='/wp-includes/user.php, line: 778'; params='@param int $user_id user ID  
@param string $meta_key Metadata name.  
@param mixed $meta_value Optional. Metadata value.  '; return='bool False for failure. True for success. '; since='3.0.0 '; uses='delete_metadata() '; type='function';}, 
	{name='delete_user_option'; match='delete_user_option'; definition='delete_user_option($user_id, $option_name, $global=false)'; description='Delete user option with global blog capability. 
User options are just like user metadata except that they have support for global blog options. If the &apos;global&apos; parameter is false, which it is by default it will prepend the WordPress table prefix to the option name. 

'; file='/wp-includes/user.php, line: 324'; params='@param int $user_id User ID  
@param string $option_name User option name.  
@param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific).  '; return='unknown '; since='3.0.0 '; uses='$wpdb WordPress database object for queries'; type='function';}, 
	{name='delete_user_setting'; match='delete_user_setting'; definition='delete_user_setting($names)'; description=''; file='/wp-includes/functions.php, line: 927'; type='function';}, 
	{name='delete_usermeta'; match='delete_usermeta'; definition='delete_usermeta($user_id, $meta_key, $meta_value=\'\')'; description='Remove user meta data. 
@see delete_user_meta() '; file='/wp-includes/deprecated.php, line: 2278'; params='@param int $user_id User ID.  
@param string $meta_key Metadata key.  
@param mixed $meta_value Metadata value.  '; return='bool True deletion completed and false if user_id is not a number. '; since='2.0.0 '; type='function';}, 
	{name='did_action'; match='did_action'; definition='did_action($tag)'; description=''; file='/wp-includes/plugin.php, line: 423'; type='function';}, 
	{name='disabled'; match='disabled'; definition='disabled($disabled, $current=true, $echo=true)'; description='Outputs the html disabled attribute. 
Compares the first two arguments and if identical marks as disabled 
'; file='/wp-includes/general-template.php, line: 2297'; params='@param mixed $disabled One of the values to compare  
@param mixed $current (true) The other value to compare if not just true  
@param bool $echo Whether to echo or just return the string  '; return='string html attribute or empty string '; since='3.0.0 '; type='function';}, 
	{name='discover_pingback_server_uri'; match='discover_pingback_server_uri'; definition='discover_pingback_server_uri($url, $deprecated=\'\')'; description='Finds a pingback server URI based on the given URL. 
Checks the HTML for the rel=&quot;pingback&quot; link and x-pingback headers. It does a check for the x-pingback headers first and returns that, if available. The check for the rel=&quot;pingback&quot; has more overhead than just the header. 
'; file='/wp-includes/comment.php, line: 1599'; params='@param string $url URL to ping.  
@param int $deprecated Not Used.  '; return='bool|string False on failure, string containing URI on success. '; since='1.5.0 '; type='function';}, 
	{name='dismiss_core_update'; match='dismiss_core_update'; definition='dismiss_core_update($update)'; description=''; file='/wp-admin/includes/update.php, line: 59'; type='function';}, 
	{name='dismissed_updates'; match='dismissed_updates'; definition='dismissed_updates()'; description=''; file='/wp-admin/update-core.php, line: 91'; type='function';}, 
	{name='display_space_usage'; match='display_space_usage'; definition='display_space_usage()'; description=''; file='/wp-admin/includes/ms.php, line: 404'; type='function';}, 
	{name='do_action'; match='do_action'; definition='do_action($tag, $arg=\'\')'; description=''; file='/wp-includes/plugin.php, line: 359'; type='function';}, 
	{name='do_action_ref_array'; match='do_action_ref_array'; definition='do_action_ref_array($tag, $args)'; description=''; file='/wp-includes/plugin.php, line: 448'; type='function';}, 
	{name='do_activate_header'; match='do_activate_header'; definition='do_activate_header()'; description=''; file='/wp-activate.php, line: 19'; type='function';}, 
	{name='do_all_pings'; match='do_all_pings'; definition='do_all_pings()'; description='Perform all pingbacks, enclosures, trackbacks, and send to pingback services. 
'; file='/wp-includes/comment.php, line: 1663'; since='2.1.0 '; uses='$wpdb '; type='function';}, 
	{name='do_core_upgrade'; match='do_core_upgrade'; definition='do_core_upgrade($reinstall=false)'; description='Upgrade WordPress core display. 
'; file='/wp-admin/update-core.php, line: 320'; return='null '; since='2.7 '; type='function';}, 
	{name='do_dismiss_core_update'; match='do_dismiss_core_update'; definition='do_dismiss_core_update()'; description=''; file='/wp-admin/update-core.php, line: 370'; type='function';}, 
	{name='do_enclose'; match='do_enclose'; definition='do_enclose($content, $post_ID)'; description=''; file='/wp-includes/functions.php, line: 1195'; type='function';}, 
	{name='do_feed'; match='do_feed'; definition='do_feed()'; description='Loads the feed template from the use of an action hook. 
If the feed action does not have a hook, then the function will die with a message telling the visitor that the feed is not valid. 
It is better to only have one hook for each feed. 
'; file='/wp-includes/functions.php, line: 1767'; since='2.1.0 '; uses='$wp_query Used to tell if the use a comment feed. 
do_action() Calls \'do_feed_$feed\' hook, if a hook exists for the feed. '; type='function';}, 
	{name='do_feed_atom'; match='do_feed_atom'; definition='do_feed_atom($for_comments)'; description='Load either Atom comment feed or Atom posts feed. 
'; file='/wp-includes/functions.php, line: 1826'; params='@param bool $for_comments True for the comment feed, false for normal feed.  '; since='2.1.0 '; type='function';}, 
	{name='do_feed_rdf'; match='do_feed_rdf'; definition='do_feed_rdf()'; description='Load the RDF RSS 0.91 Feed template. 
'; file='/wp-includes/functions.php, line: 1792'; since='2.1.0 '; type='function';}, 
	{name='do_feed_rss'; match='do_feed_rss'; definition='do_feed_rss()'; description='Load the RSS 1.0 Feed Template 
'; file='/wp-includes/functions.php, line: 1801'; since='2.1.0 '; type='function';}, 
	{name='do_feed_rss2'; match='do_feed_rss2'; definition='do_feed_rss2($for_comments)'; description='Load either the RSS2 comment feed or the RSS2 posts feed. 
'; file='/wp-includes/functions.php, line: 1812'; params='@param bool $for_comments True for the comment feed, false for normal feed.  '; since='2.1.0 '; type='function';}, 
	{name='do_meta_boxes'; match='do_meta_boxes'; definition='do_meta_boxes($page, $context, $object)'; description='Meta-Box template function 
'; file='/wp-admin/includes/template.php, line: 933'; params='@param string $page page identifier, also known as screen identifier  
@param string $context box context  
@param mixed $object gets passed to the box callback function as first parameter  '; return='int number of meta_boxes '; since='2.5.0 '; type='function';}, 
	{name='do_robots'; match='do_robots'; definition='do_robots()'; description='Display the robot.txt file content. 
The echo content should be with usage of the permalinks or for creating the robot.txt file. 
'; file='/wp-includes/functions.php, line: 1842'; since='2.1.0 '; uses='do_action() Calls \'do_robotstxt\' hook for displaying robot.txt rules. '; type='function';}, 
	{name='do_settings_fields'; match='do_settings_fields'; definition='do_settings_fields($page, $section)'; description='Print out the settings fields for a particular settings section 
Part of the Settings API. Use this in a settings page to output a specific section. Should normally be called by do_settings_sections() rather than directly. 

'; file='/wp-admin/includes/template.php, line: 1190'; params='@param string $page Slug title of the admin page who\'s settings fields you want to show.  
@param section $section Slug title of the settings section who\'s fields you want to show.  '; since='2.7.0 '; type='function';}, 
	{name='do_settings_sections'; match='do_settings_sections'; definition='do_settings_sections($page)'; description='Prints out all settings sections added to a particular settings page 
Part of the Settings API. Use this in a settings page callback function to output all the sections and fields that were added to that $page with add_settings_section() and add_settings_field() 
'; file='/wp-admin/includes/template.php, line: 1159'; params='@param string $page The slug name of the page whos settings sections you want to output  '; since='2.7.0 '; type='function';}, 
	{name='do_shortcode'; match='do_shortcode'; definition='do_shortcode($content)'; description='Search content for shortcodes and filter shortcodes through their hooks. 
If there are no shortcode tags defined, then the content will be returned without any filtering. This might cause issues when plugins are disabled but the shortcode will still show up in the post or content. 

'; file='/wp-includes/shortcodes.php, line: 144'; params='@param string $content Content to search for shortcodes  '; return='string Content with shortcodes filtered out. '; since='2.5 '; uses='$shortcode_tags 
get_shortcode_regex() Gets the search pattern for searching shortcodes.'; type='function';}, 
	{name='do_shortcode_tag'; match='do_shortcode_tag'; definition='do_shortcode_tag($m)'; description='Regular Expression callable for do_shortcode() for calling shortcode hook. @see get_shortcode_regex for details of the match array contents. 
'; file='/wp-includes/shortcodes.php, line: 193'; params='@param array $m Regular expression match array  '; return='mixed False on failure. '; since='2.5 '; uses='$shortcode_tags'; type='function';}, 
	{name='do_signup_header'; match='do_signup_header'; definition='do_signup_header()'; description=''; file='/wp-signup.php, line: 15'; type='function';}, 
	{name='do_trackbacks'; match='do_trackbacks'; definition='do_trackbacks($post_id)'; description='Perform trackbacks. 

'; file='/wp-includes/comment.php, line: 1702'; params='@param int $post_id Post ID to do trackbacks on.  '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='do_undismiss_core_update'; match='do_undismiss_core_update'; definition='do_undismiss_core_update()'; description=''; file='/wp-admin/update-core.php, line: 381'; type='function';}, 
	{name='documentation_link'; match='documentation_link'; definition='documentation_link()'; description='Unused Admin function. 
'; file='/wp-admin/includes/deprecated.php, line: 34'; since='2.0 '; type='function';}, 
	{name='domain_exists'; match='domain_exists'; definition='domain_exists($domain, $path, $site_id=1)'; description='Check whether a blogname is already taken. 
Used during the new site registration process to ensure that each blogname is unique. 
'; file='/wp-includes/ms-functions.php, line: 1173'; params='@param string $domain The domain to be checked.  
@param string $path The path to be checked.  
@param int $site_id Optional. Relevant only on multi-network installs.  '; return='int '; since='MU '; type='function';}, 
	{name='download_url'; match='download_url'; definition='download_url($url, $timeout=300)'; description='Downloads a url to a local temporary file using the WordPress HTTP Class. Please note, That the calling function must unlink() the file. 
'; file='/wp-admin/includes/file.php, line: 477'; params='@param string $url the URL of the file to download  
@param int $timeout The timeout for the request to download the file default 300 seconds  '; return='mixed <code>WP_Error</code> on failure, string Filename on success. '; since='2.5.0 '; type='function';}, 
	{name='dropdown_categories'; match='dropdown_categories'; definition='dropdown_categories($default=0, $parent=0, $popular_ids=array())'; description='{ '; file='/wp-admin/includes/deprecated.php, line: 69'; type='function';}, 
	{name='dropdown_cats'; match='dropdown_cats'; definition='dropdown_cats($optionall=1, $all=\'All\', $orderby=\'ID\', $order=\'asc\', $show_last_update=0, $show_count=0, $hide_empty=1, $optionnone=false, $selected=0, $exclude=0)'; description='@see wp_dropdown_categories() '; file='/wp-includes/deprecated.php, line: 698'; params='@param int $optionall  
@param string $all  
@param string $orderby  
@param string $order  
@param int $show_last_update  
@param int $show_count  
@param int $hide_empty  
@param bool $optionnone  
@param int $selected  
@param int $exclude  '; return='unknown '; since='0.71 '; type='function';}, 
	{name='dropdown_link_categories'; match='dropdown_link_categories'; definition='dropdown_link_categories($default=0)'; description='{ '; file='/wp-admin/includes/deprecated.php, line: 85'; type='function';}, 
	{name='dynamic_sidebar'; match='dynamic_sidebar'; definition='dynamic_sidebar($index=1)'; description='Display dynamic sidebar. 
By default it displays the default sidebar or &apos;sidebar-1&apos;. The &apos;sidebar-1&apos; is not named by the theme, the actual name is &apos;1&apos;, but &apos;sidebar-&apos; is added to the registered sidebars for the name. If you named your sidebar &apos;after-post&apos;, then the parameter $index will still be &apos;after-post&apos;, but the lookup will be for &apos;sidebar-after-post&apos;. 
It is confusing for the $index parameter, but just know that it should just work. When you register the sidebar in the theme, you will use the same name for this function or &quot;Pay no heed to the man behind the curtain.&quot; Just accept it as an oddity of WordPress sidebar register and display. 
'; file='/wp-includes/widgets.php, line: 841'; params='@param int string $index Optional, default is 1. Name or ID of dynamic sidebar.  '; return='bool True, if widget sidebar was found and called. False if not found or not called. '; since='2.2.0 '; type='function';}, 
	{name='edit_bookmark_link'; match='edit_bookmark_link'; definition='edit_bookmark_link($link=\'\', $before=\'\', $after=\'\', $bookmark=null)'; description='Display edit bookmark (literally a URL external to blog) link anchor content. 
'; file='/wp-includes/link-template.php, line: 1047'; params='@param string $link Optional. Anchor text.  
@param string $before Optional. Display before edit link.  
@param string $after Optional. Display after edit link.  
@param int $bookmark Optional. Bookmark ID.  '; since='2.7.0 '; type='function';}, 
	{name='edit_comment'; match='edit_comment'; definition='edit_comment()'; description='Update a comment with values provided in $_POST. 
'; file='/wp-admin/includes/comment.php, line: 34'; since='2.0.0 '; type='function';}, 
	{name='edit_comment_link'; match='edit_comment_link'; definition='edit_comment_link($link=null, $before=\'\', $after=\'\')'; description='Display or retrieve edit comment link with formatting. 
'; file='/wp-includes/link-template.php, line: 1006'; params='@param string $link Optional. Anchor text.  
@param string $before Optional. Display before edit link.  
@param string $after Optional. Display after edit link.  '; return='string|null HTML content, if $echo is set to false. '; since='1.0.0 '; type='function';}, 
	{name='edit_link'; match='edit_link'; definition='edit_link($link_id=0)'; description='Update or insert a link using values provided in $_POST. 
'; file='/wp-admin/includes/bookmark.php, line: 28'; params='@param int $link_id Optional. ID of the link to edit.  '; return='int|WP_Error Value 0 or <code>WP_Error</code> on failure. The link ID on success. '; since='2.0.0 '; type='function';}, 
	{name='edit_post'; match='edit_post'; definition='edit_post($post_data=null)'; description='Update an existing post with values provided in $_POST. 
'; file='/wp-admin/includes/post.php, line: 140'; params='@param array $post_data Optional.  '; return='int Post ID. '; since='1.5.0 '; type='function';}, 
	{name='edit_post_link'; match='edit_post_link'; definition='edit_post_link($link=null, $before=\'\', $after=\'\', $id=0)'; description='Display edit post link for post. 
'; file='/wp-includes/link-template.php, line: 930'; params='@param string $link Optional. Anchor text.  
@param string $before Optional. Display before edit link.  
@param string $after Optional. Display after edit link.  
@param int $id Optional. Post ID.  '; since='1.0.0 '; type='function';}, 
	{name='edit_tag_link'; match='edit_tag_link'; definition='edit_tag_link($link=\'\', $before=\'\', $after=\'\', $tag=null)'; description='Display or retrieve edit tag link with formatting. 
'; file='/wp-includes/link-template.php, line: 674'; params='@param string $link Optional. Anchor text.  
@param string $before Optional. Display before edit link.  
@param string $after Optional. Display after edit link.  
@param int object $tag Tag object or ID  '; return='string HTML content. '; since='2.7.0 '; type='function';}, 
	{name='edit_term_link'; match='edit_term_link'; definition='edit_term_link($link=\'\', $before=\'\', $after=\'\', $term=null, $echo=true)'; description='Display or retrieve edit term link with formatting. 
'; file='/wp-includes/link-template.php, line: 721'; params='@param string $link Optional. Anchor text.  
@param string $before Optional. Display before edit link.  
@param string $after Optional. Display after edit link.  
@param object $term Term object  '; return='string HTML content. '; since='3.1.0 '; type='function';}, 
	{name='edit_user'; match='edit_user'; definition='edit_user($user_id=0)'; description='Edit user settings based on contents of $_POST 
Used on user-edit.php and profile.php to manage and process user options, passwords etc. 
'; file='/wp-admin/includes/user.php, line: 56'; params='@param int $user_id Optional. User ID.  '; return='int user id of the updated user '; since='2.0 '; type='function';}, 
	{name='email_exists'; match='email_exists'; definition='email_exists($email)'; description='Checks whether the given email exists. 

'; file='/wp-includes/user.php, line: 1315'; params='@param string $email Email.  '; return='bool|int The user&apos;s ID on success, and false on failure. '; since='2.1.0 '; uses='$wpdb'; type='function';}, 
	{name='endElement'; match='endElement'; definition='endElement($parser, $tagName)'; description=''; file='/wp-admin/link-parse-opml.php, line: 79'; type='function';}, 
	{name='enqueue_comment_hotkeys_js'; match='enqueue_comment_hotkeys_js'; definition='enqueue_comment_hotkeys_js()'; description=''; file='/wp-admin/includes/comment.php, line: 155'; type='function';}, 
	{name='ent2ncr'; match='ent2ncr'; definition='ent2ncr($text)'; description='Converts named entities into numbered entities. 
'; file='/wp-includes/formatting.php, line: 1877'; params='@param string $text The text within which entities will be converted.  '; return='string Text with converted entities. '; since='1.5.1 '; type='function';}, 
	{name='error'; match='error'; definition='error($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 77'; type='function';}, 
	{name='esc_attr'; match='esc_attr'; definition='esc_attr()'; description=''; file='/wp-admin/load-styles.php, line: 33'; type='function';}, 
	{name='esc_attr__'; match='esc_attr__'; definition='esc_attr__($text, $domain=\'default\')'; description='Retrieves the translation of $text and escapes it for safe use in an attribute. If there is no translation, or the domain isn&apos;t loaded the original text is returned. 
@see translate() An alias of translate() esc_attr() '; file='/wp-includes/l10n.php, line: 112'; params='@param string $text Text to translate  
@param string $domain Optional. Domain to retrieve the translated text  '; return='string Translated text '; since='2.8.0 '; type='function';}, 
	{name='esc_attr_e'; match='esc_attr_e'; definition='esc_attr_e($text, $domain=\'default\')'; description='Displays translated text that has been escaped for safe use in an attribute. 
@see translate() Echoes returned translate() string esc_attr() '; file='/wp-includes/l10n.php, line: 155'; params='@param string $text Text to translate  
@param string $domain Optional. Domain to retrieve the translated text  '; since='2.8.0 '; type='function';}, 
	{name='esc_attr_x'; match='esc_attr_x'; definition='esc_attr_x($single, $context, $domain=\'default\')'; description=''; file='/wp-includes/l10n.php, line: 208'; type='function';}, 
	{name='esc_html'; match='esc_html'; definition='esc_html($text)'; description='Escaping for HTML blocks. 
'; file='/wp-includes/formatting.php, line: 2333'; params='@param string $text  '; return='string '; since='2.8.0 '; type='function';}, 
	{name='esc_html__'; match='esc_html__'; definition='esc_html__($text, $domain=\'default\')'; description='Retrieves the translation of $text and escapes it for safe use in HTML output. If there is no translation, or the domain isn&apos;t loaded the original text is returned. 
@see translate() An alias of translate() esc_html() '; file='/wp-includes/l10n.php, line: 128'; params='@param string $text Text to translate  
@param string $domain Optional. Domain to retrieve the translated text  '; return='string Translated text '; since='2.8.0 '; type='function';}, 
	{name='esc_html_e'; match='esc_html_e'; definition='esc_html_e($text, $domain=\'default\')'; description='Displays translated text that has been escaped for safe use in HTML output. 
@see translate() Echoes returned translate() string esc_html() '; file='/wp-includes/l10n.php, line: 169'; params='@param string $text Text to translate  
@param string $domain Optional. Domain to retrieve the translated text  '; since='2.8.0 '; type='function';}, 
	{name='esc_html_x'; match='esc_html_x'; definition='esc_html_x($single, $context, $domain=\'default\')'; description=''; file='/wp-includes/l10n.php, line: 212'; type='function';}, 
	{name='esc_js'; match='esc_js'; definition='esc_js($text)'; description='Escape single quotes, htmlspecialchar \" &lt; &gt; &amp;, and fix line endings. 
Escapes text strings for echoing in JS. It is intended to be used for inline JS (in a tag attribute, for example onclick=&quot;...&quot;). Note that the strings have to be in single quotes. The filter &apos;js_escape&apos; is also applied here. 
'; file='/wp-includes/formatting.php, line: 2316'; params='@param string $text The text to be escaped.  '; return='string Escaped text. '; since='2.8.0 '; type='function';}, 
	{name='esc_sql'; match='esc_sql'; definition='esc_sql($sql)'; description='Escapes data for use in a MySQL query 
This is just a handy shortcut for $wpdb-&gt;escape(), for completeness&apos; sake 
'; file='/wp-includes/formatting.php, line: 2220'; params='@param string $sql Unescaped SQL data  '; return='string The cleaned $sql '; since='2.8.0 '; type='function';}, 
	{name='esc_textarea'; match='esc_textarea'; definition='esc_textarea($text)'; description='Escaping for textarea values. 
'; file='/wp-includes/formatting.php, line: 2361'; params='@param string $text  '; return='string '; since='3.1 '; type='function';}, 
	{name='esc_url'; match='esc_url'; definition='esc_url($url, $protocols=null, $_context=\'display\')'; description='Checks and cleans a URL. 
A number of characters are removed from the URL. If the URL is for displaying (the default behaviour) amperstands are also replaced. The &apos;clean_url&apos; filter is applied to the returned cleaned URL. 

'; file='/wp-includes/formatting.php, line: 2242'; params='@param string $url The URL to be cleaned.  
@param array $protocols Optional. An array of acceptable protocols. Defaults to \'http\', \'https\', \'ftp\', \'ftps\', \'mailto\', \'news\', \'irc\', \'gopher\', \'nntp\', \'feed\', \'telnet\' if not set.  
@param string $_context Private. Use esc_url_raw() for database usage.  '; return='string The cleaned $url after the &apos;clean_url&apos; filter is applied. '; since='2.8.0 '; uses='wp_kses_bad_protocol() To only permit protocols in the URL set via $protocols or the common ones set in the function.'; type='function';}, 
	{name='esc_url_raw'; match='esc_url_raw'; definition='esc_url_raw($url, $protocols=null)'; description='Performs esc_url() for database usage. 

'; file='/wp-includes/formatting.php, line: 2284'; params='@param string $url The URL to be cleaned.  
@param array $protocols An array of acceptable protocols.  '; return='string The cleaned URL. '; since='2.8.0 '; uses='esc_url()'; type='function';}, 
	{name='export_date_options'; match='export_date_options'; definition='export_date_options()'; description=''; file='/wp-admin/export.php, line: 93'; type='function';}, 
	{name='extract_from_markers'; match='extract_from_markers'; definition='extract_from_markers($filename, $marker)'; description='{ '; file='/wp-admin/includes/misc.php, line: 30'; type='function';}, 
	{name='fatal'; match='fatal'; definition='fatal($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 91'; type='function';}, 
	{name='favorite_actions'; match='favorite_actions'; definition='favorite_actions($screen=null)'; description='{ '; file='/wp-admin/includes/template.php, line: 1402'; type='function';}, 
	{name='feed_content_type'; match='feed_content_type'; definition='feed_content_type($type=\'\')'; description=''; file='/wp-includes/feed.php, line: 505'; type='function';}, 
	{name='feed_links'; match='feed_links'; definition='feed_links($args=array())'; description='Display the links to the general feeds. 
'; file='/wp-includes/general-template.php, line: 1598'; params='@param array $args Optional arguments.  '; since='2.8.0 '; type='function';}, 
	{name='feed_links_extra'; match='feed_links_extra'; definition='feed_links_extra($args=array())'; description='Display the links to the extra feeds such as category feeds. 
'; file='/wp-includes/general-template.php, line: 1624'; params='@param array $args Optional arguments.  '; since='2.8.0 '; type='function';}, 
	{name='fetch_feed'; match='fetch_feed'; definition='fetch_feed($url)'; description='Build <code>SimplePie</code> object based on RSS or Atom feed from URL. 
'; file='/wp-includes/feed.php, line: 530'; params='@param string $url URL to retrieve feed  '; return='WP_Error|SimplePie <code>WP_Error</code> object on failure or <code>SimplePie</code> object on success '; since='2.8 '; type='function';}, 
	{name='filter_SSL'; match='filter_SSL'; definition='filter_SSL($url)'; description='Formats an String URL to use HTTPS if HTTP is found. Useful as a filter. 
'; file='/wp-includes/ms-functions.php, line: 2032'; since='2.8.5 '; type='function';}, 
	{name='find_core_update'; match='find_core_update'; definition='find_core_update($version, $locale)'; description=''; file='/wp-admin/includes/update.php, line: 73'; type='function';}, 
	{name='find_posts_div'; match='find_posts_div'; definition='find_posts_div($found_action=\'\')'; description='{ '; file='/wp-admin/includes/template.php, line: 1346'; type='function';}, 
	{name='fix_import_form_size'; match='fix_import_form_size'; definition='fix_import_form_size($size)'; description='Get the remaining upload space for this blog. 

'; file='/wp-includes/ms-functions.php, line: 1644'; params='@param int $size  '; return='int '; since='MU '; uses='upload_is_user_over_quota() 
get_space_allowed() 
get_dirsize()'; type='function';}, 
	{name='fix_phpmailer_messageid'; match='fix_phpmailer_messageid'; definition='fix_phpmailer_messageid($phpmailer)'; description='Correct From host on outgoing mail to match the site domain 
'; file='/wp-includes/ms-functions.php, line: 1875'; since='MU '; type='function';}, 
	{name='floated_admin_avatar'; match='floated_admin_avatar'; definition='floated_admin_avatar($name)'; description='Add avatars to relevant places in admin, or try to. 

'; file='/wp-admin/includes/comment.php, line: 149'; params='@param string $name User name.  '; return='string Avatar with Admin name. '; since='2.5.0 '; uses='$comment'; type='function';}, 
	{name='force_balance_tags'; match='force_balance_tags'; definition='force_balance_tags($text)'; description='Balances tags of string using a modified stack. 
@author Leonard Lin &lt; leonard@acm.org &gt; GPL November 4, 2001 @version 1.1 '; file='/wp-includes/formatting.php, line: 1000'; since='2.0.4 '; type='function';}, 
	{name='force_ssl_admin'; match='force_ssl_admin'; definition='force_ssl_admin($force=null)'; description='Whether to force SSL used for the Administration Screens. 
'; file='/wp-includes/functions.php, line: 3652'; params='@param string bool $force  '; return='bool True if forced, false if not forced. '; since='2.6.0 '; type='function';}, 
	{name='force_ssl_content'; match='force_ssl_content'; definition='force_ssl_content($force=\'\')'; description='Whether to force SSL on content. 
'; file='/wp-includes/ms-functions.php, line: 2014'; params='@param string bool $force  '; return='bool True if forced, false if not forced. '; since='2.8.5 '; type='function';}, 
	{name='force_ssl_login'; match='force_ssl_login'; definition='force_ssl_login($force=null)'; description='Whether SSL login should be forced. 
'; file='/wp-includes/functions.php, line: 3632'; params='@param string bool $force Optional.  '; return='bool True if forced, false if not forced. '; since='2.6.0 '; type='function';}, 
	{name='form_option'; match='form_option'; definition='form_option($option)'; description=''; file='/wp-includes/functions.php, line: 419'; type='function';}, 
	{name='format_code_lang'; match='format_code_lang'; definition='format_code_lang($code=\'\')'; description=''; file='/wp-admin/includes/ms.php, line: 469'; type='function';}, 
	{name='format_to_edit'; match='format_to_edit'; definition='format_to_edit($content, $richedit=false)'; description='Acts on text which is about to be edited. 
Unless $richedit is set, it is simply a holder for the &apos;format_to_edit&apos; filter. If $richedit is set true htmlspecialchars(), through esc_textarea(), will be run on the content, converting special characters to HTML entities. 
'; file='/wp-includes/formatting.php, line: 1115'; params='@param string $content The text about to be edited.  
@param bool $richedit Whether the $content should pass through htmlspecialchars(). Default false.  '; return='string The text after the filter (and possibly htmlspecialchars()) has been run. '; since='0.71 '; type='function';}, 
	{name='format_to_post'; match='format_to_post'; definition='format_to_post($content)'; description='Holder for the &apos;format_to_post&apos; filter. 
'; file='/wp-includes/formatting.php, line: 1130'; params='@param string $content The text to pass through the filter.  '; return='string Text returned from the &apos;format_to_post&apos; filter. '; since='0.71 '; type='function';}, 
	{name='ftp::__construct'; match='__construct'; definition='__construct($verb=FALSE, $le=FALSE)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 34'; type='method';}, 
	{name='ftp::_connect'; match='_connect'; definition='_connect($host, $port)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 56'; type='method';}, 
	{name='ftp::_data_close'; match='_data_close'; definition='_data_close()'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 235'; type='method';}, 
	{name='ftp::_data_prepare'; match='_data_prepare'; definition='_data_prepare($mode=FTP_ASCII)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 113'; type='method';}, 
	{name='ftp::_data_read'; match='_data_read'; definition='_data_read($mode=FTP_ASCII, $fp=NULL)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 177'; type='method';}, 
	{name='ftp::_data_write'; match='_data_write'; definition='_data_write($mode=FTP_ASCII, $fp=NULL)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 200'; type='method';}, 
	{name='ftp::_data_write_block'; match='_data_write_block'; definition='_data_write_block($mode, $block)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 222'; type='method';}, 
	{name='ftp::_exec'; match='_exec'; definition='_exec($cmd, $fnction=\"_exec\")'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 97'; type='method';}, 
	{name='ftp::_quit'; match='_quit'; definition='_quit()'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 242'; type='method';}, 
	{name='ftp::_readmsg'; match='_readmsg'; definition='_readmsg($fnction=\"_readmsg\")'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 73'; type='method';}, 
	{name='ftp::_settimeout'; match='_settimeout'; definition='_settimeout($sock)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 42'; type='method';}, 
	{name='ftp::ftp'; match='ftp'; definition='ftp($verb=FALSE, $le=FALSE)'; description=''; file='/wp-admin/includes/class-ftp-sockets.php, line: 30'; type='method';}, 
	{name='ftp_base::Passive'; match='Passive'; definition='Passive($pasv=NULL)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 259'; type='method';}, 
	{name='ftp_base::PopError'; match='PopError'; definition='PopError()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 893'; type='method';}, 
	{name='ftp_base::PushError'; match='PushError'; definition='PushError($fctname, $msg, $desc=false)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 881'; type='method';}, 
	{name='ftp_base::SendMSG'; match='SendMSG'; definition='SendMSG($message=\"\", $crlf=true)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 226'; type='method';}, 
	{name='ftp_base::SetServer'; match='SetServer'; definition='SetServer($host, $port=21, $reconnect=true)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 271'; type='method';}, 
	{name='ftp_base::SetTimeout'; match='SetTimeout'; definition='SetTimeout($timeout=30)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 311'; type='method';}, 
	{name='ftp_base::SetType'; match='SetType'; definition='SetType($mode=FTP_AUTOASCII)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 234'; type='method';}, 
	{name='ftp_base::SetUmask'; match='SetUmask'; definition='SetUmask($umask=0022)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 304'; type='method';}, 
	{name='ftp_base::__construct'; match='__construct'; definition='__construct($port_mode=FALSE, $verb=FALSE, $le=FALSE)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 128'; type='method';}, 
	{name='ftp_base::_checkCode'; match='_checkCode'; definition='_checkCode()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 850'; type='method';}, 
	{name='ftp_base::_list'; match='_list'; definition='_list($arg=\"\", $cmd=\"LIST\", $fnction=\"_list\")'; description=''; file='/wp-admin/includes/class-ftp.php, line: 854'; type='method';}, 
	{name='ftp_base::_settype'; match='_settype'; definition='_settype($mode=FTP_ASCII)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 244'; type='method';}, 
	{name='ftp_base::abort'; match='abort'; definition='abort()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 430'; type='method';}, 
	{name='ftp_base::cdup'; match='cdup'; definition='cdup()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 386'; type='method';}, 
	{name='ftp_base::chdir'; match='chdir'; definition='chdir($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 392'; type='method';}, 
	{name='ftp_base::chmod'; match='chmod'; definition='chmod($pathname, $mode)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 472'; type='method';}, 
	{name='ftp_base::connect'; match='connect'; definition='connect($server=NULL)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 319'; type='method';}, 
	{name='ftp_base::delete'; match='delete'; definition='delete($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 460'; type='method';}, 
	{name='ftp_base::dirlist'; match='dirlist'; definition='dirlist($remote)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 826'; type='method';}, 
	{name='ftp_base::features'; match='features'; definition='features()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 491'; type='method';}, 
	{name='ftp_base::fget'; match='fget'; definition='fget($fp, $remotefile, $rest=0)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 527'; type='method';}, 
	{name='ftp_base::file_exists'; match='file_exists'; definition='file_exists($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 515'; type='method';}, 
	{name='ftp_base::filesize'; match='filesize'; definition='filesize($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 420'; type='method';}, 
	{name='ftp_base::fput'; match='fput'; definition='fput($remotefile, $fp)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 586'; type='method';}, 
	{name='ftp_base::ftp_base'; match='ftp_base'; definition='ftp_base($port_mode=FALSE)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 124'; type='method';}, 
	{name='ftp_base::get'; match='get'; definition='get($remotefile, $localfile=NULL, $rest=0)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 551'; type='method';}, 
	{name='ftp_base::glob'; match='glob'; definition='glob($pattern, $handle=NULL)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 768'; type='method';}, 
	{name='ftp_base::glob_pattern_match'; match='glob_pattern_match'; definition='glob_pattern_match($pattern, $string)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 795'; type='method';}, 
	{name='ftp_base::glob_regexp'; match='glob_regexp'; definition='glob_regexp($pattern, $probe)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 818'; type='method';}, 
	{name='ftp_base::is_exists'; match='is_exists'; definition='is_exists($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 511'; type='method';}, 
	{name='ftp_base::login'; match='login'; definition='login($user=NULL, $pass=NULL)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 361'; type='method';}, 
	{name='ftp_base::mdel'; match='mdel'; definition='mdel($remote, $continious=false)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 721'; type='method';}, 
	{name='ftp_base::mdtm'; match='mdtm'; definition='mdtm($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 440'; type='method';}, 
	{name='ftp_base::mget'; match='mget'; definition='mget($remote, $local=\".\", $continious=false)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 682'; type='method';}, 
	{name='ftp_base::mkdir'; match='mkdir'; definition='mkdir($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 404'; type='method';}, 
	{name='ftp_base::mmkdir'; match='mmkdir'; definition='mmkdir($dir, $mode=0777)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 759'; type='method';}, 
	{name='ftp_base::mput'; match='mput'; definition='mput($local=\".\", $remote=NULL, $continious=false)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 649'; type='method';}, 
	{name='ftp_base::nlist'; match='nlist'; definition='nlist($pathname=\"\")'; description=''; file='/wp-admin/includes/class-ftp.php, line: 507'; type='method';}, 
	{name='ftp_base::parselisting'; match='parselisting'; definition='parselisting($line)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 164'; type='method';}, 
	{name='ftp_base::put'; match='put'; definition='put($localfile, $remotefile=NULL, $rest=0)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 610'; type='method';}, 
	{name='ftp_base::pwd'; match='pwd'; definition='pwd()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 380'; type='method';}, 
	{name='ftp_base::quit'; match='quit'; definition='quit($force=false)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 350'; type='method';}, 
	{name='ftp_base::rawlist'; match='rawlist'; definition='rawlist($pathname=\"\", $arg=\"\")'; description=''; file='/wp-admin/includes/class-ftp.php, line: 503'; type='method';}, 
	{name='ftp_base::rename'; match='rename'; definition='rename($from, $to)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 410'; type='method';}, 
	{name='ftp_base::restore'; match='restore'; definition='restore($from)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 477'; type='method';}, 
	{name='ftp_base::rmdir'; match='rmdir'; definition='rmdir($pathname)'; description=''; file='/wp-admin/includes/class-ftp.php, line: 398'; type='method';}, 
	{name='ftp_base::site'; match='site'; definition='site($command, $fnction=\"site\")'; description=''; file='/wp-admin/includes/class-ftp.php, line: 466'; type='method';}, 
	{name='ftp_base::systype'; match='systype'; definition='systype()'; description=''; file='/wp-admin/includes/class-ftp.php, line: 453'; type='method';}, 
	{name='funky_javascript_callback'; match='funky_javascript_callback'; definition='funky_javascript_callback($matches)'; description='Callback used to change uXXXX to &amp;#YYY; syntax 

'; file='/wp-includes/deprecated.php, line: 2501'; params='@param array $matches Single Match  '; return='string An HTML entity '; since='2.8.0 '; type='function';}, 
	{name='funky_javascript_fix'; match='funky_javascript_fix'; definition='funky_javascript_fix($text)'; description='Fixes javascript bugs in browsers. 
Converts unicode characters to HTML numbered entities. 

'; file='/wp-includes/deprecated.php, line: 2518'; params='@param string $text Text to be made safe.  '; return='string Fixed text. '; since='1.5.0 '; uses='$is_macIE 
$is_winIE '; type='function';}, 
	{name='gallery_shortcode'; match='gallery_shortcode'; definition='gallery_shortcode($attr)'; description='The Gallery shortcode. 
This implements the functionality of the Gallery Shortcode for displaying WordPress images on a post. 
'; file='/wp-includes/media.php, line: 758'; params='@param array $attr Attributes attributed to the shortcode.  '; return='string HTML content to display gallery. '; since='2.5.0 '; type='function';}, 
	{name='gd_edit_image_support'; match='gd_edit_image_support'; definition='gd_edit_image_support($mime_type)'; description='Check if the installed version of GD supports particular image type 
'; file='/wp-includes/media.php, line: 973'; params='@param string $mime_type  '; return='bool '; since='2.9.0 '; type='function';}, 
	{name='generate_random_password'; match='generate_random_password'; definition='generate_random_password($len=8)'; description='@see wp_generate_password() '; file='/wp-includes/ms-deprecated.php, line: 22'; since='MU '; type='function';}, 
	{name='generic_ping'; match='generic_ping'; definition='generic_ping($post_id=0)'; description='Sends pings to all of the ping site services. 
'; file='/wp-includes/comment.php, line: 1744'; params='@param int $post_id Post ID. Not actually used.  '; return='int Same as Post ID from parameter '; since='1.2.0 '; type='function';}, 
	{name='getLogger'; match='getLogger'; definition='getLogger()'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 44'; type='function';}, 
	{name='getRequestParam'; match='getRequestParam'; definition='getRequestParam($name, $default_value=false)'; description='Returns an request value by name without magic quoting. 
'; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 28'; params='@param String $name Name of parameter to get.  
@param String $default_value Default value to return if value not found.  '; return='String request value by name without magic quoting or default value. '; type='function';}, 
	{name='get_404_template'; match='get_404_template'; definition='get_404_template()'; description='Retrieve path of 404 template in current or parent template. 
'; file='/wp-includes/theme.php, line: 771'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_active_blog_for_user'; match='get_active_blog_for_user'; definition='get_active_blog_for_user($user_id)'; description='Get one of a user&apos;s active blogs 
Returns the user&apos;s primary blog, if she has one and it is active. If it&apos;s inactive, function returns another active blog of the user. If none are found, the user is added as a Subscriber to the Dashboard Blog and that blog is returned. 

'; file='/wp-includes/ms-functions.php, line: 68'; params='@param int $user_id The unique ID of the user  '; return='object The blog object '; since='MU 1.0 '; uses='get_blogs_of_user() 
add_user_to_blog() 
get_blog_details()'; type='function';}, 
	{name='get_adjacent_post'; match='get_adjacent_post'; definition='get_adjacent_post($in_same_cat=false, $excluded_categories=\'\', $previous=true)'; description='Retrieve adjacent post. 
Can either be next or previous post. 
'; file='/wp-includes/link-template.php, line: 1100'; params='@param bool $in_same_cat Optional. Whether post should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  
@param bool $previous Optional. Whether to retrieve previous post.  '; return='mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists. '; since='2.5.0 '; type='function';}, 
	{name='get_adjacent_post_rel_link'; match='get_adjacent_post_rel_link'; definition='get_adjacent_post_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\', $previous=true)'; description='Get adjacent post relational link. 
Can either be next or previous post relational link. 
'; file='/wp-includes/link-template.php, line: 1167'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  
@param bool $previous Optional, default is true. Whether display link to previous post.  '; return='string '; since='2.8.0 '; type='function';}, 
	{name='get_admin_page_parent'; match='get_admin_page_parent'; definition='get_admin_page_parent($parent=\'\')'; description=''; file='/wp-admin/includes/plugin.php, line: 1333'; type='function';}, 
	{name='get_admin_page_title'; match='get_admin_page_title'; definition='get_admin_page_title()'; description=''; file='/wp-admin/includes/plugin.php, line: 1406'; type='function';}, 
	{name='get_admin_url'; match='get_admin_url'; definition='get_admin_url($blog_id=null, $path=\'\', $scheme=\'admin\')'; description=''; file='/wp-includes/link-template.php, line: 2068'; type='function';}, 
	{name='get_admin_users_for_domain'; match='get_admin_users_for_domain'; definition='get_admin_users_for_domain($sitedomain=\'\', $path=\'\')'; description='Get the admin for a domain/path combination. 
'; file='/wp-includes/ms-functions.php, line: 37'; params='@param string $sitedomain Optional. Site domain.  
@param string $path Optional. Site path.  '; return='array The network admins '; since='MU 1.0 '; type='function';}, 
	{name='get_all_category_ids'; match='get_all_category_ids'; definition='get_all_category_ids()'; description='Retrieves all category IDs. 
'; file='/wp-includes/category.php, line: 16'; since='2.0.0 <code>object List of all of the category IDs. </code> '; type='function';}, 
	{name='get_all_page_ids'; match='get_all_page_ids'; definition='get_all_page_ids()'; description='Get a list of page IDs. 

'; file='/wp-includes/post.php, line: 3123'; return='array List of page IDs. '; since='2.0.0 '; uses='$wpdb'; type='function';}, 
	{name='get_all_user_settings'; match='get_all_user_settings'; definition='get_all_user_settings()'; description=''; file='/wp-includes/functions.php, line: 957'; type='function';}, 
	{name='get_alloptions'; match='get_alloptions'; definition='get_alloptions()'; description='Retrieve all autoload options, or all options if no autoloaded ones exist. 
@see wp_load_alloptions() '; file='/wp-includes/deprecated.php, line: 1873'; return='array List of all options. '; since='1.0.0 '; type='function';}, 
	{name='get_allowed_mime_types'; match='get_allowed_mime_types'; definition='get_allowed_mime_types()'; description='Retrieve list of allowed mime types and file extensions. 
'; file='/wp-includes/functions.php, line: 2547'; return='array Array of mime types keyed by the file extension regex corresponding to those types. '; since='2.8.6 '; type='function';}, 
	{name='get_allowed_themes'; match='get_allowed_themes'; definition='get_allowed_themes()'; description='Get the allowed themes for the current blog. 

'; file='/wp-admin/includes/theme.php, line: 134'; return='array $themes Array of allowed themes. '; since='3.0.0 '; uses='get_themes() 
current_theme_info() 
get_site_allowed_themes() 
wpmu_get_blog_allowedthemes'; type='function';}, 
	{name='get_ancestors'; match='get_ancestors'; definition='get_ancestors($object_id=0, $object_type=\'\')'; description='Get an array of ancestor IDs for a given object. 
'; file='/wp-includes/taxonomy.php, line: 3105'; params='@param int $object_id The ID of the object  
@param string $object_type The type of object for which we\'ll be retrieving ancestors.  '; return='array of ancestors from lowest to highest in the hierarchy. '; type='function';}, 
	{name='get_approved_comments'; match='get_approved_comments'; definition='get_approved_comments($post_id)'; description='Retrieve the approved comments for post $post_id. 

'; file='/wp-includes/comment.php, line: 108'; params='@param int $post_id The ID of the post  '; return='array $comments The approved comments '; since='2.0.0 '; uses='$wpdb'; type='function';}, 
	{name='get_archive_template'; match='get_archive_template'; definition='get_archive_template()'; description='Retrieve path of archive template in current or parent template. 
'; file='/wp-includes/theme.php, line: 782'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_archives'; match='get_archives'; definition='get_archives($type=\'\', $limit=\'\', $format=\'html\', $before=\'\', $after=\'\', $show_post_count=false)'; description='@see wp_get_archives() '; file='/wp-includes/deprecated.php, line: 783'; params='@param string $type  
@param string $limit  
@param string $format  
@param string $before  
@param string $after  
@param bool $show_post_count  '; return='unknown '; since='0.71 '; type='function';}, 
	{name='get_archives_link'; match='get_archives_link'; definition='get_archives_link($url, $text, $format=\'html\', $before=\'\', $after=\'\')'; description='Retrieve archive link content based on predefined or custom code. 
The format can be one of four styles. The &apos;link&apos; for head element, &apos;option&apos; for use in the select element, &apos;html&apos; for use in list (either ol or ul HTML elements). Custom content is also supported using the before and after parameters. 
The &apos;link&apos; format uses the link HTML element with the archives relationship. The before and after parameters are not used. The text parameter is used to describe the link. 
The &apos;option&apos; format uses the option HTML element for use in select element. The value is the url parameter and the before and after parameters are used between the text description. 
The &apos;html&apos; format, which is the default, uses the li HTML element for use in the list HTML elements. The before parameter is before the link and the after parameter is after the closing link. 
The custom format uses the before parameter before the link (&apos;a&apos; HTML element) and the after parameter after the closing link tag. If the above three values for the format are not used, then custom format is assumed. 
'; file='/wp-includes/general-template.php, line: 832'; params='@param string $url URL to archive.  
@param string $text Archive text description.  
@param string $format Optional, default is \'html\'. Can be \'link\', \'option\', \'html\', or custom.  
@param string $before Optional.  
@param string $after Optional.  '; return='string HTML link content for archive. '; since='1.0.0 '; type='function';}, 
	{name='get_attached_file'; match='get_attached_file'; definition='get_attached_file($attachment_id, $unfiltered=false)'; description='Retrieve attached file path based on attachment ID. 
You can optionally send it through the &apos;get_attached_file&apos; filter, but by default it will just return the file path unfiltered. 
The function works by getting the single post meta name, named &apos;_wp_attached_file&apos; and returning it. This is a convenience function to prevent looking up the meta name and provide a mechanism for sending the attached filename through a filter. 

'; file='/wp-includes/post.php, line: 172'; params='@param int $attachment_id Attachment ID.  
@param bool $unfiltered Whether to apply filters.  '; return='string The file path to the attached file. '; since='2.0.0 '; uses='apply_filters() Calls \'get_attached_file\' on file path and attachment ID.'; type='function';}, 
	{name='get_attachment_fields_to_edit'; match='get_attachment_fields_to_edit'; definition='get_attachment_fields_to_edit($post, $errors=null)'; description='{ '; file='/wp-admin/includes/media.php, line: 1075'; type='function';}, 
	{name='get_attachment_icon'; match='get_attachment_icon'; definition='get_attachment_icon($id=0, $fullsize=false, $max_dims=false)'; description='Retrieve HTML content of icon attachment image element. 
@see wp_get_attachment_image() '; file='/wp-includes/deprecated.php, line: 1966'; params='@param int $id Optional. Post ID.  
@param bool $fullsize Optional, default to false. Whether to have full size image.  
@param array $max_dims Optional. Dimensions of image.  '; return='string HTML content. '; since='2.0.0 '; type='function';}, 
	{name='get_attachment_icon_src'; match='get_attachment_icon_src'; definition='get_attachment_icon_src($id=0, $fullsize=false)'; description='Retrieve icon URL and Path. 
@see wp_get_attachment_image_src() '; file='/wp-includes/deprecated.php, line: 1921'; params='@param int $id Optional. Post ID.  
@param bool $fullsize Optional, default to false. Whether to have full image.  '; return='array Icon URL and full path to file, respectively. '; since='2.1.0 '; type='function';}, 
	{name='get_attachment_innerHTML'; match='get_attachment_innerHTML'; definition='get_attachment_innerHTML($id=0, $fullsize=false, $max_dims=false)'; description='Retrieve HTML content of image element. 
@see wp_get_attachment_image() '; file='/wp-includes/deprecated.php, line: 2023'; params='@param int $id Optional. Post ID.  
@param bool $fullsize Optional, default to false. Whether to have full size image.  
@param array $max_dims Optional. Dimensions of image.  '; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_attachment_link'; match='get_attachment_link'; definition='get_attachment_link($id=false)'; description='Retrieve permalink for attachment. 
This can be used in the WordPress Loop or outside of it. 
'; file='/wp-includes/link-template.php, line: 302'; params='@param int $id Optional. Post ID.  '; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_attachment_taxonomies'; match='get_attachment_taxonomies'; definition='get_attachment_taxonomies($attachment)'; description='Retrieve taxonomies attached to the attachment. 
'; file='/wp-includes/media.php, line: 934'; params='@param int array object $attachment Attachment ID, Attachment data array, or Attachment data object.  '; return='array Empty array on failure. List of taxonomies on success. '; since='2.5.0 '; type='function';}, 
	{name='get_attachment_template'; match='get_attachment_template'; definition='get_attachment_template()'; description='Retrieve path of attachment template in current or parent template. 
The attachment path first checks if the first part of the mime type exists. The second check is for the second part of the mime type. The last check is for both types separated by an underscore. If neither are found then the file &apos;attachment.php&apos; is checked and returned. 
Some examples for the &apos;text/plain&apos; mime type are &apos;text.php&apos;, &apos;plain.php&apos;, and finally &apos;text_plain.php&apos;. 
'; file='/wp-includes/theme.php, line: 1028'; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_author_feed_link'; match='get_author_feed_link'; definition='get_author_feed_link($author_id, $feed=\'\')'; description=''; file='/wp-includes/link-template.php, line: 536'; type='function';}, 
	{name='get_author_link'; match='get_author_link'; definition='get_author_link($echo=false, $author_id, $author_nicename=\'\')'; description='Returns or Prints link to the author&apos;s posts. 
@see get_author_posts_url() '; file='/wp-includes/deprecated.php, line: 802'; params='@param bool $echo Optional.  
@param int $author_id Required.  
@param string $author_nicename Optional.  '; return='string|null '; since='1.2 '; type='function';}, 
	{name='get_author_name'; match='get_author_name'; definition='get_author_name($auth_id=false)'; description='Retrieve the specified author&apos;s preferred display name. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1612'; params='@param int $auth_id The ID of the author.  '; return='string The author&apos;s display name. '; since='1.0.0 '; type='function';}, 
	{name='get_author_posts_url'; match='get_author_posts_url'; definition='get_author_posts_url($author_id, $author_nicename=\'\')'; description='Retrieve the URL to the author page for the user with the ID provided. 
'; file='/wp-includes/author-template.php, line: 224'; return='string The URL to the author&apos;s page. '; since='2.1.0 '; uses='$wp_rewrite '; type='function';}, 
	{name='get_author_rss_link'; match='get_author_rss_link'; definition='get_author_rss_link($echo=false, $author_id=1)'; description='Print/Return link to author RSS feed. 
@see get_author_feed_link() '; file='/wp-includes/deprecated.php, line: 1197'; params='@param bool $echo  
@param int $author_id  '; return='string|null '; since='1.2 '; type='function';}, 
	{name='get_author_template'; match='get_author_template'; definition='get_author_template()'; description='Retrieve path of author template in current or parent template. 
'; file='/wp-includes/theme.php, line: 801'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_author_user_ids'; match='get_author_user_ids'; definition='get_author_user_ids()'; description='
'; file='/wp-admin/includes/deprecated.php, line: 206'; return='array List of user IDs. '; type='function';}, 
	{name='get_autotoggle'; match='get_autotoggle'; definition='get_autotoggle($id=0)'; description='Gets the auto_toggle setting. 

'; file='/wp-includes/deprecated.php, line: 605'; params='@param int $id The category to get. If no category supplied uses 0  '; return='int Only returns 0. '; since='0.71 '; type='function';}, 
	{name='get_available_languages'; match='get_available_languages'; definition='get_available_languages($dir=null)'; description='Get all available languages based on the presence of &lowast;.mo files in a given directory. The default directory is WP_LANG_DIR. 
'; file='/wp-includes/l10n.php, line: 525'; params='@param string $dir A directory in which to search for language files. The default directory is WP_LANG_DIR.  '; return='array Array of language codes or an empty array if no languages are present. Language codes are formed by stripping the .mo extension from the language file names. '; since='3.0.0 '; type='function';}, 
	{name='get_available_post_mime_types'; match='get_available_post_mime_types'; definition='get_available_post_mime_types($type=\'attachment\')'; description='{ '; file='/wp-admin/includes/post.php, line: 1003'; type='function';}, 
	{name='get_available_post_statuses'; match='get_available_post_statuses'; definition='get_available_post_statuses($type=\'post\')'; description='Get all the possible statuses for a post_type 
'; file='/wp-admin/includes/post.php, line: 909'; params='@param string $type The post_type you want the statuses for  '; return='array As array of all the statuses for the supplied post type '; since='2.5.0 '; type='function';}, 
	{name='get_avatar'; match='get_avatar'; definition='get_avatar($id_or_email, $size=\'96\', $default=\'\', $alt=false)'; description='Retrieve the avatar for a user who provided a user ID or email address. 
'; file='/wp-includes/pluggable.php, line: 1655'; params='@param int string object $id_or_email A user ID, email address, or comment object  
@param int $size Size of the avatar image  
@param string $default URL to a default image to use if no avatar is available  
@param string $alt Alternate text to use in image tag. Defaults to blank  '; return='string tag for the user&apos;s avatar '; since='2.5 '; type='function';}, 
	{name='get_background_color'; match='get_background_color'; definition='get_background_color()'; description='Retrieve value for custom background color. 

'; file='/wp-includes/theme.php, line: 1677'; return='string '; since='3.0.0 '; uses='BACKGROUND_COLOR'; type='function';}, 
	{name='get_background_image'; match='get_background_image'; definition='get_background_image()'; description='Retrieve background image for custom background. 
'; file='/wp-includes/theme.php, line: 1654'; return='string '; since='3.0.0 '; type='function';}, 
	{name='get_blog_count'; match='get_blog_count'; definition='get_blog_count($id=0)'; description='The number of active sites on your installation. 
The count is cached and updated twice daily. This is not a live count. 
'; file='/wp-includes/ms-functions.php, line: 168'; params='@param int $id Optional. A site_id.  '; return='int '; since='MU 1.0 '; type='function';}, 
	{name='get_blog_details'; match='get_blog_details'; definition='get_blog_details($fields, $get_all=true)'; description='Retrieve the details for a blog from the blogs table and blog options. 
'; file='/wp-includes/ms-blogs.php, line: 124'; params='@param int string array $fields A blog ID, a blog name, or an array of fields to query against.  
@param bool $get_all Whether to retrieve all details or only the details in the blogs table. Default is true.  '; return='object Blog details. '; since='MU '; type='function';}, 
	{name='get_blog_id_from_url'; match='get_blog_id_from_url'; definition='get_blog_id_from_url($domain, $path=\'/\')'; description='Get a blog&apos;s numeric ID from its URL. 
On a subdirectory installation like example.com/blog1/, $domain will be the root &apos;example.com&apos; and $path the subdirectory &apos;/blog1/&apos;. With subdomains like blog1.example.com, $domain is &apos;blog1.example.com&apos; and $path is &apos;/&apos;. 
'; file='/wp-includes/ms-functions.php, line: 368'; params='@param string $domain  
@param string $path Optional. Not required for subdomain installations.  '; return='int '; since='MU 2.6.5 '; type='function';}, 
	{name='get_blog_list'; match='get_blog_list'; definition='get_blog_list($start=0, $num=10, $deprecated=\'\')'; description=''; file='/wp-includes/ms-deprecated.php, line: 146'; since='MU '; type='function';}, 
	{name='get_blog_option'; match='get_blog_option'; definition='get_blog_option($blog_id, $setting, $default=false)'; description='Retrieve option value based on setting name and blog_id. 
If the option does not exist or does not have a value, then the return value will be false. This is useful to check whether you need to install an option and is commonly used during installation of plugin options and to test whether upgrading is required. 
There is a filter called &apos;blog_option_$option&apos; with the $option being replaced with the option name. The filter takes two parameters. $value and $blog_id. It returns $value. The &apos;option_$option&apos; filter in get_option() is not called. 

'; file='/wp-includes/ms-blogs.php, line: 331'; params='@param int $blog_id is the id of the blog.  
@param string $setting Name of option to retrieve. Should already be SQL-escaped.  
@param string $default (optional) Default value returned if option not found.  '; return='mixed Value set for the option. '; since='MU '; uses='apply_filters() Calls \'blog_option_$optionname\' with the option name value.'; type='function';}, 
	{name='get_blog_permalink'; match='get_blog_permalink'; definition='get_blog_permalink($_blog_id, $post_id)'; description='Get the permalink for a post on another blog. 
'; file='/wp-includes/ms-functions.php, line: 342'; params='@param int $_blog_id ID of the source blog.  
@param int $post_id ID of the desired post.  '; return='string The post&apos;s permalink '; since='MU 1.0 '; type='function';}, 
	{name='get_blog_post'; match='get_blog_post'; definition='get_blog_post($blog_id, $post_id)'; description='Get a blog post from any site on the network. 
'; file='/wp-includes/ms-functions.php, line: 181'; params='@param int $blog_id ID of the blog.  
@param int $post_id ID of the post you\'re looking for.  '; return='object The post. '; since='MU 1.0 '; type='function';}, 
	{name='get_blog_status'; match='get_blog_status'; definition='get_blog_status($id, $pref)'; description='Get a blog details field. 
'; file='/wp-includes/ms-blogs.php, line: 652'; params='@param int $id The blog id  
@param string $pref A field name  '; return='bool $value '; since='MU '; type='function';}, 
	{name='get_blogaddress_by_domain'; match='get_blogaddress_by_domain'; definition='get_blogaddress_by_domain($domain, $path)'; description='Get a full blog URL, given a domain and a path. 
'; file='/wp-includes/ms-blogs.php, line: 72'; params='@param string $domain  
@param string $path  '; return='string '; since='MU '; type='function';}, 
	{name='get_blogaddress_by_id'; match='get_blogaddress_by_id'; definition='get_blogaddress_by_id($blog_id)'; description='Get a full blog URL, given a blog id. 
'; file='/wp-includes/ms-blogs.php, line: 35'; params='@param int $blog_id Blog ID  '; return='string '; since='MU '; type='function';}, 
	{name='get_blogaddress_by_name'; match='get_blogaddress_by_name'; definition='get_blogaddress_by_name($blogname)'; description='Get a full blog URL, given a blog name. 
'; file='/wp-includes/ms-blogs.php, line: 48'; params='@param string $blogname The (subdomain or directory) name  '; return='string '; since='MU '; type='function';}, 
	{name='get_bloginfo'; match='get_bloginfo'; definition='get_bloginfo()'; description=''; file='/wp-admin/load-styles.php, line: 63'; type='function';}, 
	{name='get_bloginfo_rss'; match='get_bloginfo_rss'; definition='get_bloginfo_rss($show=\'\')'; description=''; file='/wp-includes/feed.php, line: 28'; type='function';}, 
	{name='get_blogs_of_user'; match='get_blogs_of_user'; definition='get_blogs_of_user($id, $all=false)'; description='Get the blogs a user belongs to. 
'; file='/wp-includes/user.php, line: 654'; params='@param int $id User Id  
@param bool $all Whether to retrieve all blogs or only blogs that are not marked as deleted, archived, or spam.  '; return='array A list of the user&apos;s blogs. False if the user was not found or an empty array if the user has no blogs. '; since='3.0.0 '; type='function';}, 
	{name='get_body_class'; match='get_body_class'; definition='get_body_class($class=\'\')'; description='Retrieve the classes for the body element as an array. 
'; file='/wp-includes/post-template.php, line: 401'; params='@param string array $class One or more classes to add to the class list.  '; return='array Array of classes. '; since='2.8.0 '; type='function';}, 
	{name='get_bookmark'; match='get_bookmark'; definition='get_bookmark($bookmark, $output=OBJECT, $filter=\'raw\')'; description='Retrieve Bookmark data 

'; file='/wp-includes/bookmark.php, line: 20'; params='@param mixed $bookmark  
@param string $output Optional. Either OBJECT, ARRAY_N, or ARRAY_A constant  
@param string $filter Optional, default is \'raw\'.  '; return='array|object Type returned depends on $output value. '; since='2.1.0 '; uses='$wpdb Database Object'; type='function';}, 
	{name='get_bookmark_field'; match='get_bookmark_field'; definition='get_bookmark_field($field, $bookmark, $context=\'display\')'; description='Retrieve single bookmark data item or field. 

'; file='/wp-includes/bookmark.php, line: 66'; params='@param string $field The name of the data field to return  
@param int $bookmark The bookmark ID to get field  
@param string $context Optional. The context of how the field will be used.  '; return='string '; since='2.3.0 '; uses='get_bookmark() Gets bookmark object using $bookmark as ID 
sanitize_bookmark_field() Sanitizes Bookmark field based on $context.'; type='function';}, 
	{name='get_bookmarks'; match='get_bookmarks'; definition='get_bookmarks($args=\'\')'; description='Retrieves the list of bookmarks 
Attempts to retrieve from the cache first based on MD5 hash of arguments. If that fails, then the query will be built from the arguments and executed. The results will be stored to the cache. 
List of default arguments are as follows: &apos;orderby&apos; - Default is &apos;name&apos; (string). How to order the links by. String is based off of the bookmark scheme. &apos;order&apos; - Default is &apos;ASC&apos; (string). Either &apos;ASC&apos; or &apos;DESC&apos;. Orders in either ascending or descending order. &apos;limit&apos; - Default is -1 (integer) or show all. The amount of bookmarks to display. &apos;category&apos; - Default is empty string (string). Include the links in what category ID(s). &apos;category_name&apos; - Default is empty string (string). Get links by category name. &apos;hide_invisible&apos; - Default is 1 (integer). Whether to show (default) or hide links marked as &apos;invisible&apos;. &apos;show_updated&apos; - Default is 0 (integer). Will show the time of when the bookmark was last updated. &apos;include&apos; - Default is empty string (string). Include other categories separated by commas. &apos;exclude&apos; - Default is empty string (string). Exclude other categories separated by commas. 

'; file='/wp-includes/bookmark.php, line: 116'; params='@param string array $args List of arguments to overwrite the defaults  '; return='array List of bookmark row objects '; since='2.1.0 '; uses='$wpdb Database Object '; type='function';}, 
	{name='get_boundary_post'; match='get_boundary_post'; definition='get_boundary_post($in_same_cat=false, $excluded_categories=\'\', $start=true)'; description='Retrieve boundary post. 
Boundary being either the first or last post by publish date within the constraints specified by in same category or excluded categories. 
'; file='/wp-includes/link-template.php, line: 1259'; params='@param bool $in_same_cat Optional. Whether returned post should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  
@param bool $start Optional. Whether to retrieve first or last post.  '; return='object '; since='2.8.0 '; type='function';}, 
	{name='get_boundary_post_rel_link'; match='get_boundary_post_rel_link'; definition='get_boundary_post_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\', $start=true)'; description='Get boundary post relational link. 
Can either be start or end post relational link. 
'; file='/wp-includes/link-template.php, line: 1305'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  
@param bool $start Optional, default is true. Whether display link to first or last post.  '; return='string '; since='2.8.0 '; type='function';}, 
	{name='get_broken_themes'; match='get_broken_themes'; definition='get_broken_themes()'; description='{ '; file='/wp-admin/includes/theme.php, line: 115'; type='function';}, 
	{name='get_calendar'; match='get_calendar'; definition='get_calendar($initial=true, $echo=true)'; description='Display calendar with days that have posts as links. 
The calendar is cached, which will be retrieved, if it exists. If there are no posts for the month, then it will not be displayed. 
'; file='/wp-includes/general-template.php, line: 1075'; params='@param bool $initial Optional, default is true. Use initial calendar names.  
@param bool $echo Optional, default is true. Set to false for return.  '; since='1.0.0 '; type='function';}, 
	{name='get_cancel_comment_reply_link'; match='get_cancel_comment_reply_link'; definition='get_cancel_comment_reply_link($text=\'\')'; description='Retrieve HTML content for cancel comment reply link. 
'; file='/wp-includes/comment-template.php, line: 1138'; params='@param string $text Optional. Text to display for cancel reply link.  '; since='2.7.0 '; type='function';}, 
	{name='get_cat_ID'; match='get_cat_ID'; definition='get_cat_ID($cat_name=\'General\')'; description='Retrieve the ID of a category from its name. 
'; file='/wp-includes/category.php, line: 172'; params='@param string $cat_name Optional. Default is \'General\' and can be any category name.  '; return='int 0, if failure and ID of category on success. '; since='1.0.0 '; type='function';}, 
	{name='get_cat_name'; match='get_cat_name'; definition='get_cat_name($cat_id)'; description='Retrieve the name of a category from its ID. 
'; file='/wp-includes/category.php, line: 188'; params='@param int $cat_id Category ID  '; return='string Category name, or an empty string if category doesn&apos;t exist. '; since='1.0.0 '; type='function';}, 
	{name='get_categories'; match='get_categories'; definition='get_categories($args=\'\')'; description='Retrieve list of category objects. 
If you change the type to &apos;link&apos; in the arguments, then the link categories will be returned instead. Also all categories will be updated to be backwards compatible with pre-2.3 plugins and themes. 
@see get_terms() Type of arguments that can be changed. <code>string|array $args Optional. Change the defaults retrieving categories. array List of categories. </code> '; file='/wp-includes/category.php, line: 39'; since='2.1.0 '; type='function';}, 
	{name='get_category'; match='get_category'; definition='get_category($category, $output=OBJECT, $filter=\'raw\')'; description='Retrieves category data given a category ID or category object. 
If you pass the $category parameter an object, which is assumed to be the category row object retrieved the database. It will cache the category data. 
If you pass $category an integer of the category ID, then that category will be retrieved from the database, if it isn&apos;t already cached, and pass it back. 
If you look at get_term(), then both types will be passed through several filters and finally sanitized based on the $filter parameter value. 
The category will converted to maintain backwards compatibility. 

'; file='/wp-includes/category.php, line: 81'; params='@param int object $category Category ID or Category row object  
@param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N  
@param string $filter Optional. Default is raw or no WordPress defined filter will applied.  '; return='mixed Category data in type defined by $output parameter. '; since='1.5.1 '; uses='get_term() Used to get the category data from the taxonomy.'; type='function';}, 
	{name='get_category_by_path'; match='get_category_by_path'; definition='get_category_by_path($category_path, $full_match=true, $output=OBJECT)'; description='Retrieve category based on URL containing the category slug. 
Breaks the $category_path parameter up to get the category slug. 
Tries to find the child path and will return it. If it doesn&apos;t find a match, then it will return the first category matching slug, if $full_match, is set to false. If it does not, then it will return null. 
It is also possible that it will return a <code>WP_Error</code> object on failure. Check for it when using this function. 
'; file='/wp-includes/category.php, line: 110'; params='@param string $category_path URL containing category slugs.  
@param bool $full_match Optional. Whether full path should be matched.  
@param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N  '; return='null|object|array Null on failure. Type is based on $output value. '; since='2.1.0 '; type='function';}, 
	{name='get_category_by_slug'; match='get_category_by_slug'; definition='get_category_by_slug($slug)'; description='Retrieve category object by category slug. 
'; file='/wp-includes/category.php, line: 155'; params='@param string $slug The category slug.  '; return='object Category data object '; since='2.3.0 '; type='function';}, 
	{name='get_category_children'; match='get_category_children'; definition='get_category_children($id, $before=\'/\', $after=\'\', $visited=array())'; description='Retrieve category children list separated before and after the term IDs. 
@see get_term_children() '; file='/wp-includes/deprecated.php, line: 1297'; params='@param int $id Category ID to retrieve children.  
@param string $before Optional. Prepend before category term ID.  
@param string $after Optional, default is empty string. Append after category term ID.  
@param array $visited Optional. Category Term IDs that have already been added.  '; return='string '; since='1.2.0 '; type='function';}, 
	{name='get_category_feed_link'; match='get_category_feed_link'; definition='get_category_feed_link($cat_id, $feed=\'\')'; description=''; file='/wp-includes/link-template.php, line: 574'; type='function';}, 
	{name='get_category_link'; match='get_category_link'; definition='get_category_link($category)'; description='Retrieve category link URL. 
@see get_term_link() '; file='/wp-includes/category-template.php, line: 18'; params='@param int object $category Category ID or object.  '; return='string Link on success, empty string if category does not exist. '; since='1.0.0 '; type='function';}, 
	{name='get_category_parents'; match='get_category_parents'; definition='get_category_parents($id, $link=false, $separator=\'/\', $nicename=false, $visited=array())'; description='Retrieve category parents with separator. 
'; file='/wp-includes/category-template.php, line: 42'; params='@param int $id Category ID.  
@param bool $link Optional, default is false. Whether to format with link.  
@param string $separator Optional, default is \'/\'. How to separate categories.  
@param bool $nicename Optional, default is false. Whether to use nice name for display.  
@param array $visited Optional. Already linked to categories to prevent duplicates.  '; return='string '; since='1.2.0 '; type='function';}, 
	{name='get_category_rss_link'; match='get_category_rss_link'; definition='get_category_rss_link($echo=false, $cat_ID=1)'; description='Print/Return link to category RSS2 feed. 
@see get_category_feed_link() '; file='/wp-includes/deprecated.php, line: 1175'; params='@param bool $echo  
@param int $cat_ID  '; return='string|null '; since='1.2 '; type='function';}, 
	{name='get_category_template'; match='get_category_template'; definition='get_category_template()'; description='Retrieve path of category template in current or parent template. 
Works by first retrieving the current slug for example &apos;category-default.php&apos; and then trying category ID, for example &apos;category-1.php&apos; and will finally fallback to category.php template, if those files don&apos;t exist. 

'; file='/wp-includes/theme.php, line: 825'; return='string '; since='1.5.0 '; uses='apply_filters() Calls \'category_template\' on file path of category template.'; type='function';}, 
	{name='get_category_to_edit'; match='get_category_to_edit'; definition='get_category_to_edit($id)'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 36'; type='function';}, 
	{name='get_catname'; match='get_catname'; definition='get_catname($cat_ID)'; description='Retrieve the category name by the category ID. 
@see get_cat_name() '; file='/wp-includes/deprecated.php, line: 1278'; params='@param int $cat_ID Category ID  '; return='string category name '; since='0.71 '; type='function';}, 
	{name='get_children'; match='get_children'; definition='get_children($args=\'\', $output=OBJECT)'; description='Retrieve all children of the post parent ID. 
Normally, without any enhancements, the children would apply to pages. In the context of the inner workings of WordPress, pages, posts, and attachments share the same table, so therefore the functionality could apply to any one of them. It is then noted that while this function does not work on posts, it does not mean that it won&apos;t work on posts. It is recommended that you know what context you wish to retrieve the children of. 
Attachments may also be made the child of a post, so if that is an accurate statement (which needs to be verified), it would then be possible to get all of the attachments for a post. Attachments have since changed since version 2.5, so this is most likely unaccurate, but serves generally as an example of what is possible. 
The arguments listed as defaults are for this function and also of the <code>get_posts()</code> function. The arguments are combined with the get_children defaults and are then passed to the <code>get_posts()</code> function, which accepts additional arguments. You can replace the defaults in this function, listed below and the additional arguments listed in the <code>get_posts()</code> function. 
The &apos;post_parent&apos; is the most important argument and important attention needs to be paid to the $args parameter. If you pass either an object or an integer (number), then just the &apos;post_parent&apos; is grabbed and everything else is lost. If you don&apos;t specify any arguments, then it is assumed that you are in The Loop and the post parent will be grabbed for from the current post. 
The &apos;post_parent&apos; argument is the ID to get the children. The &apos;numberposts&apos; is the amount of posts to retrieve that has a default of &apos;-1&apos;, which is used to get all of the posts. Giving a number higher than 0 will only retrieve that amount of posts. 
The &apos;post_type&apos; and &apos;post_status&apos; arguments can be used to choose what criteria of posts to retrieve. The &apos;post_type&apos; can be anything, but WordPress post types are &apos;post&apos;, &apos;pages&apos;, and &apos;attachments&apos;. The &apos;post_status&apos; argument will accept any post status within the write administration panels. 
@see get_posts() Has additional arguments that can be replaced. '; file='/wp-includes/post.php, line: 277'; type='function';}, 
	{name='get_clean_basedomain'; match='get_clean_basedomain'; definition='get_clean_basedomain()'; description='Get base domain of network. 
'; file='/wp-admin/network.php, line: 86'; return='string Base domain. '; since='3.0.0 '; type='function';}, 
	{name='get_cli_args'; match='get_cli_args'; definition='get_cli_args($param, $required=false)'; description='Returns value of command line params. Exits when a required param is not set. 
'; file='/wp-admin/includes/class-wp-importer.php, line: 259'; params='@param string $param  
@param bool $required  '; return='mixed '; type='function';}, 
	{name='get_column_headers'; match='get_column_headers'; definition='get_column_headers($screen)'; description='Get the column headers for a screen 
'; file='/wp-admin/includes/template.php, line: 232'; params='@param string object $screen The screen you want the headers for  '; return='array Containing the headers in the format id =&gt; UI String '; since='2.7.0 '; type='function';}, 
	{name='get_comment'; match='get_comment'; definition='get_comment($comment, $output=OBJECT)'; description='Retrieves comment data given a comment ID or comment object. 
If an object is passed then the comment data will be cached and then returned after being passed through a filter. If the comment is empty, then the global comment variable will be used, if it is set. 
If the comment is empty, then the global comment variable will be used, if it is set. 

'; file='/wp-includes/comment.php, line: 130'; params='@param object string int $comment Comment to retrieve.  
@param string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants.  '; return='object|array|null Depends on $output value. '; since='2.0.0 '; uses='$wpdb'; type='function';}, 
	{name='get_comment_ID'; match='get_comment_ID'; definition='get_comment_ID()'; description='Retrieve the comment id of the current comment. 

'; file='/wp-includes/comment-template.php, line: 447'; return='int The comment ID '; since='1.5.0 '; uses='$comment 
apply_filters() Calls the \'get_comment_ID\' hook for the comment ID'; type='function';}, 
	{name='get_comment_author'; match='get_comment_author'; definition='get_comment_author($comment_ID=0)'; description='Retrieve the author of the current comment. 
If the comment has an empty comment_author field, then &apos;Anonymous&apos; person is assumed. 

'; file='/wp-includes/comment-template.php, line: 23'; params='@param int $comment_ID The ID of the comment for which to retrieve the author. Optional.  '; return='string The comment author '; since='1.5.0 '; uses='apply_filters() Calls \'get_comment_author\' hook on the comment author'; type='function';}, 
	{name='get_comment_author_IP'; match='get_comment_author_IP'; definition='get_comment_author_IP($comment_ID=0)'; description='Retrieve the IP address of the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 181'; params='@param int $comment_ID The ID of the comment for which to get the author\'s IP address. Optional.  '; return='string The comment author&apos;s IP address. '; since='1.5.0 '; uses='$comment 
apply_filters()'; type='function';}, 
	{name='get_comment_author_email'; match='get_comment_author_email'; definition='get_comment_author_email($comment_ID=0)'; description='Retrieve the email of the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 61'; params='@param int $comment_ID The ID of the comment for which to get the author\'s email. Optional.  '; return='string The current comment author&apos;s email '; since='1.5.0 '; uses='apply_filters() Calls the \'get_comment_author_email\' hook on the comment author email 
$comment'; type='function';}, 
	{name='get_comment_author_email_link'; match='get_comment_author_email_link'; definition='get_comment_author_email_link($linktext=\'\', $before=\'\', $after=\'\')'; description='Return the html email link to the author of the current comment. 
Care should be taken to protect the email address and assure that email harvesters do not capture your commentors&apos; email address. Most assume that their email address will not appear in raw form on the blog. Doing so will enable anyone, including those that people don&apos;t want to get the email address and use it for their own means good and bad. 

'; file='/wp-includes/comment-template.php, line: 124'; params='@param string $linktext The text to display instead of the comment author\'s email address  
@param string $before The text or HTML to display before the email link.  
@param string $after The text or HTML to display after the email link.  '; since='2.7 '; uses='apply_filters() Calls \'comment_email\' hook for the display of the comment author\'s email '; type='function';}, 
	{name='get_comment_author_link'; match='get_comment_author_link'; definition='get_comment_author_link($comment_ID=0)'; description='Retrieve the html link to the url of the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 147'; params='@param int $comment_ID The ID of the comment for which to get the author\'s link. Optional.  '; return='string Comment Author name or HTML link for author&apos;s URL '; since='1.5.0 '; uses='apply_filters() Calls \'get_comment_author_link\' hook on the complete link HTML or author'; type='function';}, 
	{name='get_comment_author_rss'; match='get_comment_author_rss'; definition='get_comment_author_rss()'; description=''; file='/wp-includes/feed.php, line: 254'; type='function';}, 
	{name='get_comment_author_url'; match='get_comment_author_url'; definition='get_comment_author_url($comment_ID=0)'; description='Retrieve the url of the author of the current comment. 

'; file='/wp-includes/comment-template.php, line: 207'; params='@param int $comment_ID The ID of the comment for which to get the author\'s URL. Optional.  '; return='string '; since='1.5.0 '; uses='apply_filters() Calls \'get_comment_author_url\' hook on the comment author\'s URL'; type='function';}, 
	{name='get_comment_author_url_link'; match='get_comment_author_url_link'; definition='get_comment_author_url_link($linktext=\'\', $before=\'\', $after=\'\')'; description='Retrieves the HTML link of the url of the author of the current comment. 
$linktext parameter is only used if the URL does not exist for the comment author. If the URL does exist then the URL will be used and the $linktext will be ignored. 
Encapsulate the HTML link between the $before and $after. So it will appear in the order of $before, link, and finally $after. 

'; file='/wp-includes/comment-template.php, line: 245'; params='@param string $linktext The text to display instead of the comment author\'s email address  
@param string $before The text or HTML to display before the email link.  
@param string $after The text or HTML to display after the email link.  '; return='string The HTML link between the $before and $after parameters '; since='1.5.0 '; uses='apply_filters() Calls the \'get_comment_author_url_link\' on the complete HTML before returning.'; type='function';}, 
	{name='get_comment_class'; match='get_comment_class'; definition='get_comment_class($class=\'\', $comment_id=null, $post_id=null)'; description='Returns the classes for the comment div as an array 
'; file='/wp-includes/comment-template.php, line: 299'; params='@param string array $class One or more classes to add to the class list  
@param int $comment_id An optional comment ID  
@param int $post_id An optional post ID  '; return='array Array of classes '; since='2.7.0 '; type='function';}, 
	{name='get_comment_count'; match='get_comment_count'; definition='get_comment_count($post_id=0)'; description='The amount of comments in a post or total comments. 
A lot like <code>wp_count_comments()</code> , in that they both return comment stats (albeit with different types). The <code>wp_count_comments()</code> actual caches, but this function does not. 

'; file='/wp-includes/comment.php, line: 447'; params='@param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide.  '; return='array The amount of spam, approved, awaiting moderation, and total comments. '; since='2.0.0 '; uses='$wpdb'; type='function';}, 
	{name='get_comment_date'; match='get_comment_date'; definition='get_comment_date($d=\'\', $comment_ID=0)'; description='Retrieve the comment date of the current comment. 

'; file='/wp-includes/comment-template.php, line: 372'; params='@param string $d The format of the date (defaults to user\'s config)  
@param int $comment_ID The ID of the comment for which to get the date. Optional.  '; return='string The comment&apos;s date '; since='1.5.0 '; uses='apply_filters() Calls \'get_comment_date\' hook with the formated date and the $d parameter respectively 
$comment'; type='function';}, 
	{name='get_comment_excerpt'; match='get_comment_excerpt'; definition='get_comment_excerpt($comment_ID=0)'; description='Retrieve the excerpt of the current comment. 
Will cut each word and only output the first 20 words with &apos;...&apos; at the end. If the word count is less than 20, then no truncating is done and no &apos;...&apos; will appear. 

'; file='/wp-includes/comment-template.php, line: 407'; params='@param int $comment_ID The ID of the comment for which to get the excerpt. Optional.  '; return='string The maybe truncated comment with 20 words or less '; since='1.5.0 '; uses='$comment 
apply_filters() Calls \'get_comment_excerpt\' on truncated comment'; type='function';}, 
	{name='get_comment_guid'; match='get_comment_guid'; definition='get_comment_guid($comment_id=null)'; description=''; file='/wp-includes/feed.php, line: 225'; type='function';}, 
	{name='get_comment_id_fields'; match='get_comment_id_fields'; definition='get_comment_id_fields($id=0)'; description='Retrieve hidden input HTML for replying to comments. 
'; file='/wp-includes/comment-template.php, line: 1165'; return='string Hidden input HTML for replying to comments '; since='3.0.0 '; type='function';}, 
	{name='get_comment_link'; match='get_comment_link'; definition='get_comment_link($comment=null, $args=array())'; description='Retrieve the link to a given comment. 

'; file='/wp-includes/comment-template.php, line: 472'; params='@param object string int $comment Comment to retrieve.  
@param array $args Optional args.  '; return='string The permalink to the given comment. '; since='1.5.0 '; uses='$comment'; type='function';}, 
	{name='get_comment_meta'; match='get_comment_meta'; definition='get_comment_meta($comment_id, $key, $single=false)'; description='Retrieve comment meta field for a comment. 

'; file='/wp-includes/comment.php, line: 547'; params='@param int $comment_id Comment ID.  
@param string $key The meta key to retrieve.  
@param bool $single Whether to return a single value.  '; return='mixed Will be an array if $single is false. Will be value of meta data field if $single is true. '; since='2.9.0 '; uses='get_metadata '; type='function';}, 
	{name='get_comment_pages_count'; match='get_comment_pages_count'; definition='get_comment_pages_count($comments=null, $per_page=null, $threaded=null)'; description='Calculate the total number of comment pages. 

'; file='/wp-includes/comment.php, line: 731'; params='@param array $comments Optional array of comment objects. Defaults to $wp_query->comments  
@param int $per_page Optional comments per page.  
@param boolean $threaded Optional control over flat or threaded comments.  '; return='int Number of comment pages. '; since='2.7.0 '; uses='get_query_var() Used to fill in the default for $per_page parameter. 
get_option() Used to fill in defaults for parameters. 
'; type='function';}, 
	{name='get_comment_reply_link'; match='get_comment_reply_link'; definition='get_comment_reply_link($args=array(), $comment=null, $post=null)'; description='Retrieve HTML content for reply to comment link. 
The default arguments that can be override are &apos;add_below&apos;, &apos;respond_id&apos;, &apos;reply_text&apos;, &apos;login_text&apos;, and &apos;depth&apos;. The &apos;login_text&apos; argument will be used, if the user must log in or register first before posting a comment. The &apos;reply_text&apos; will be used, if they can post a reply. The &apos;add_below&apos; and &apos;respond_id&apos; arguments are for the JavaScript moveAddCommentForm() function parameters. 
'; file='/wp-includes/comment-template.php, line: 1036'; params='@param array $args Optional. Override default options.  
@param int $comment Optional. Comment being replied to.  
@param int $post Optional. Post that the comment is going to be displayed on.  '; return='string|bool|null Link to show comment form, if successful. False, if comments are closed. '; since='2.7.0 '; type='function';}, 
	{name='get_comment_statuses'; match='get_comment_statuses'; definition='get_comment_statuses()'; description=''; file='/wp-includes/comment.php, line: 385'; type='function';}, 
	{name='get_comment_text'; match='get_comment_text'; definition='get_comment_text($comment_ID=0)'; description='Retrieve the text of the current comment. 

'; file='/wp-includes/comment-template.php, line: 598'; params='@param int $comment_ID The ID of the comment for which to get the text. Optional.  '; return='string The comment content '; since='1.5.0 '; uses='$comment'; type='function';}, 
	{name='get_comment_time'; match='get_comment_time'; definition='get_comment_time($d=\'\', $gmt=false, $translate=true)'; description='Retrieve the comment time of the current comment. 

'; file='/wp-includes/comment-template.php, line: 629'; params='@param string $d Optional. The format of the time (defaults to user\'s config)  
@param bool $gmt Whether to use the GMT date  
@param bool $translate Whether to translate the time (for use in feeds)  '; return='string The formatted time '; since='1.5.0 '; uses='$comment 
apply_filter() Calls \'get_comment_time\' hook with the formatted time, the $d parameter, and $gmt parameter passed.'; type='function';}, 
	{name='get_comment_to_edit'; match='get_comment_to_edit'; definition='get_comment_to_edit($id)'; description='{ '; file='/wp-admin/includes/comment.php, line: 78'; type='function';}, 
	{name='get_comment_type'; match='get_comment_type'; definition='get_comment_type($comment_ID=0)'; description='Retrieve the comment type of the current comment. 

'; file='/wp-includes/comment-template.php, line: 660'; params='@param int $comment_ID The ID of the comment for which to get the type. Optional.  '; return='string The comment type '; since='1.5.0 '; uses='$comment 
apply_filters() Calls the \'get_comment_type\' hook on the comment type'; type='function';}, 
	{name='get_commentdata'; match='get_commentdata'; definition='get_commentdata($comment_ID, $no_cache=0, $include_unapproved=false)'; description='Retrieve an array of comment data about comment $comment_ID. 
@see get_comment() '; file='/wp-includes/deprecated.php, line: 1262'; params='@param int $comment_ID The ID of the comment  
@param int $no_cache Whether to use the cache (cast to bool)  
@param bool $include_unapproved Whether to include unapproved comments  '; return='array The comment data '; since='0.71 '; type='function';}, 
	{name='get_comments'; match='get_comments'; definition='get_comments($args=\'\')'; description='Retrieve a list of comments. 
The comment list can be for the blog as a whole or for an individual post. 
The list of comment arguments are &apos;status&apos;, &apos;orderby&apos;, &apos;comment_date_gmt&apos;, &apos;order&apos;, &apos;number&apos;, &apos;offset&apos;, and &apos;post_id&apos;. 

'; file='/wp-includes/comment.php, line: 182'; params='@param mixed $args Optional. Array or string of options to override defaults.  '; return='array List of comments. '; since='2.7.0 '; uses='$wpdb'; type='function';}, 
	{name='get_comments_link'; match='get_comments_link'; definition='get_comments_link($post_id=0)'; description='Retrieves the link to the current post comments. 
'; file='/wp-includes/comment-template.php, line: 518'; params='@param int $post_id Optional post id  '; return='string The link to the comments '; since='1.5.0 '; type='function';}, 
	{name='get_comments_number'; match='get_comments_number'; definition='get_comments_number($post_id=0)'; description='Retrieve the amount of comments a post has. 

'; file='/wp-includes/comment-template.php, line: 547'; params='@param int $post_id The Post ID  '; return='int The number of comments a post has '; since='1.5.0 '; uses='apply_filters() Calls the \'get_comments_number\' hook on the number of comments'; type='function';}, 
	{name='get_comments_pagenum_link'; match='get_comments_pagenum_link'; definition='get_comments_pagenum_link($pagenum=1, $max_page=0)'; description='Retrieve page numbers links. 
'; file='/wp-includes/link-template.php, line: 1746'; params='@param int $pagenum Optional. Page number.  '; return='string '; since='2.7.0 '; type='function';}, 
	{name='get_comments_popup_template'; match='get_comments_popup_template'; definition='get_comments_popup_template()'; description='Retrieve path of comment popup template in current or parent template. 
Checks for comment popup template in current template, if it exists or in the parent template. 

'; file='/wp-includes/theme.php, line: 1052'; return='string '; since='1.5.0 '; uses='apply_filters() Calls \'comments_popup_template\' filter on path.'; type='function';}, 
	{name='get_core_updates'; match='get_core_updates'; definition='get_core_updates($options=array())'; description='Get available core updates 
'; file='/wp-admin/includes/update.php, line: 32'; params='@param array $options Set $options[\'dismissed\'] to true to show dismissed upgrades too, set $options[\'available\'] to false to skip not-dimissed updates.  '; return='array Array of the update objects '; type='function';}, 
	{name='get_current_blog_id'; match='get_current_blog_id'; definition='get_current_blog_id()'; description='Retrieve the current blog id 
'; file='/wp-includes/general-template.php, line: 501'; return='int Blog id '; since='3.1.0 '; type='function';}, 
	{name='get_current_screen'; match='get_current_screen'; definition='get_current_screen()'; description='Get the current screen object 
'; file='/wp-admin/includes/template.php, line: 2067'; return='object Current screen object '; since='3.1.0 '; type='function';}, 
	{name='get_current_site'; match='get_current_site'; definition='get_current_site()'; description='Get the current site info. 
Returns an object containing the ID, domain, path, and site_name of the site being viewed. 
'; file='/wp-includes/ms-functions.php, line: 1406'; return='object '; since='MU '; type='function';}, 
	{name='get_current_site_name'; match='get_current_site_name'; definition='get_current_site_name($current_site)'; description='Sets current site name. 
'; file='/wp-includes/ms-load.php, line: 114'; return='object $current_site object with site_name '; since='3.0.0 '; type='function';}, 
	{name='get_current_theme'; match='get_current_theme'; definition='get_current_theme()'; description='Retrieve current theme display name. 
If the &apos;current_theme&apos; option has already been set, then it will be returned instead. If it is not set, then each theme will be iterated over until both the current stylesheet and current template name. 
'; file='/wp-includes/theme.php, line: 516'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_current_user_id'; match='get_current_user_id'; definition='get_current_user_id()'; description='Get the current user&apos;s ID 

'; file='/wp-includes/user.php, line: 226'; return='int The current user&apos;s ID '; since='MU '; uses='wp_get_current_user'; type='function';}, 
	{name='get_currentuserinfo'; match='get_currentuserinfo'; definition='get_currentuserinfo()'; description='Populate global variables with information about the currently logged in user. 
Will set the current user, if the current user is not set. The current user will be set to the logged in person. If no user is logged in, then it will set the current user to 0, which is invalid and won&apos;t have any permissions. 

'; file='/wp-includes/pluggable.php, line: 74'; return='bool|null False on XMLRPC Request and invalid auth cookie. Null when current user set '; since='0.71 '; uses='$current_user Checks if the current user is set 
wp_validate_auth_cookie() Retrieves current logged in user.'; type='function';}, 
	{name='get_dashboard_blog'; match='get_dashboard_blog'; definition='get_dashboard_blog()'; description='Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data. 

'; file='/wp-includes/ms-functions.php, line: 1928'; return='int '; since='MU '; uses='get_blog_details()'; type='function';}, 
	{name='get_dashboard_url'; match='get_dashboard_url'; definition='get_dashboard_url($user_id, $path=\'\', $scheme=\'admin\')'; description='Get the URL to the user&apos;s dashboard. 
If a user does not belong to any sites, the global user dashboard is used. If the user belongs to the current site, the dashboard for the current site is returned. If the user cannot edit the current site, the dashboard to the user&apos;s primary blog is returned. 
'; file='/wp-includes/link-template.php, line: 2301'; params='@param int $user_id User ID  
@param string $path Optional path relative to the dashboard. Use only paths known to both blog and user admins.  
@param string $scheme The scheme to use. Default is \'admin\', which obeys force_ssl_admin() and is_ssl(). \'http\' or \'https\' can be passed to force those schemes.  '; return='string Dashboard url link with optional path appended '; since='3.1.0 '; type='function';}, 
	{name='get_date_from_gmt'; match='get_date_from_gmt'; definition='get_date_from_gmt($string, $format=\'Y-m-d H:i:s\')'; description='Converts a GMT date into the correct format for the blog. 
Requires and returns in the Y-m-d H:i:s format. Simply adds the value of gmt_offset.Return format can be overridden using the $format parameter 
'; file='/wp-includes/formatting.php, line: 1632'; params='@param string $string The date to be converted.  
@param string $format The format string for the returned date (default is Y-m-d H:i:s)  '; return='string Formatted date relative to the GMT offset. '; since='1.2.0 '; type='function';}, 
	{name='get_date_template'; match='get_date_template'; definition='get_date_template()'; description='Retrieve path of date template in current or parent template. 
'; file='/wp-includes/theme.php, line: 898'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_day_link'; match='get_day_link'; definition='get_day_link($year, $month, $day)'; description='Retrieve the permalink for the day archives with year and month. 
'; file='/wp-includes/link-template.php, line: 389'; params='@param bool int $year False for current year. Integer of year.  
@param bool int $month False for current month. Integer of month.  
@param bool int $day False for current day. Integer of day.  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='get_default_feed'; match='get_default_feed'; definition='get_default_feed()'; description=''; file='/wp-includes/feed.php, line: 65'; type='function';}, 
	{name='get_default_link_to_edit'; match='get_default_link_to_edit'; definition='get_default_link_to_edit()'; description='Retrieve the default link for editing. 
'; file='/wp-admin/includes/bookmark.php, line: 55'; return='object Default link '; since='2.0.0 '; type='function';}, 
	{name='get_default_page_to_edit'; match='get_default_page_to_edit'; definition='get_default_page_to_edit()'; description='Get the default page information to use. 
'; file='/wp-admin/includes/post.php, line: 461'; return='object stdClass object containing all the default post data as attributes '; since='2.5.0 '; type='function';}, 
	{name='get_default_post_to_edit'; match='get_default_post_to_edit'; definition='get_default_post_to_edit($post_type=\'post\', $create_in_db=false)'; description='Default post information to use when populating the &quot;Write Post&quot; form. 
'; file='/wp-admin/includes/post.php, line: 403'; params='@param string $post_type A post type string, defaults to \'post\'.  '; return='object stdClass object containing all the default post data as attributes '; since='2.0.0 '; type='function';}, 
	{name='get_delete_post_link'; match='get_delete_post_link'; definition='get_delete_post_link($id=0, $deprecated=\'\', $force_delete=false)'; description='Retrieve delete posts link for post. 
Can be used within the WordPress loop or outside of it, with any post type. 
'; file='/wp-includes/link-template.php, line: 957'; params='@param int $id Optional. Post ID.  
@param string $deprecated Not used.  
@param bool $force_delete Whether to bypass trash and force deletion. Default is false.  '; return='string '; since='2.9.0 '; type='function';}, 
	{name='get_dirsize'; match='get_dirsize'; definition='get_dirsize($directory)'; description='Get the size of a directory. 
A helper function that is used primarily to check whether a blog has exceeded its allowed upload space. 

'; file='/wp-includes/ms-functions.php, line: 1495'; params='@param string $directory  '; return='int '; since='MU '; uses='recurse_dirsize()'; type='function';}, 
	{name='get_dropins'; match='get_dropins'; definition='get_dropins()'; description='Check the wp-content directory and retrieve all drop-ins with any plugin data. 
'; file='/wp-admin/includes/plugin.php, line: 344'; return='array Key is the file path and the value is an array of the plugin data. '; since='3.0.0 '; type='function';}, 
	{name='get_edit_bookmark_link'; match='get_edit_bookmark_link'; definition='get_edit_bookmark_link($link=0)'; description='Display edit bookmark (literally a URL external to blog) link. 
'; file='/wp-includes/link-template.php, line: 1027'; params='@param int $link Optional. Bookmark ID.  '; return='string '; since='2.7.0 '; type='function';}, 
	{name='get_edit_comment_link'; match='get_edit_comment_link'; definition='get_edit_comment_link($comment_id=0)'; description='Retrieve edit comment link. 
'; file='/wp-includes/link-template.php, line: 986'; params='@param int $comment_id Optional. Comment ID.  '; return='string '; since='2.3.0 '; type='function';}, 
	{name='get_edit_post_link'; match='get_edit_post_link'; definition='get_edit_post_link($id=0, $context=\'display\')'; description='Retrieve edit posts link for post. 
Can be used within the WordPress loop or outside of it. Can be used with pages, posts, attachments, and revisions. 
'; file='/wp-includes/link-template.php, line: 901'; params='@param int $id Optional. Post ID.  
@param string $context Optional, default to display. How to write the \'&\', defaults to \'&\'.  '; return='string '; since='2.3.0 '; type='function';}, 
	{name='get_edit_profile_url'; match='get_edit_profile_url'; definition='get_edit_profile_url($user, $scheme=\'admin\')'; description='Get the URL to the user&apos;s profile editor. 
'; file='/wp-includes/link-template.php, line: 2334'; params='@param int $user User ID  
@param string $scheme The scheme to use. Default is \'admin\', which obeys force_ssl_admin() and is_ssl(). \'http\' or \'https\' can be passed to force those schemes.  '; return='string Dashboard url link with optional path appended '; since='3.1.0 '; type='function';}, 
	{name='get_edit_tag_link'; match='get_edit_tag_link'; definition='get_edit_tag_link($tag_id, $taxonomy=\'post_tag\')'; description='Retrieve edit tag link. 
'; file='/wp-includes/link-template.php, line: 659'; params='@param int $tag_id Tag ID  
@param string $taxonomy Taxonomy  '; return='string '; since='2.7.0 '; type='function';}, 
	{name='get_edit_term_link'; match='get_edit_term_link'; definition='get_edit_term_link($term_id, $taxonomy, $object_type=\'\')'; description='Retrieve edit term url. 
'; file='/wp-includes/link-template.php, line: 689'; params='@param int $term_id Term ID  
@param string $taxonomy Taxonomy  
@param string $object_type The object type  '; return='string '; since='3.1.0 '; type='function';}, 
	{name='get_editable_authors'; match='get_editable_authors'; definition='get_editable_authors($user_id)'; description='
'; file='/wp-admin/includes/deprecated.php, line: 224'; params='@param int $user_id User ID.  '; return='array|bool List of editable authors. False if no editable users. '; type='function';}, 
	{name='get_editable_roles'; match='get_editable_roles'; definition='get_editable_roles()'; description='Fetch a filtered list of user roles that the current user is allowed to edit. 
Simple function who&apos;s main purpose is to allow filtering of the list of roles in the $wp_roles object so that plugins can remove innappropriate ones depending on the situation or user making edits. Specifically because without filtering anyone with the edit_users capability can edit others to be administrators, even if they are only editors or authors. This filter allows admins to delegate user management. 
'; file='/wp-admin/includes/user.php, line: 209'; return='unknown '; since='2.8 '; type='function';}, 
	{name='get_editable_user_ids'; match='get_editable_user_ids'; definition='get_editable_user_ids($user_id, $exclude_zeros=true, $post_type=\'post\')'; description='
'; file='/wp-admin/includes/deprecated.php, line: 248'; params='@param int $user_id User ID.  
@param bool $exclude_zeros Optional, default is true. Whether to exclude zeros.  '; return='unknown '; type='function';}, 
	{name='get_enclosed'; match='get_enclosed'; definition='get_enclosed($post_id)'; description='Retrieve enclosures already enclosed for a post. 

'; file='/wp-includes/post.php, line: 3026'; params='@param int $post_id Post ID.  '; return='array List of enclosures '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='get_extended'; match='get_extended'; definition='get_extended($post)'; description='Get extended entry info (). 
There should not be any space after the second dash and before the word &apos;more&apos;. There can be text or space(s) after the word &apos;more&apos;, but won&apos;t be referenced. 
The returned array has &apos;main&apos; and &apos;extended&apos; keys. Main has the text before the . The &apos;extended&apos; key has the content after the comment. 
'; file='/wp-includes/post.php, line: 339'; params='@param string $post Post content.  '; return='array Post before (&apos;main&apos;) and after (&apos;extended&apos;). '; since='1.0.0 '; type='function';}, 
	{name='get_feed_link'; match='get_feed_link'; definition='get_feed_link($feed=\'\')'; description='Retrieve the permalink for the feed type. 
'; file='/wp-includes/link-template.php, line: 430'; params='@param string $feed Optional, defaults to default feed. Feed type.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_file'; match='get_file'; definition='get_file($path)'; description=''; file='/wp-includes/js/tinymce/wp-tinymce.php, line: 11'; type='function';}, 
	{name='get_file_data'; match='get_file_data'; definition='get_file_data($file, $default_headers, $context=\'\')'; description='Retrieve metadata from a file. 
Searches for metadata in the first 8kiB of a file, such as a plugin or theme. Each piece of metadata must be on its own line. Fields can not span multple lines, the value will get cut at the end of the first line. 
If the file data is not within that first 8kiB, then the author should correct their plugin file and move the data headers to the top. 
@see http://codex.wordpress.org/File_Header '; file='/wp-includes/functions.php, line: 4337'; params='@param string $file Path to the file  
@param array $default_headers List of headers, in the format array(\'HeaderKey\' => \'Header Name\')  
@param string $context If specified adds filter hook \"extra_{$context}_headers\"  '; since='2.9.0 '; type='function';}, 
	{name='get_file_description'; match='get_file_description'; definition='get_file_description($file)'; description='Get the description for standard WordPress theme files and other various standard WordPress files 
'; file='/wp-admin/includes/file.php, line: 56'; params='@param string $file Filesystem path or filename  '; return='string Description of file from $wp_file_descriptions or basename of $file if description doesn&apos;t exist '; since='1.5.0 '; uses='_cleanup_header_comment 
$wp_file_descriptions '; type='function';}, 
	{name='get_filesystem_method'; match='get_filesystem_method'; definition='get_filesystem_method($args=array(), $context=false)'; description='Determines which Filesystem Method to use. The priority of the Transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets (Via Sockets class, or fsoxkopen()) 
Note that the return value of this function can be overridden in 2 ways By defining FS_METHOD in your wp-config.php file By using the filesystem_method filter Valid values for these are: &apos;direct&apos;, &apos;ssh&apos;, &apos;ftpext&apos; or &apos;ftpsockets&apos; Plugins may also define a custom transport handler, See the WP_Filesystem function for more information. 
'; file='/wp-admin/includes/file.php, line: 843'; params='@param array $args Connection details.  
@param string $context Full path to the directory that is tested for being writable.  '; return='string The transport to use, see description for valid return values. '; since='2.5.0 '; type='function';}, 
	{name='get_footer'; match='get_footer'; definition='get_footer($name=null)'; description='Load footer template. 
Includes the footer template for a theme or if a name is specified then a specialised footer will be included. 
For the parameter, if the file is called &quot;footer-special.php&quot; then specify &quot;special&quot;. 

'; file='/wp-includes/general-template.php, line: 53'; params='@param string $name The name of the specialised footer.  '; since='1.5.0 '; uses='locate_template() 
do_action() Calls \'get_footer\' action.'; type='function';}, 
	{name='get_front_page_template'; match='get_front_page_template'; definition='get_front_page_template()'; description='Retrieve path of front-page template in current or parent template. 
Looks for &apos;front-page.php&apos;. 

'; file='/wp-includes/theme.php, line: 930'; return='string '; since='3.0.0 '; uses='apply_filters() Calls \'front_page_template\' on file path of template.'; type='function';}, 
	{name='get_gmt_from_date'; match='get_gmt_from_date'; definition='get_gmt_from_date($string, $format=\'Y-m-d H:i:s\')'; description='Returns a date in the GMT equivalent. 
Requires and returns a date in the Y-m-d H:i:s format. Simply subtracts the value of the &apos;gmt_offset&apos; option. Return format can be overridden using the $format parameter. The DateTime and DateTimeZone classes are used to respect time zone differences in DST. 
'; file='/wp-includes/formatting.php, line: 1601'; params='@param string $string The date to be converted.  
@param string $format The format string for the returned date (default is Y-m-d H:i:s)  '; return='string GMT version of the date provided. '; since='1.2.0 '; uses='get_option() to retrieve the the value of \'gmt_offset\'. '; type='function';}, 
	{name='get_header'; match='get_header'; definition='get_header($name=null)'; description='Load header template. 
Includes the header template for a theme or if a name is specified then a specialised header will be included. 
For the parameter, if the file is called &quot;header-special.php&quot; then specify &quot;special&quot;. 

'; file='/wp-includes/general-template.php, line: 24'; params='@param string $name The name of the specialised header.  '; since='1.5.0 '; uses='locate_template() 
do_action() Calls \'get_header\' action.'; type='function';}, 
	{name='get_header_image'; match='get_header_image'; definition='get_header_image()'; description='Retrieve header image for custom header. 

'; file='/wp-includes/theme.php, line: 1430'; return='string '; since='2.1.0 '; uses='HEADER_IMAGE'; type='function';}, 
	{name='get_header_textcolor'; match='get_header_textcolor'; definition='get_header_textcolor()'; description='Retrieve text color for custom header. 

'; file='/wp-includes/theme.php, line: 1407'; return='string '; since='2.1.0 '; uses='HEADER_TEXTCOLOR'; type='function';}, 
	{name='get_hidden_columns'; match='get_hidden_columns'; definition='get_hidden_columns($screen)'; description='Get a list of hidden columns. 
'; file='/wp-admin/includes/template.php, line: 253'; params='@param string object $screen The screen you want the hidden columns for  '; return='array '; since='2.7.0 '; type='function';}, 
	{name='get_hidden_meta_boxes'; match='get_hidden_meta_boxes'; definition='get_hidden_meta_boxes($screen)'; description='Get Hidden Meta Boxes 
'; file='/wp-admin/includes/template.php, line: 1050'; params='@param string object $screen Screen identifier  '; return='array Hidden Meta Boxes '; since='2.7.0 '; type='function';}, 
	{name='get_home_path'; match='get_home_path'; definition='get_home_path()'; description='Get the absolute filesystem path to the root of the WordPress installation 
'; file='/wp-admin/includes/file.php, line: 79'; return='string Full filesystem path to the root of the WordPress installation '; since='1.5.0 '; uses='get_option '; type='function';}, 
	{name='get_home_template'; match='get_home_template'; definition='get_home_template()'; description='Retrieve path of home template in current or parent template. 
This is the template used for the page containing the blog posts 
Attempts to locate &apos;home.php&apos; first before falling back to &apos;index.php&apos;. 

'; file='/wp-includes/theme.php, line: 914'; return='string '; since='1.5.0 '; uses='apply_filters() Calls \'home_template\' on file path of home template.'; type='function';}, 
	{name='get_home_url'; match='get_home_url'; definition='get_home_url($blog_id=null, $path=\'\', $scheme=null)'; description=''; file='/wp-includes/link-template.php, line: 1960'; type='function';}, 
	{name='get_id_from_blogname'; match='get_id_from_blogname'; definition='get_id_from_blogname($name)'; description='Given a blog&apos;s (subdomain or directory) name, retrieve it&apos;s id. 
'; file='/wp-includes/ms-blogs.php, line: 97'; params='@param string $name  '; return='int A blog id '; since='MU '; type='function';}, 
	{name='get_image_send_to_editor'; match='get_image_send_to_editor'; definition='get_image_send_to_editor($id, $caption, $title, $align, $url=\'\', $rel=false, $size=\'medium\', $alt=\'\')'; description='{ '; file='/wp-admin/includes/media.php, line: 103'; type='function';}, 
	{name='get_image_tag'; match='get_image_tag'; definition='get_image_tag($id, $alt, $title, $align, $size=\'medium\')'; description='An tag for an image attachment, scaling it down if requested. 
The filter &apos;get_image_tag_class&apos; allows for changing the class name for the image without having to use regular expressions on the HTML content. The parameters are: what WordPress will use for the class, the Attachment ID, image align value, and the size the image should be. 
The second filter &apos;get_image_tag&apos; has the HTML content, which can then be further manipulated by a plugin to change all attribute values and even HTML content. 

'; file='/wp-includes/media.php, line: 219'; params='@param int $id Attachment ID.  
@param string $alt Image Description for the alt attribute.  
@param string $title Image Description for the title attribute.  
@param string $align Part of the class name for aligning the image.  
@param string $size Optional. Default is \'medium\'.  '; return='string HTML IMG element for given image attachment '; since='2.5.0 '; uses='apply_filters() The \'get_image_tag_class\' filter is the IMG element class attribute. 
apply_filters() The \'get_image_tag\' filter is the full IMG element with all attributes.'; type='function';}, 
	{name='get_index_rel_link'; match='get_index_rel_link'; definition='get_index_rel_link()'; description='Get site index relational link. 
'; file='/wp-includes/link-template.php, line: 1351'; return='string '; since='2.8.0 '; type='function';}, 
	{name='get_index_template'; match='get_index_template'; definition='get_index_template()'; description='Retrieve path of index template in current or parent template. 
'; file='/wp-includes/theme.php, line: 760'; return='string '; since='3.0.0 '; type='function';}, 
	{name='get_inline_data'; match='get_inline_data'; definition='get_inline_data($post)'; description='{ '; file='/wp-admin/includes/template.php, line: 268'; type='function';}, 
	{name='get_intermediate_image_sizes'; match='get_intermediate_image_sizes'; definition='get_intermediate_image_sizes()'; description='Get the available image sizes '; file='/wp-includes/media.php, line: 580'; return='array Returns a filtered array of image size strings '; since='3.0.0 '; type='function';}, 
	{name='get_last_updated'; match='get_last_updated'; definition='get_last_updated($deprecated=\'\', $start=0, $quantity=40)'; description='Get a list of most recently updated blogs. 
'; file='/wp-includes/ms-blogs.php, line: 672'; params='@param mixed $deprecated Not used  
@param int $start The offset  
@param int $quantity The maximum number of blogs to retrieve. Default is 40.  '; return='array The list of blogs '; since='MU '; type='function';}, 
	{name='get_lastcommentmodified'; match='get_lastcommentmodified'; definition='get_lastcommentmodified($timezone=\'server\')'; description='The date the last comment was modified. 

'; file='/wp-includes/comment.php, line: 409'; params='@param string $timezone Which timezone to use in reference to \'gmt\', \'blog\', or \'server\' locations.  '; return='string Last comment modified date. '; since='1.5.0 '; uses='$wpdb '; type='function';}, 
	{name='get_lastpostdate'; match='get_lastpostdate'; definition='get_lastpostdate($timezone=\'server\')'; description='Retrieve the date that the last post was published. 
The server timezone is the default and is the difference between GMT and server time. The &apos;blog&apos; value is the date when the last post was posted. The &apos;gmt&apos; is when the last post was posted in GMT formatted date. 

'; file='/wp-includes/post.php, line: 4212'; params='@param string $timezone The location to get the time. Can be \'gmt\', \'blog\', or \'server\'.  '; return='string The date of the last post. '; since='0.71 '; uses='apply_filters() Calls \'get_lastpostdate\' filter'; type='function';}, 
	{name='get_lastpostmodified'; match='get_lastpostmodified'; definition='get_lastpostmodified($timezone=\'server\')'; description='Retrieve last post modified date depending on timezone. 
The server timezone is the default and is the difference between GMT and server time. The &apos;blog&apos; value is just when the last post was modified. The &apos;gmt&apos; is when the last post was modified in GMT time. 

'; file='/wp-includes/post.php, line: 4229'; params='@param string $timezone The location to get the time. Can be \'gmt\', \'blog\', or \'server\'.  '; return='string The date the post was last modified. '; since='1.2.0 '; uses='apply_filters() Calls \'get_lastpostmodified\' filter'; type='function';}, 
	{name='get_link'; match='get_link'; definition='get_link($bookmark_id, $output=OBJECT, $filter=\'raw\')'; description='Retrieve bookmark data based on ID. 
@see get_bookmark() '; file='/wp-includes/deprecated.php, line: 2050'; params='@param int $bookmark_id ID of link  
@param string $output OBJECT, ARRAY_N, or ARRAY_A  '; return='object|array '; since='2.0.0 '; type='function';}, 
	{name='get_link_to_edit'; match='get_link_to_edit'; definition='get_link_to_edit($link_id)'; description='Retrieve link data based on ID. 
'; file='/wp-admin/includes/bookmark.php, line: 118'; params='@param int $link_id ID of link to retrieve  '; return='object Link for editing '; since='2.0.0 '; type='function';}, 
	{name='get_linkcatname'; match='get_linkcatname'; definition='get_linkcatname($id=0)'; description='Gets the name of category by id. 
@see get_category() '; file='/wp-includes/deprecated.php, line: 1129'; params='@param int $id The category to get. If no category supplied uses 0  '; return='string '; since='0.71 '; type='function';}, 
	{name='get_linkobjects'; match='get_linkobjects'; definition='get_linkobjects($category=0, $orderby=\'name\', $limit=0)'; description='Gets an array of link objects associated with category n. 
Usage: $links = get_linkobjects(1); if ($links) { foreach ($links as $link) { echo &apos;&apos;.$link-&gt;link_name.&apos; &apos;.$link-&gt;link_description.&apos;&apos;; } } 
Fields are: link_id link_url link_name link_image link_target link_category link_description link_visible link_owner link_rating link_updated link_rel link_notes 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 527'; params='@param int $category The category to use. If no category supplied uses all  
@param string $orderby the order to output the links. E.g. \'id\', \'name\', \'url\', \'description\', or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param int $limit Limit to X entries. If not specified, all entries are shown.  '; return='unknown '; since='1.0.1 '; type='function';}, 
	{name='get_linkobjectsbyname'; match='get_linkobjectsbyname'; definition='get_linkobjectsbyname($cat_name=\"noname\", $orderby=\'name\', $limit=-1)'; description='Gets an array of link objects associated with category $cat_name. 
$links = get_linkobjectsbyname(&apos;fred&apos;); foreach ($links as $link) { echo &apos;&apos;.$link-&gt;link_name.&apos;&apos;; } 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 473'; params='@param string $cat_name The category name to use. If no match is found uses all.  
@param string $orderby The order to output the links. E.g. \'id\', \'name\', \'url\', \'description\', or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param int $limit Limit to X entries. If not specified, all entries are shown.  '; return='unknown '; since='1.0.1 '; type='function';}, 
	{name='get_linkrating'; match='get_linkrating'; definition='get_linkrating($link)'; description='@see sanitize_bookmark_field() '; file='/wp-includes/deprecated.php, line: 1113'; params='@param object $link  '; return='unknown '; since='1.0.1 '; type='function';}, 
	{name='get_links'; match='get_links'; definition='get_links($category=-1, $before=\'\', $after=\'< br/>\', $between=\' \', $show_images=true, $orderby=\'name\', $show_description=true, $show_rating=false, $limit=-1, $show_updated=1, $echo=true)'; description='Gets the links associated with category by id. 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 949'; params='@param int $category The category to use. If no category supplied uses all  
@param string $before the html to output before the link  
@param string $after the html to output after the link  
@param string $between the html to output between the link/image and its description. Not used if no image or show_images == true  
@param bool $show_images whether to show images (if defined).  
@param string $orderby the order to output the links. E.g. \'id\', \'name\', \'url\', \'description\', or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param bool $show_description whether to show the description if show_images=false/not defined.  
@param bool $show_rating show rating stars/chars  
@param int $limit Limit to X entries. If not specified, all entries are shown.  
@param int $show_updated whether to show last updated timestamp  
@param bool $echo whether to echo the results, or return them instead  '; return='null|string '; since='0.71 '; type='function';}, 
	{name='get_links_list'; match='get_links_list'; definition='get_links_list($order=\'name\')'; description='Output entire list of links by category. 
Output a list of all links, listed by category, using the settings in $wpdb-&gt;linkcategories and output it as a nested HTML unordered list. 
@see wp_list_bookmarks() '; file='/wp-includes/deprecated.php, line: 1042'; params='@param string $order Sort link categories by \'name\' or \'id\'  '; since='1.0.1 '; type='function';}, 
	{name='get_links_withrating'; match='get_links_withrating'; definition='get_links_withrating($category=-1, $before=\'\', $after=\'< br/>\', $between=\" \", $show_images=true, $orderby=\'id\', $show_description=true, $limit=-1, $show_updated=0)'; description='Gets the links associated with category n and display rating stars/chars. 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 589'; params='@param int $category The category to use. If no category supplied uses all  
@param string $before The html to output before the link  
@param string $after The html to output after the link  
@param string $between The html to output between the link/image and it\'s description. Not used if no image or show_images == true  
@param bool $show_images Whether to show images (if defined).  
@param string $orderby The order to output the links. E.g. \'id\', \'name\', \'url\', \'description\', or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param bool $show_description Whether to show the description if show_images=false/not defined.  
@param string $limit Limit to X entries. If not specified, all entries are shown.  
@param int $show_updated Whether to show last updated timestamp  '; since='0.71 '; type='function';}, 
	{name='get_linksbyname'; match='get_linksbyname'; definition='get_linksbyname($cat_name=\"noname\", $before=\'\', $after=\'< br/>\', $between=\" \", $show_images=true, $orderby=\'id\', $show_description=true, $show_rating=false, $limit=-1, $show_updated=0)'; description='Gets the links associated with category $cat_name. 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 409'; params='@param string $cat_name Optional. The category name to use. If no match is found uses all.  
@param string $before Optional. The html to output before the link.  
@param string $after Optional. The html to output after the link.  
@param string $between Optional. The html to output between the link/image and it\'s description. Not used if no image or $show_images is true.  
@param bool $show_images Optional. Whether to show images (if defined).  
@param string $orderby Optional. The order to output the links. E.g. \'id\', \'name\', \'url\', \'description\' or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param bool $show_description Optional. Whether to show the description if show_images=false/not defined.  
@param bool $show_rating Optional. Show rating stars/chars.  
@param int $limit Optional. Limit to X entries. If not specified, all entries are shown.  
@param int $show_updated Optional. Whether to show last updated timestamp  '; since='0.71 '; type='function';}, 
	{name='get_linksbyname_withrating'; match='get_linksbyname_withrating'; definition='get_linksbyname_withrating($cat_name=\"noname\", $before=\'\', $after=\'< br/>\', $between=\" \", $show_images=true, $orderby=\'id\', $show_description=true, $limit=-1, $show_updated=0)'; description='Gets the links associated with category &apos;cat_name&apos; and display rating stars/chars. 
@see get_bookmarks() '; file='/wp-includes/deprecated.php, line: 561'; params='@param string $cat_name The category name to use. If no match is found uses all  
@param string $before The html to output before the link  
@param string $after The html to output after the link  
@param string $between The html to output between the link/image and it\'s description. Not used if no image or show_images is true  
@param bool $show_images Whether to show images (if defined).  
@param string $orderby the order to output the links. E.g. \'id\', \'name\', \'url\', \'description\', or \'rating\'. Or maybe owner. If you start the name with an underscore the order will be reversed. You can also specify \'rand\' as the order which will return links in a random order.  
@param bool $show_description Whether to show the description if show_images=false/not defined  
@param int $limit Limit to X entries. If not specified, all entries are shown.  
@param int $show_updated Whether to show last updated timestamp  '; since='0.71 '; type='function';}, 
	{name='get_locale'; match='get_locale'; definition='get_locale()'; description='Gets the current locale. 
If the locale is set, then it will filter the locale in the &apos;locale&apos; filter hook and return the value. 
If the locale is not set already, then the WPLANG constant is used if it is defined. Then it is filtered through the &apos;locale&apos; filter hook and the value for the locale global set and the locale is returned. 
The process to get the locale should only be done once but the locale will always be filtered using the &apos;locale&apos; hook. 

'; file='/wp-includes/l10n.php, line: 28'; return='string The locale of the blog or from the &apos;locale&apos; hook. '; since='1.5.0 '; uses='apply_filters() Calls \'locale\' hook on locale value. 
$locale Gets the locale stored in the global.'; type='function';}, 
	{name='get_locale_stylesheet_uri'; match='get_locale_stylesheet_uri'; definition='get_locale_stylesheet_uri()'; description='Retrieve localized stylesheet URI. 
The stylesheet directory for the localized stylesheet files are located, by default, in the base theme directory. The name of the locale file will be the locale followed by &apos;.css&apos;. If that does not exist, then the text direction stylesheet will be checked for existence, for example &apos;ltr.css&apos;. 
The theme may change the location of the stylesheet directory by either using the &apos;stylesheet_directory_uri&apos; filter or the &apos;locale_stylesheet_uri&apos; filter. If you want to change the location of the stylesheet files for the entire WordPress workflow, then change the former. If you just have the locale in a separate folder, then change the latter. 

'; file='/wp-includes/theme.php, line: 105'; return='string '; since='2.1.0 '; uses='apply_filters() Calls \'locale_stylesheet_uri\' filter on stylesheet URI path and stylesheet directory URI.'; type='function';}, 
	{name='get_manifest'; match='get_manifest'; definition='get_manifest()'; description='Retrieve list of all cacheable <code>WP</code> files 
Array format: file, version (optional), bool (whether to use src and set ignoreQuery, defaults to true) '; file='/wp-admin/includes/manifest.php, line: 16'; type='function';}, 
	{name='get_media_item'; match='get_media_item'; definition='get_media_item($attachment_id, $args=null)'; description='Retrieve HTML form for modifying the image attachment. 
'; file='/wp-admin/includes/media.php, line: 1199'; params='@param int $attachment_id Attachment ID for modification.  
@param string array $args Optional. Override defaults.  '; return='string HTML form for attachment. '; since='2.5.0 '; type='function';}, 
	{name='get_media_items'; match='get_media_items'; definition='get_media_items($post_id, $errors)'; description='Retrieve HTML for media items of post gallery. 
The HTML markup retrieved will be created for the progress of SWF Upload component. Will also create link for showing and hiding the form to modify the image attachment. 
'; file='/wp-admin/includes/media.php, line: 1165'; params='@param int $post_id Optional. Post ID.  
@param array $errors Errors for attachment, if any.  '; return='string '; since='2.5.0 '; type='function';}, 
	{name='get_meta_keys'; match='get_meta_keys'; definition='get_meta_keys()'; description='Get a list of previously defined keys. 
'; file='/wp-admin/includes/post.php, line: 726'; return='unknown '; since='1.2.0 '; type='function';}, 
	{name='get_meta_sql'; match='get_meta_sql'; definition='get_meta_sql($meta_query=false, $type, $primary_table, $primary_id_column, $context=null)'; description='Given a meta query, generates SQL clauses to be appended to a main query 
@see <code>WP_Meta_Query</code> '; file='/wp-includes/meta.php, line: 371'; params='@param array (optional) $meta_query A meta query  
@param string $type Type of meta  
@param string $primary_table  
@param string $primary_id_column  
@param object $context (optional) The main query object  '; return='array( &apos;join&apos; =&gt; $join_sql, &apos;where&apos; =&gt; $where_sql ) '; since='3.2.0 '; type='function';}, 
	{name='get_metadata'; match='get_metadata'; definition='get_metadata($meta_type, $object_id, $meta_key=\'\', $single=false)'; description='Retrieve metadata for the specified object. 
'; file='/wp-includes/meta.php, line: 246'; params='@param string $meta_type Type of object metadata is for (e.g., comment, post, or user)  
@param int $object_id ID of the object metadata is for  
@param string $meta_key Optional. Metadata key. If not specified, retrieve all metadata for the specified object.  
@param bool $single Optional, default is false. If true, return only the first value of the specified meta_key. This parameter has no effect if meta_key is not specified.  '; return='string|array Single metadata value, or array of values '; since='2.9.0 '; type='function';}, 
	{name='get_month_link'; match='get_month_link'; definition='get_month_link($year, $month)'; description='Retrieve the permalink for the month archives with year. 
'; file='/wp-includes/link-template.php, line: 363'; params='@param bool int $year False for current year. Integer of year.  
@param bool int $month False for current month. Integer of month.  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='get_most_active_blogs'; match='get_most_active_blogs'; definition='get_most_active_blogs($num=10, $display=true)'; description=''; file='/wp-includes/ms-deprecated.php, line: 173'; since='MU '; type='function';}, 
	{name='get_most_recent_post_of_user'; match='get_most_recent_post_of_user'; definition='get_most_recent_post_of_user($user_id)'; description='Get a user&apos;s most recent post. 
Walks through each of a user&apos;s blogs to find the post with the most recent post_date_gmt. 

'; file='/wp-includes/ms-functions.php, line: 1449'; params='@param int $user_id  '; return='array Contains the blog_id, post_id, post_date_gmt, and post_gmt_ts '; since='MU '; uses='get_blogs_of_user()'; type='function';}, 
	{name='get_mu_plugins'; match='get_mu_plugins'; definition='get_mu_plugins()'; description='Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data. 
WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins). 
'; file='/wp-admin/includes/plugin.php, line: 287'; return='array Key is the mu-plugin file path and the value is an array of the mu-plugin data. '; since='3.0.0 '; type='function';}, 
	{name='get_nav_menu_locations'; match='get_nav_menu_locations'; definition='get_nav_menu_locations()'; description='Returns an array with the registered navigation menu locations and the menu assigned to it 
'; file='/wp-includes/nav-menu.php, line: 129'; return='array '; since='3.0.0 '; type='function';}, 
	{name='get_next_comments_link'; match='get_next_comments_link'; definition='get_next_comments_link($label=\'\', $max_page=0)'; description='Return the link to next comments pages. 
'; file='/wp-includes/link-template.php, line: 1783'; params='@param string $label Optional. Label for link text.  
@param int $max_page Optional. Max page.  '; return='string|null '; since='2.7.1 '; type='function';}, 
	{name='get_next_post'; match='get_next_post'; definition='get_next_post($in_same_cat=false, $excluded_categories=\'\')'; description='Retrieve next post that is adjacent to current post. 
'; file='/wp-includes/link-template.php, line: 1084'; params='@param bool $in_same_cat Optional. Whether post should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; return='mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists. '; since='1.5.0 '; type='function';}, 
	{name='get_next_posts_link'; match='get_next_posts_link'; definition='get_next_posts_link($label=null, $max_page=0)'; description='Return the next posts pages link. 
'; file='/wp-includes/link-template.php, line: 1582'; params='@param string $label Content for link text.  
@param int $max_page Optional. Max pages.  '; return='string|null '; since='2.7.0 '; type='function';}, 
	{name='get_next_posts_page_link'; match='get_next_posts_page_link'; definition='get_next_posts_page_link($max_page=0)'; description='Retrieve next posts pages link. 
Backported from 2.1.3 to 2.0.10. 
'; file='/wp-includes/link-template.php, line: 1544'; params='@param int $max_page Optional. Max pages.  '; return='string '; since='2.0.10 '; type='function';}, 
	{name='get_num_queries'; match='get_num_queries'; definition='get_num_queries()'; description='Retrieve the number of database queries during the WordPress execution. 
'; file='/wp-includes/functions.php, line: 1738'; return='int Number of database queries '; since='2.0.0 '; type='function';}, 
	{name='get_object_taxonomies'; match='get_object_taxonomies'; definition='get_object_taxonomies($object, $output=\'names\')'; description=''; file='/wp-includes/taxonomy.php, line: 147'; type='function';}, 
	{name='get_object_term_cache'; match='get_object_term_cache'; definition='get_object_term_cache($id, $taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 2568'; type='function';}, 
	{name='get_objects_in_term'; match='get_objects_in_term'; definition='get_objects_in_term($term_ids, $taxonomies, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 479'; type='function';}, 
	{name='get_option'; match='get_option'; definition='get_option()'; description=''; file='/wp-admin/load-styles.php, line: 43'; type='function';}, 
	{name='get_others_drafts'; match='get_others_drafts'; definition='get_others_drafts($user_id)'; description='Retrieve drafts from other users. 

'; file='/wp-admin/includes/deprecated.php, line: 672'; params='@param int $user_id User ID.  '; return='array List of drafts from other users. '; type='function';}, 
	{name='get_others_pending'; match='get_others_pending'; definition='get_others_pending($user_id)'; description='Retrieve pending review posts from other users. 

'; file='/wp-admin/includes/deprecated.php, line: 686'; params='@param int $user_id User ID.  '; return='array List of posts with pending review post type from other users. '; type='function';}, 
	{name='get_others_unpublished_posts'; match='get_others_unpublished_posts'; definition='get_others_unpublished_posts($user_id, $type=\'any\')'; description='Retrieve editable posts from other users. 

'; file='/wp-admin/includes/deprecated.php, line: 640'; params='@param int $user_id User ID to not retrieve posts from.  
@param string $type Optional, defaults to \'any\'. Post type to retrieve, can be \'draft\' or \'pending\'.  '; return='array List of posts from others. '; type='function';}, 
	{name='get_page'; match='get_page'; definition='get_page($page, $output=OBJECT, $filter=\'raw\')'; description='Retrieves page data given a page ID or page object. 
'; file='/wp-includes/post.php, line: 3144'; params='@param mixed $page Page object or page ID. Passed by reference.  
@param string $output What to output. OBJECT, ARRAY_A, or ARRAY_N.  
@param string $filter How the return value should be filtered.  '; return='mixed Page data. '; since='1.5.1 '; type='function';}, 
	{name='get_page_by_path'; match='get_page_by_path'; definition='get_page_by_path($page_path, $output=OBJECT, $post_type=\'page\')'; description='Retrieves a page given its path. 

'; file='/wp-includes/post.php, line: 3160'; params='@param string $page_path Page path  
@param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT.  
@param string $post_type Optional. Post type. Default page.  '; return='mixed Null when complete. '; since='2.1.0 '; uses='$wpdb'; type='function';}, 
	{name='get_page_by_title'; match='get_page_by_title'; definition='get_page_by_title($page_title, $output=OBJECT, $post_type=\'page\')'; description='Retrieve a page given its title. 

'; file='/wp-includes/post.php, line: 3207'; params='@param string $page_title Page title  
@param string $output Optional. Output type. OBJECT, ARRAY_N, or ARRAY_A. Default OBJECT.  
@param string $post_type Optional. Post type. Default page.  '; return='mixed '; since='2.1.0 '; uses='$wpdb'; type='function';}, 
	{name='get_page_children'; match='get_page_children'; definition='get_page_children($page_id, $pages)'; description='Retrieve child pages from list of pages matching page ID. 
Matches against the pages parameter against the page ID. Also matches all children for the same to retrieve all children of a page. Does not make any SQL queries to get the children. 
'; file='/wp-includes/post.php, line: 3229'; params='@param int $page_id Page ID.  
@param array $pages List of pages\' objects.  '; return='array '; since='1.5.1 '; type='function';}, 
	{name='get_page_hierarchy'; match='get_page_hierarchy'; definition='get_page_hierarchy($pages, $page_id=0)'; description='Order the pages with children under parents in a flat list. 
It uses auxiliary structure to hold parent-children relationships and runs in O(N) complexity 
'; file='/wp-includes/post.php, line: 3253'; params='@param array $pages Posts array.  
@param int $page_id Parent page ID.  '; return='array A list arranged by hierarchy. Children immediately follow their parents. '; since='2.0.0 '; type='function';}, 
	{name='get_page_link'; match='get_page_link'; definition='get_page_link($id=false, $leavename=false, $sample=false)'; description='Retrieve the permalink for current page or page ID. 
Respects page_on_front. Use this one. 
'; file='/wp-includes/link-template.php, line: 238'; params='@param int $id Optional. Post ID.  
@param bool $leavename Optional, defaults to false. Whether to keep page name.  
@param bool $sample Optional, defaults to false. Is it a sample permalink.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_page_of_comment'; match='get_page_of_comment'; definition='get_page_of_comment($comment_ID, $args=array())'; description='Calculate what page number a comment will appear on for comment paging. 

'; file='/wp-includes/comment.php, line: 775'; params='@param int $comment_ID Comment ID.  
@param array $args Optional args.  '; return='int|null Comment page number or null on error. '; since='2.7.0 '; uses='get_comment() Gets the full comment of the $comment_ID parameter. 
get_option() Get various settings to control function and defaults. 
get_page_of_comment() Used to loop up to top level comment.'; type='function';}, 
	{name='get_page_statuses'; match='get_page_statuses'; definition='get_page_statuses()'; description='Retrieve all of the WordPress support page statuses. 
Pages have a limited set of valid status values, this provides the post_status values and descriptions. 
'; file='/wp-includes/post.php, line: 615'; return='array List of page statuses. '; since='2.5.0 '; type='function';}, 
	{name='get_page_template'; match='get_page_template'; definition='get_page_template()'; description='Retrieve path of page template in current or parent template. 
Will first look for the specifically assigned page template The will search for &apos;page-{slug}.php&apos; followed by &apos;page-id.php&apos; and finally &apos;page.php&apos; 
'; file='/wp-includes/theme.php, line: 947'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_page_templates'; match='get_page_templates'; definition='get_page_templates()'; description='Get the Page Templates available in this theme 
'; file='/wp-admin/includes/theme.php, line: 168'; return='array Key is the template name, value is the filename of the template '; since='1.5.0 '; type='function';}, 
	{name='get_page_uri'; match='get_page_uri'; definition='get_page_uri($page)'; description='Builds URI for a page. 
Sub pages will be in the &quot;directory&quot; under the parent page post name. 
'; file='/wp-includes/post.php, line: 3296'; params='@param mixed $page Page object or page ID.  '; return='string Page URI. '; since='1.5.0 '; type='function';}, 
	{name='get_paged_template'; match='get_paged_template'; definition='get_paged_template()'; description='Retrieve path of paged template in current or parent template. 
'; file='/wp-includes/theme.php, line: 980'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_pagenum_link'; match='get_pagenum_link'; definition='get_pagenum_link($pagenum=1)'; description='Retrieve get links for page numbers. 
'; file='/wp-includes/link-template.php, line: 1480'; params='@param int $pagenum Optional. Page ID.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_pages'; match='get_pages'; definition='get_pages($args=\'\')'; description='Retrieve a list of pages. 
The defaults that can be overridden are the following: &apos;child_of&apos;, &apos;sort_order&apos;, &apos;sort_column&apos;, &apos;post_title&apos;, &apos;hierarchical&apos;, &apos;exclude&apos;, &apos;include&apos;, &apos;meta_key&apos;, &apos;meta_value&apos;,&apos;authors&apos;, &apos;number&apos;, and &apos;offset&apos;. 

'; file='/wp-includes/post.php, line: 3326'; params='@param mixed $args Optional. Array or string of options that overrides defaults.  '; return='array List of pages matching defaults or $args '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='get_parent_post_rel_link'; match='get_parent_post_rel_link'; definition='get_parent_post_rel_link($title=\'%title\')'; description='Get parent post relational link. 
'; file='/wp-includes/link-template.php, line: 1373'; params='@param string $title Optional. Link title format.  '; return='string '; since='2.8.0 '; type='function';}, 
	{name='get_pending_comments_num'; match='get_pending_comments_num'; definition='get_pending_comments_num($post_id)'; description='Get the number of pending comments on a post or posts 

'; file='/wp-admin/includes/comment.php, line: 105'; params='@param int array $post_id Either a single Post ID or an array of Post IDs  '; return='int|array Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs '; since='2.3.0 '; uses='$wpdb'; type='function';}, 
	{name='get_permalink'; match='get_permalink'; definition='get_permalink($id=0, $leavename=false)'; description='Retrieve full permalink for current post or post ID. 
'; file='/wp-includes/link-template.php, line: 80'; params='@param int $id Optional. Post ID.  
@param bool $leavename Optional, defaults to false. Whether to keep post name or page name.  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='get_plugin_data'; match='get_plugin_data'; definition='get_plugin_data($plugin_file, $markup=true, $translate=true)'; description='Parse the plugin contents to retrieve plugin&apos;s metadata. 
The metadata of the plugin&apos;s data searches for the following in the plugin&apos;s header. All plugin data must be on its own line. For plugin description, it must not have any newlines or only parts of the description will be displayed and the same goes for the plugin data. The below is formatted for printing. 
/&lowast; Plugin Name: Name of Plugin Plugin URI: Link to plugin information Description: Plugin Description Author: Plugin author&apos;s name Author URI: Link to the author&apos;s web site Version: Must be set in the plugin for WordPress 2.3+ Text Domain: Optional. Unique identifier, should be same as the one used in plugin_text_domain() Domain Path: Optional. Only useful if the translations are located in a folder above the plugin&apos;s base path. For example, if .mo files are located in the locale folder then Domain Path will be &quot;/locale/&quot; and must have the first slash. Defaults to the base folder the plugin is located in. Network: Optional. Specify &quot;Network: true&quot; to require that a plugin is activated across all sites in an installation. This will prevent a plugin from being activated on a single site when Multisite is enabled. &lowast; / # Remove the space to close comment 
Plugin data returned array contains the following: &apos;Name&apos; - Name of the plugin, must be unique. &apos;Title&apos; - Title of the plugin and the link to the plugin&apos;s web site. &apos;Description&apos; - Description of what the plugin does and/or notes from the author. &apos;Author&apos; - The author&apos;s name &apos;AuthorURI&apos; - The authors web site address. &apos;Version&apos; - The plugin version number. &apos;PluginURI&apos; - Plugin web site address. &apos;TextDomain&apos; - Plugin&apos;s text domain for localization. &apos;DomainPath&apos; - Plugin&apos;s relative directory path to .mo files. &apos;Network&apos; - Boolean. Whether the plugin can only be activated network wide. 
Some users have issues with opening large files and manipulating the contents for want is usually the first 1kiB or 2kiB. This function stops pulling in the plugin contents when it has all of the required plugin data. 
The first 8kiB of the file will be pulled in and if the plugin data is not within that first 8kiB, then the plugin author should correct their plugin and move the plugin data headers to the top. 
The plugin file is assumed to have permissions to allow for scripts to read the file. This is not checked however and the file is only opened for reading. 
<code>Previous Optimizations. </code> '; file='/wp-admin/includes/plugin.php, line: 72'; type='function';}, 
	{name='get_plugin_files'; match='get_plugin_files'; definition='get_plugin_files($plugin)'; description='Get a list of a plugin&apos;s files. 
'; file='/wp-admin/includes/plugin.php, line: 165'; params='@param string $plugin Plugin ID  '; return='array List of files relative to the plugin root. '; since='2.8.0 '; type='function';}, 
	{name='get_plugin_page_hook'; match='get_plugin_page_hook'; definition='get_plugin_page_hook($plugin_page, $parent_page)'; description=''; file='/wp-admin/includes/plugin.php, line: 1483'; type='function';}, 
	{name='get_plugin_page_hookname'; match='get_plugin_page_hookname'; definition='get_plugin_page_hookname($plugin_page, $parent_page)'; description=''; file='/wp-admin/includes/plugin.php, line: 1491'; type='function';}, 
	{name='get_plugin_updates'; match='get_plugin_updates'; definition='get_plugin_updates()'; description=''; file='/wp-admin/includes/update.php, line: 157'; type='function';}, 
	{name='get_plugins'; match='get_plugins'; definition='get_plugins($plugin_folder=\'\')'; description='Check the plugins directory and retrieve all plugin files with plugin data. 
WordPress only supports plugin files in the base plugins directory (wp-content/plugins) and in one directory above the plugins directory (wp-content/plugins/my-plugin). The file it looks for has the plugin data and must be found in those two locations. It is recommended that do keep your plugin files in directories. 
The file with the plugin data is the file that will be included and therefore needs to have the main execution for the plugin. This does not mean everything must be contained in the file and it is recommended that the file be split for maintainability. Keep everything in one file for extreme optimization purposes. 
'; file='/wp-admin/includes/plugin.php, line: 217'; params='@param string $plugin_folder Optional. Relative path to single plugin folder.  '; return='array Key is the plugin file path and the value is an array of the plugin data. '; since='1.5.0 '; type='function';}, 
	{name='get_post'; match='get_post'; definition='get_post($post, $output=OBJECT, $filter=\'raw\')'; description='Retrieves post data given a post ID or post object. 
See <code>sanitize_post()</code> for optional $filter values. Also, the parameter $post, must be given as a variable, since it is passed by reference. 

'; file='/wp-includes/post.php, line: 370'; params='@param int object $post Post ID or post object.  
@param string $output Optional, default is Object. Either OBJECT, ARRAY_A, or ARRAY_N.  
@param string $filter Optional, default is raw.  '; return='mixed Post data '; since='1.5.1 '; uses='$wpdb '; type='function';}, 
	{name='get_post_ancestors'; match='get_post_ancestors'; definition='get_post_ancestors($post)'; description='Retrieve ancestors of a post. 
'; file='/wp-includes/post.php, line: 424'; params='@param int object $post Post ID or post object  '; return='array Ancestor IDs or empty array if none are found. '; since='2.5.0 '; type='function';}, 
	{name='get_post_class'; match='get_post_class'; definition='get_post_class($class=\'\', $post_id=null)'; description='Retrieve the classes for the post div as an array. 
The class names are add are many. If the post is a sticky, then the &apos;sticky&apos; class name. The class &apos;hentry&apos; is always added to each post. For each category, the class will be added with &apos;category-&apos; with category slug is added. The tags are the same way as the categories with &apos;tag-&apos; before the tag slug. All classes are passed through the filter, &apos;post_class&apos; with the list of classes, followed by $class parameter value, with the post ID as the last parameter. 
'; file='/wp-includes/post-template.php, line: 318'; params='@param string array $class One or more classes to add to the class list.  
@param int $post_id An optional post ID.  '; return='array Array of classes. '; since='2.7.0 '; type='function';}, 
	{name='get_post_comments_feed_link'; match='get_post_comments_feed_link'; definition='get_post_comments_feed_link($post_id=0, $feed=\'\')'; description='Retrieve the permalink for the post comments feed. 
'; file='/wp-includes/link-template.php, line: 468'; params='@param int $post_id Optional. Post ID.  
@param string $feed Optional. Feed type.  '; return='string '; since='2.2.0 '; type='function';}, 
	{name='get_post_custom'; match='get_post_custom'; definition='get_post_custom($post_id=0)'; description='Retrieve post meta fields, based on post ID. 
The post meta fields are retrieved from the cache, so the function is optimized to be called more than once. It also applies to the functions, that use this function. 
'; file='/wp-includes/post.php, line: 1531'; since='1.2.0 <code>uses 516. int $post_id post ID array </code> '; type='function';}, 
	{name='get_post_custom_keys'; match='get_post_custom_keys'; definition='get_post_custom_keys($post_id=0)'; description='Retrieve meta field names for a post. 
If there are no meta fields, then nothing (null) will be returned. 
'; file='/wp-includes/post.php, line: 1554'; since='1.2.0 <code>int $post_id post ID array|null Either array of the keys, or null if keys could not be retrieved. </code> '; type='function';}, 
	{name='get_post_custom_values'; match='get_post_custom_values'; definition='get_post_custom_values($key=\'\', $post_id=0)'; description='Retrieve values for a custom post field. 
The parameters must not be considered optional. All of the post meta fields will be retrieved and only the meta field key values returned. 
'; file='/wp-includes/post.php, line: 1577'; since='1.2.0 <code>string $key Meta field key. int $post_id Post ID array Meta field values. </code> '; type='function';}, 
	{name='get_post_field'; match='get_post_field'; definition='get_post_field($field, $post, $context=\'display\')'; description='Retrieve data from a post field based on Post ID. 
Examples of the post field will be, &apos;post_type&apos;, &apos;post_status&apos;, &apos;content&apos;, etc and based off of the post object property or key names. 
The context values are based off of the taxonomy filter functions and supported values are found within those functions. 

'; file='/wp-includes/post.php, line: 450'; params='@param string $field Post field name  
@param id $post Post ID  
@param string $context Optional. How to filter the field. Default is display.  '; return='WP_Error|string Value in post field or <code>WP_Error</code> on failure '; since='2.3.0 '; uses='sanitize_post_field() See for possible $context values.'; type='function';}, 
	{name='get_post_format'; match='get_post_format'; definition='get_post_format($post=null)'; description='Retrieve the format slug for a post 
'; file='/wp-includes/post.php, line: 495'; params='@param int object $post A post '; return='mixed The format if successful. False if no format is set. <code>WP_Error</code> if errors. '; since='3.1.0 '; type='function';}, 
	{name='get_post_format_link'; match='get_post_format_link'; definition='get_post_format_link($format)'; description='Returns a link to a post format index. 
'; file='/wp-includes/post.php, line: 5200'; params='@param $format string Post format  '; return='string Link '; since='3.1.0 '; type='function';}, 
	{name='get_post_format_slugs'; match='get_post_format_slugs'; definition='get_post_format_slugs()'; description='Retrieves an array of post format slugs. 
'; file='/wp-includes/post.php, line: 5149'; return='array The array of post format slugs. '; since='3.1.0 '; type='function';}, 
	{name='get_post_format_string'; match='get_post_format_string'; definition='get_post_format_string($slug)'; description='Returns a pretty, translated version of a post format slug 
'; file='/wp-includes/post.php, line: 5162'; params='@param string $slug A post format slug  '; return='string The translated post format name '; since='3.1.0 '; type='function';}, 
	{name='get_post_format_strings'; match='get_post_format_strings'; definition='get_post_format_strings()'; description='Returns an array of post format slugs to their translated and pretty display versions 
'; file='/wp-includes/post.php, line: 5126'; return='array The array of translations '; since='3.1.0 '; type='function';}, 
	{name='get_post_meta'; match='get_post_meta'; definition='get_post_meta($post_id, $key, $single=false)'; description='Retrieve post meta field for a post. 

'; file='/wp-includes/post.php, line: 1458'; params='@param int $post_id Post ID.  
@param string $key The meta key to retrieve.  
@param bool $single Whether to return a single value.  '; return='mixed Will be an array if $single is false. Will be value of meta data field if $single is true. '; since='1.5.0 '; uses='$wpdb '; type='function';}, 
	{name='get_post_meta_by_id'; match='get_post_meta_by_id'; definition='get_post_meta_by_id($mid)'; description='{ '; file='/wp-admin/includes/post.php, line: 746'; type='function';}, 
	{name='get_post_mime_type'; match='get_post_mime_type'; definition='get_post_mime_type($ID=\'\')'; description='Retrieve the mime type of an attachment based on the ID. 
This function can be used with any post type, but it makes more sense with attachments. 
'; file='/wp-includes/post.php, line: 477'; params='@param int $ID Optional. Post ID.  '; return='bool|string False on failure or returns the mime type '; since='2.0.0 '; type='function';}, 
	{name='get_post_mime_types'; match='get_post_mime_types'; definition='get_post_mime_types()'; description='Get default post mime types 
'; file='/wp-admin/includes/post.php, line: 985'; return='array '; since='2.9.0 '; type='function';}, 
	{name='get_post_modified_time'; match='get_post_modified_time'; definition='get_post_modified_time($d=\'U\', $gmt=false, $post=null, $translate=false)'; description='Retrieve the time at which the post was last modified. 
'; file='/wp-includes/general-template.php, line: 1521'; params='@param string $d Optional, default is \'U\'. Either \'G\', \'U\', or php date format.  
@param bool $gmt Optional, default is false. Whether to return the gmt time.  
@param int object $post Optional, default is global post object. A post_id or post object  
@param bool $translate Optional, default is false. Whether to translate the result  '; return='string Returns timestamp '; since='2.0.0 '; type='function';}, 
	{name='get_post_permalink'; match='get_post_permalink'; definition='get_post_permalink($id=0, $leavename=false, $sample=false)'; description='Retrieve the permalink for a post with a custom post type. 
'; file='/wp-includes/link-template.php, line: 176'; params='@param int $id Optional. Post ID.  
@param bool $leavename Optional, defaults to false. Whether to keep post name.  
@param bool $sample Optional, defaults to false. Is it a sample permalink.  '; return='string '; since='3.0.0 '; type='function';}, 
	{name='get_post_reply_link'; match='get_post_reply_link'; definition='get_post_reply_link($args=array(), $post=null)'; description='Retrieve HTML content for reply to post link. 
The default arguments that can be override are &apos;add_below&apos;, &apos;respond_id&apos;, &apos;reply_text&apos;, &apos;login_text&apos;, and &apos;depth&apos;. The &apos;login_text&apos; argument will be used, if the user must log in or register first before posting a comment. The &apos;reply_text&apos; will be used, if they can post a reply. The &apos;add_below&apos; and &apos;respond_id&apos; arguments are for the JavaScript moveAddCommentForm() function parameters. 
'; file='/wp-includes/comment-template.php, line: 1097'; params='@param array $args Optional. Override default options.  
@param int object $post Optional. Post that the comment is going to be displayed on. Defaults to current post.  '; return='string|bool|null Link to show comment form, if successful. False, if comments are closed. '; since='2.7.0 '; type='function';}, 
	{name='get_post_stati'; match='get_post_stati'; definition='get_post_stati($args=array(), $output=\'names\', $operator=\'and\')'; description=''; file='/wp-includes/post.php, line: 745'; type='function';}, 
	{name='get_post_status'; match='get_post_status'; definition='get_post_status($ID=\'\')'; description='Retrieve the post status based on the Post ID. 
If the post ID is of an attachment, then the parent post status will be given instead. 
'; file='/wp-includes/post.php, line: 562'; params='@param int $ID Post ID  '; return='string|bool Post status or false on failure. '; since='2.0.0 '; type='function';}, 
	{name='get_post_status_object'; match='get_post_status_object'; definition='get_post_status_object($post_status)'; description=''; file='/wp-includes/post.php, line: 720'; type='function';}, 
	{name='get_post_statuses'; match='get_post_statuses'; definition='get_post_statuses()'; description='Retrieve all of the WordPress supported post statuses. 
Posts have a limited set of valid status values, this provides the post_status values and descriptions. 
'; file='/wp-includes/post.php, line: 594'; return='array List of post statuses. '; since='2.5.0 '; type='function';}, 
	{name='get_post_taxonomies'; match='get_post_taxonomies'; definition='get_post_taxonomies($post=0)'; description='Retrieve all taxonomies of a post with just the names. 

'; file='/wp-includes/taxonomy.php, line: 3020'; params='@param int $post Optional. Post ID  '; return='array '; since='2.5.0 '; uses='get_object_taxonomies()'; type='function';}, 
	{name='get_post_thumbnail_id'; match='get_post_thumbnail_id'; definition='get_post_thumbnail_id($post_id=null)'; description='Retrieve Post Thumbnail ID. 
'; file='/wp-includes/post-thumbnail-template.php, line: 33'; params='@param int $post_id Optional. Post ID.  '; return='int '; since='2.9.0 '; type='function';}, 
	{name='get_post_time'; match='get_post_time'; definition='get_post_time($d=\'U\', $gmt=false, $post=null, $translate=false)'; description='Retrieve the time at which the post was written. 
'; file='/wp-includes/general-template.php, line: 1471'; params='@param string $d Optional Either \'G\', \'U\', or php date format.  
@param bool $gmt Optional, default is false. Whether to return the gmt time.  
@param int object $post Optional post ID or object. Default is global $post object.  
@param bool $translate Whether to translate the time string  '; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_post_to_edit'; match='get_post_to_edit'; definition='get_post_to_edit($id)'; description='Get an existing post and format it for editing. 
'; file='/wp-admin/includes/post.php, line: 475'; params='@param unknown_type $id  '; return='unknown '; since='2.0.0 '; type='function';}, 
	{name='get_post_type'; match='get_post_type'; definition='get_post_type($the_post=false)'; description='Retrieve the post type of the current post or of a given post. 

'; file='/wp-includes/post.php, line: 795'; params='@param mixed $the_post Optional. Post object or post ID.  '; return='bool|string post type or false on failure. '; since='2.1.0 '; uses='$post The Loop current post global'; type='function';}, 
	{name='get_post_type_archive_feed_link'; match='get_post_type_archive_feed_link'; definition='get_post_type_archive_feed_link($post_type, $feed=\'\')'; description='Retrieve the permalink for a post type archive feed. 
'; file='/wp-includes/link-template.php, line: 869'; params='@param string $post_type Post type  
@param string $feed Optional. Feed type  '; return='string '; since='3.1.0 '; type='function';}, 
	{name='get_post_type_archive_link'; match='get_post_type_archive_link'; definition='get_post_type_archive_link($post_type)'; description='Retrieve the permalink for a post type archive. 
'; file='/wp-includes/link-template.php, line: 838'; params='@param string $post_type Post type  '; return='string '; since='3.1.0 '; type='function';}, 
	{name='get_post_type_capabilities'; match='get_post_type_capabilities'; definition='get_post_type_capabilities($args)'; description='Builds an object with all post type capabilities out of a post type object 
Post type capabilities use the &apos;capability_type&apos; argument as a base, if the capability is not set in the &apos;capabilities&apos; argument array or if the &apos;capabilities&apos; argument is not supplied. 
The capability_type argument can optionally be registered as an array, with the first value being singular and the second plural, e.g. array(&apos;story, &apos;stories&apos;) Otherwise, an &apos;s&apos; will be added to the value for the plural form. After registration, capability_type will always be a string of the singular value. 
By default, seven keys are accepted as part of the capabilities array: 
edit_post, read_post, and delete_post are meta capabilities, which are then generally mapped to corresponding primitive capabilities depending on the context, which would be the post being edited/read/deleted and the user or role being checked. Thus these capabilities would generally not be granted directly to users or roles. 
edit_posts - Controls whether objects of this post type can be edited. edit_others_posts - Controls whether objects of this type owned by other users can be edited. If the post type does not support an author, then this will behave like edit_posts. publish_posts - Controls publishing objects of this post type. read_private_posts - Controls whether private objects can be read. 
These four primitive capabilities are checked in core in various locations. There are also seven other primitive capabilities which are not referenced directly in core, except in map_meta_cap(), which takes the three aforementioned meta capabilities and translates them into one or more primitive capabilities that must then be checked against the user or role, depending on the context. 
read - Controls whether objects of this post type can be read. delete_posts - Controls whether objects of this post type can be deleted. delete_private_posts - Controls whether private objects can be deleted. delete_published_posts - Controls whether published objects can be deleted. delete_others_posts - Controls whether objects owned by other users can be can be deleted. If the post type does not support an author, then this will behave like delete_posts. edit_private_posts - Controls whether private objects can be edited. edit_published_posts - Controls whether published objects can be edited. 
These additional capabilities are only used in map_meta_cap(). Thus, they are only assigned by default if the post type is registered with the &apos;map_meta_cap&apos; argument set to true (default is false). 
@see map_meta_cap() '; file='/wp-includes/post.php, line: 1095'; params='@param object $args Post type registration arguments  '; return='object object with all the capabilities as member variables '; since='3.0.0 '; type='function';}, 
	{name='get_post_type_labels'; match='get_post_type_labels'; definition='get_post_type_labels($post_type_object)'; description='Builds an object with all post type labels out of a post type object 
Accepted keys of the label array in the post type object: name - general name for the post type, usually plural. The same and overriden by $post_type_object-&gt;label. Default is Posts/Pages singular_name - name for one object of this post type. Default is Post/Page add_new - Default is Add New for both hierarchical and non-hierarchical types. When internationalizing this string, please use a <code>gettext context</code> matching your post type. Example: _x(&apos;Add New&apos;, &apos;product&apos;); add_new_item - Default is Add New Post/Add New Page edit_item - Default is Edit Post/Edit Page new_item - Default is New Post/New Page view_item - Default is View Post/View Page search_items - Default is Search Posts/Search Pages not_found - Default is No posts found/No pages found not_found_in_trash - Default is No posts found in Trash/No pages found in Trash parent_item_colon - This string isn&apos;t used on non-hierarchical types. In hierarchical ones the default is Parent Page: 
Above, the first default value is for non-hierarchical post types (like posts) and the second one is for hierarchical post types (like pages). 
'; file='/wp-includes/post.php, line: 1175'; params='@param object $post_type_object  '; return='object object with all the labels as member variables '; since='3.0.0 '; type='function';}, 
	{name='get_post_type_object'; match='get_post_type_object'; definition='get_post_type_object($post_type)'; description=''; file='/wp-includes/post.php, line: 822'; type='function';}, 
	{name='get_post_types'; match='get_post_types'; definition='get_post_types($args=array(), $output=\'names\', $operator=\'and\')'; description=''; file='/wp-includes/post.php, line: 846'; type='function';}, 
	{name='get_postdata'; match='get_postdata'; definition='get_postdata($postid)'; description='Entire Post data. 
@see get_post() '; file='/wp-includes/deprecated.php, line: 26'; params='@param int $postid  '; return='array '; since='0.71 '; type='function';}, 
	{name='get_posts'; match='get_posts'; definition='get_posts($args=null)'; description='Retrieve list of latest posts or posts matching criteria. 
The defaults are as follows: &apos;numberposts&apos; - Default is 5. Total number of posts to retrieve. &apos;offset&apos; - Default is 0. See <code>WP_Query::query()</code> for more. &apos;category&apos; - What category to pull the posts from. &apos;orderby&apos; - Default is &apos;post_date&apos;. How to order the posts. &apos;order&apos; - Default is &apos;DESC&apos;. The order to retrieve the posts. &apos;include&apos; - See <code>WP_Query::query()</code> for more. &apos;exclude&apos; - See <code>WP_Query::query()</code> for more. &apos;meta_key&apos; - See <code>WP_Query::query()</code> for more. &apos;meta_value&apos; - See <code>WP_Query::query()</code> for more. &apos;post_type&apos; - Default is &apos;post&apos;. Can be &apos;page&apos;, or &apos;attachment&apos; to name a few. &apos;post_parent&apos; - The parent of the post or post type. &apos;post_status&apos; - Default is &apos;publish&apos;. Post status to retrieve. 

'; file='/wp-includes/post.php, line: 1362'; params='@param array $args Optional. Overrides defaults.  '; return='array List of posts. '; since='1.2.0 '; uses='$wpdb 
 See for more default arguments and information. '; type='function';}, 
	{name='get_posts_by_author_sql'; match='get_posts_by_author_sql'; definition='get_posts_by_author_sql($post_type, $full=true, $post_author=null)'; description='Retrieve the post SQL based on capability, author, and type. 
@see get_private_posts_cap_sql() for full description. '; file='/wp-includes/post.php, line: 4156'; params='@param string $post_type Post type.  
@param bool $full Optional. Returns a full WHERE statement instead of just an \'andalso\' term.  
@param int $post_author Optional. Query posts having a single author ID.  '; return='string SQL WHERE code that can be added to a query. '; since='3.0.0 '; type='function';}, 
	{name='get_posts_nav_link'; match='get_posts_nav_link'; definition='get_posts_nav_link($args=array())'; description='Return post pages link navigation for previous and next pages. 
'; file='/wp-includes/link-template.php, line: 1693'; params='@param string array $args Optional args.  '; return='string The posts link navigation. '; since='2.8 '; type='function';}, 
	{name='get_preferred_from_update_core'; match='get_preferred_from_update_core'; definition='get_preferred_from_update_core()'; description='Selects the first update version from the update_core option 
'; file='/wp-admin/includes/update.php, line: 16'; return='object the response from the API '; type='function';}, 
	{name='get_previous_comments_link'; match='get_previous_comments_link'; definition='get_previous_comments_link($label=\'\')'; description='Return the previous comments page link. 
'; file='/wp-includes/link-template.php, line: 1828'; params='@param string $label Optional. Label for comments link text.  '; return='string|null '; since='2.7.1 '; type='function';}, 
	{name='get_previous_post'; match='get_previous_post'; definition='get_previous_post($in_same_cat=false, $excluded_categories=\'\')'; description='Retrieve previous post that is adjacent to current post. 
'; file='/wp-includes/link-template.php, line: 1071'; params='@param bool $in_same_cat Optional. Whether post should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; return='mixed Post object if successful. Null if global $post is not set. Empty string if no corresponding post exists. '; since='1.5.0 '; type='function';}, 
	{name='get_previous_posts_link'; match='get_previous_posts_link'; definition='get_previous_posts_link($label=null)'; description='Return the previous posts pages link. 
'; file='/wp-includes/link-template.php, line: 1661'; params='@param string $label Optional. Previous page link text.  '; return='string|null '; since='2.7.0 '; type='function';}, 
	{name='get_previous_posts_page_link'; match='get_previous_posts_page_link'; definition='get_previous_posts_page_link()'; description='Retrieve previous post pages link. 
Will only return string, if not on a single page or post. 
Backported to 2.0.10 from 2.1.3. 
'; file='/wp-includes/link-template.php, line: 1626'; return='string|null '; since='2.0.10 '; type='function';}, 
	{name='get_private_posts_cap_sql'; match='get_private_posts_cap_sql'; definition='get_private_posts_cap_sql($post_type)'; description='Retrieve the private post SQL based on capability. 
This function provides a standardized way to appropriately select on the post_status of a post type. The function will return a piece of SQL code that can be added to a WHERE clause; this SQL is constructed to allow all published posts, and all private posts to which the user has access. 

'; file='/wp-includes/post.php, line: 4141'; params='@param string $post_type currently only supports \'post\' or \'page\'.  '; return='string SQL code that can be added to a where clause. '; since='2.2.0 '; uses='$user_ID'; type='function';}, 
	{name='get_profile'; match='get_profile'; definition='get_profile($field, $user=false)'; description='Retrieve user data based on field. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 2469'; since='1.5.0 '; type='function';}, 
	{name='get_pung'; match='get_pung'; definition='get_pung($post_id)'; description='Retrieve URLs already pinged for a post. 

'; file='/wp-includes/post.php, line: 3053'; params='@param int $post_id Post ID.  '; return='array '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='get_queried_object'; match='get_queried_object'; definition='get_queried_object()'; description='Retrieve the currently-queried object. Wrapper for $wp_query-&gt;get_queried_object() 


'; file='/wp-includes/query.php, line: 41'; return='object '; since='3.1.0 '; type='function';}, 
	{name='get_queried_object_id'; match='get_queried_object_id'; definition='get_queried_object_id()'; description='Retrieve ID of the current queried object. Wrapper for $wp_query-&gt;get_queried_object_id() 


'; file='/wp-includes/query.php, line: 56'; return='int '; since='3.1.0 '; type='function';}, 
	{name='get_query_template'; match='get_query_template'; definition='get_query_template($type, $templates=array())'; description='Retrieve path to a template 
Used to quickly retrieve the path of a template without including the file extension. It will also check the parent theme, if the file exists, with the use of <code>locate_template()</code> . Allows for more generic template location without the use of the other get_&lowast;_template() functions. 
'; file='/wp-includes/theme.php, line: 744'; params='@param string $type Filename without extension.  
@param array $templates An optional list of template candidates  '; return='string Full path to file. '; since='1.5.0 '; type='function';}, 
	{name='get_query_var'; match='get_query_var'; definition='get_query_var($var)'; description='Retrieve variable in the <code>WP_Query</code> class. 
@see <code>WP_Query::get()</code> 
'; file='/wp-includes/query.php, line: 24'; params='@param string $var The variable key to retrieve.  '; return='mixed '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='get_random_header_image'; match='get_random_header_image'; definition='get_random_header_image()'; description='Get random header image from registered images in theme. 
'; file='/wp-includes/theme.php, line: 1455'; return='string Path to header image '; since='3.2.0 '; type='function';}, 
	{name='get_raw_theme_root'; match='get_raw_theme_root'; definition='get_raw_theme_root($stylesheet_or_template, $no_cache=false)'; description='Get the raw theme root relative to the content directory with no filters applied. 
'; file='/wp-includes/theme.php, line: 705'; params='@param string $stylesheet_or_template The stylesheet or template name of the theme  '; return='string Theme root '; since='3.1.0 '; type='function';}, 
	{name='get_real_file_to_edit'; match='get_real_file_to_edit'; definition='get_real_file_to_edit($file)'; description='Get the real file system path to a file to edit within the admin 
If the $file is index.php or .htaccess this function will assume it is relative to the install root, otherwise it is assumed the file is relative to the wp-content directory 
'; file='/wp-admin/includes/file.php, line: 108'; params='@param string $file filesystem path relative to the WordPress install directory or to the wp-content directory  '; return='string full file system path to edit '; since='1.5.0 '; uses='get_home_path 
WP_CONTENT_DIR full filesystem path to the wp-content directory '; type='function';}, 
	{name='get_registered_nav_menus'; match='get_registered_nav_menus'; definition='get_registered_nav_menus()'; description='Returns an array of all registered navigation menus in a theme 
'; file='/wp-includes/nav-menu.php, line: 115'; return='array '; since='3.0.0 '; type='function';}, 
	{name='get_role'; match='get_role'; definition='get_role($role)'; description='Retrieve role object. 
@see <code>WP_Roles::get_role()</code> Uses method to retrieve role object. '; file='/wp-includes/capabilities.php, line: 1132'; params='@param string $role Role name.  '; return='object '; since='2.0.0 '; type='function';}, 
	{name='get_sample_permalink'; match='get_sample_permalink'; definition='get_sample_permalink($id, $title=null, $name=null)'; description='{ '; file='/wp-admin/includes/post.php, line: 1094'; type='function';}, 
	{name='get_sample_permalink_html'; match='get_sample_permalink_html'; definition='get_sample_permalink_html($id, $new_title=null, $new_slug=null)'; description='sample permalink html 
intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. 
'; file='/wp-admin/includes/post.php, line: 1159'; params='@param int object $id Post ID or post object.  
@param string $new_title (optional) New title  
@param string $new_slug (optional) New slug  '; return='string intended to be used for the inplace editor of the permalink post slug on in the post (and page?) editor. '; since='2.5.0 '; type='function';}, 
	{name='get_screen_icon'; match='get_screen_icon'; definition='get_screen_icon($screen=\'\')'; description=''; file='/wp-admin/includes/template.php, line: 1964'; type='function';}, 
	{name='get_search_comments_feed_link'; match='get_search_comments_feed_link'; definition='get_search_comments_feed_link($search_query=\'\', $feed=\'\')'; description='Retrieve the permalink for the comments feed of the search results. 
'; file='/wp-includes/link-template.php, line: 810'; params='@param string $search_query Optional. Search query.  
@param string $feed Optional. Feed type.  '; return='string '; since='2.5.0 '; type='function';}, 
	{name='get_search_feed_link'; match='get_search_feed_link'; definition='get_search_feed_link($search_query=\'\', $feed=\'\')'; description='Retrieve the permalink for the feed of the search results. 
'; file='/wp-includes/link-template.php, line: 780'; params='@param string $search_query Optional. Search query.  
@param string $feed Optional. Feed type.  '; return='string '; since='2.5.0 '; type='function';}, 
	{name='get_search_form'; match='get_search_form'; definition='get_search_form($echo=true)'; description='Display search form. 
Will first attempt to locate the searchform.php file in either the child or the parent, then load it. If it doesn&apos;t exist, then the default search form will be displayed. The default search form is HTML, which will be displayed. There is a filter applied to the search form HTML in order to edit or replace it. The filter is &apos;get_search_form&apos;. 
This function is primarily used by themes which want to hardcode the search form into the sidebar and also by the search widget in WordPress. 
There is also an action that is called whenever the function is run called, &apos;get_search_form&apos;. This can be useful for outputting JavaScript that the search relies on or various formatting that applies to the beginning of the search. To give a few examples of what it can be used for. 
'; file='/wp-includes/general-template.php, line: 151'; params='@param boolean $echo Default to echo and not return the form.  '; since='2.7.0 '; type='function';}, 
	{name='get_search_link'; match='get_search_link'; definition='get_search_link($query=\'\')'; description='Retrieve permalink for search. 
'; file='/wp-includes/link-template.php, line: 749'; params='@param string $query Optional. The query string to use. If empty the current query is used.  '; return='string '; since='3.0.0 '; type='function';}, 
	{name='get_search_query'; match='get_search_query'; definition='get_search_query($escaped=true)'; description='Retrieve the contents of the search WordPress query variable. 
The search query string is passed through <code>esc_attr()</code> to ensure that it is safe for placing in an html attribute. 

'; file='/wp-includes/general-template.php, line: 1866'; params='@param bool $escaped Whether the result is escaped. Default true. Only use when you are later escaping it. Do not use unescaped.  '; return='string '; since='2.3.0 '; uses='esc_attr()'; type='function';}, 
	{name='get_search_template'; match='get_search_template'; definition='get_search_template()'; description='Retrieve path of search template in current or parent template. 
'; file='/wp-includes/theme.php, line: 991'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_settings'; match='get_settings'; definition='get_settings($option)'; description='Get value based on option. 
@see get_option() '; file='/wp-includes/deprecated.php, line: 848'; params='@param string $option  '; return='string '; since='0.71 '; type='function';}, 
	{name='get_settings_errors'; match='get_settings_errors'; definition='get_settings_errors($setting=\'\', $sanitize=FALSE)'; description='Fetch settings errors registered by add_settings_error() 
Checks the $wp_settings_errors array for any errors declared during the current pageload and returns them. 
If changes were just submitted ($_GET[&apos;settings-updated&apos;]) and settings errors were saved to the &apos;settings_errors&apos; transient then those errors will be returned instead. This is used to pass errors back across pageloads. 
Use the $sanitize argument to manually re-sanitize the option before returning errors. This is useful if you have errors or notices you want to show even when the user hasn&apos;t submitted data (i.e. when they first load an options page, or in admin_notices action hook) 

'; file='/wp-admin/includes/template.php, line: 1268'; params='@param string $setting Optional slug title of a specific setting who\'s errors you want.  
@param boolean $sanitize Whether to re-sanitize the setting value before returning errors.  '; return='array Array of settings errors '; since='3.0.0 '; type='function';}, 
	{name='get_shortcode_regex'; match='get_shortcode_regex'; definition='get_shortcode_regex()'; description='Retrieve the shortcode regular expression for searching. 
The regular expression combines the shortcode tags in the regular expression in a regex class. 
The regular expresion contains 6 different sub matches to help with parsing. 
1/6 - An extra [ or ] to allow for escaping shortcodes with double [[]] 2 - The shortcode name 3 - The shortcode argument list 4 - The self closing / 5 - The content of a shortcode when it wraps some content. 

'; file='/wp-includes/shortcodes.php, line: 173'; return='string The shortcode search regular expression '; since='2.5 '; uses='$shortcode_tags'; type='function';}, 
	{name='get_shortcut_link'; match='get_shortcut_link'; definition='get_shortcut_link()'; description='Retrieve shortcut link. 
Use this in &apos;a&apos; element &apos;href&apos; attribute. 
'; file='/wp-includes/link-template.php, line: 1904'; return='string '; since='2.6.0 '; type='function';}, 
	{name='get_sidebar'; match='get_sidebar'; definition='get_sidebar($name=null)'; description='Load sidebar template. 
Includes the sidebar template for a theme or if a name is specified then a specialised sidebar will be included. 
For the parameter, if the file is called &quot;sidebar-special.php&quot; then specify &quot;special&quot;. 

'; file='/wp-includes/general-template.php, line: 82'; params='@param string $name The name of the specialised sidebar.  '; since='1.5.0 '; uses='locate_template() 
do_action() Calls \'get_sidebar\' action.'; type='function';}, 
	{name='get_single_template'; match='get_single_template'; definition='get_single_template()'; description='Retrieve path of single template in current or parent template. 
'; file='/wp-includes/theme.php, line: 1002'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_site_allowed_themes'; match='get_site_allowed_themes'; definition='get_site_allowed_themes()'; description=''; file='/wp-admin/includes/ms.php, line: 307'; type='function';}, 
	{name='get_site_option'; match='get_site_option'; definition='get_site_option($option, $default=false, $use_cache=true)'; description=''; file='/wp-includes/functions.php, line: 3723'; type='function';}, 
	{name='get_site_transient'; match='get_site_transient'; definition='get_site_transient($transient)'; description=''; file='/wp-includes/functions.php, line: 3942'; type='function';}, 
	{name='get_site_url'; match='get_site_url'; definition='get_site_url($blog_id=null, $path=\'\', $scheme=null)'; description=''; file='/wp-includes/link-template.php, line: 2015'; type='function';}, 
	{name='get_sitestats'; match='get_sitestats'; definition='get_sitestats()'; description='Gets the network&apos;s site and user counts. 

'; file='/wp-includes/ms-functions.php, line: 19'; return='array Site and user count for the network. '; since='MU 1.0 '; uses='get_blog_count() 
get_user_count()'; type='function';}, 
	{name='get_space_allowed'; match='get_space_allowed'; definition='get_space_allowed()'; description='Returns the upload quota for the current blog. 
'; file='/wp-admin/includes/ms.php, line: 394'; return='int Quota '; type='function';}, 
	{name='get_status_header_desc'; match='get_status_header_desc'; definition='get_status_header_desc($code)'; description='Retrieve the description for the HTTP status. 
'; file='/wp-includes/functions.php, line: 1581'; params='@param int $code HTTP status code.  '; return='string Empty string if not found, or description if found. '; since='2.3.0 '; type='function';}, 
	{name='get_stylesheet'; match='get_stylesheet'; definition='get_stylesheet()'; description='Retrieve name of the current stylesheet. 
The theme name that the administrator has currently set the front end theme as. 
For all extensive purposes, the template name and the stylesheet name are going to be the same for most cases. 

'; file='/wp-includes/theme.php, line: 34'; return='string Stylesheet name. '; since='1.5.0 '; uses='apply_filters() Calls \'stylesheet\' filter on stylesheet name.'; type='function';}, 
	{name='get_stylesheet_directory'; match='get_stylesheet_directory'; definition='get_stylesheet_directory()'; description='Retrieve stylesheet directory path for current theme. 

'; file='/wp-includes/theme.php, line: 46'; return='string Path to current theme directory. '; since='1.5.0 '; uses='apply_filters() Calls \'stylesheet_directory\' filter on stylesheet directory and theme name.'; type='function';}, 
	{name='get_stylesheet_directory_uri'; match='get_stylesheet_directory_uri'; definition='get_stylesheet_directory_uri()'; description='Retrieve stylesheet directory URI. 
'; file='/wp-includes/theme.php, line: 61'; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_stylesheet_uri'; match='get_stylesheet_uri'; definition='get_stylesheet_uri()'; description='Retrieve URI of current theme stylesheet. 
The stylesheet file name is &apos;style.css&apos; which is appended to <code>stylesheet directory URI</code> path. 

'; file='/wp-includes/theme.php, line: 80'; return='string '; since='1.5.0 '; uses='apply_filters() Calls \'stylesheet_uri\' filter on stylesheet URI path and stylesheet directory URI.'; type='function';}, 
	{name='get_submit_button'; match='get_submit_button'; definition='get_submit_button($text=NULL, $type=\'primary\', $name=\'submit\', $wrap=true, $other_attributes=NULL)'; description='Returns a submit button, with provided text and appropriate class 
'; file='/wp-admin/includes/template.php, line: 2190'; params='@param string $text The text of the button (defaults to \'Save Changes\')  
@param string $type The type of button. One of: primary, secondary, delete  
@param string $name The HTML name of the submit button. Defaults to \"submit\". If no id attribute is given in $other_attributes below, $name will be used as the button\'s id.  
@param bool $wrap True if the output button should be wrapped in a paragraph tag, false otherwise. Defaults to true  
@param array string $other_attributes Other attributes that should be output with the button, mapping attributes to their values, such as array( \'tabindex\' => \'1\' ). These attributes will be ouput as attribute=\"value\", such as tabindex=\"1\". Defaults to no other attributes. Other attributes can also be provided as a string such as \'tabindex=\"1\"\', though the array format is typically cleaner.  '; since='3.1.0 '; type='function';}, 
	{name='get_super_admins'; match='get_super_admins'; definition='get_super_admins()'; description='Retrieve a list of super admins. 

'; file='/wp-includes/capabilities.php, line: 1188'; return='array List of super admin logins '; since='3.0.0 '; uses='$super_admins Super admins global variable, if set.'; type='function';}, 
	{name='get_tag'; match='get_tag'; definition='get_tag($tag, $output=OBJECT, $filter=\'raw\')'; description='Retrieve post tag by tag ID or tag object. 
If you pass the $tag parameter an object, which is assumed to be the tag row object retrieved the database. It will cache the tag data. 
If you pass $tag an integer of the tag ID, then that tag will be retrieved from the database, if it isn&apos;t already cached, and pass it back. 
If you look at get_term(), then both types will be passed through several filters and finally sanitized based on the $filter parameter value. 
'; file='/wp-includes/category.php, line: 300'; params='@param int object $tag  
@param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N  
@param string $filter Optional. Default is raw or no WordPress defined filter will applied.  '; return='object|array Return type based on $output value. '; since='2.3.0 '; type='function';}, 
	{name='get_tag_feed_link'; match='get_tag_feed_link'; definition='get_tag_feed_link($tag_id, $feed=\'\')'; description='Retrieve permalink for feed of tag. 
'; file='/wp-includes/link-template.php, line: 646'; params='@param int $tag_id Tag ID.  
@param string $feed Optional. Feed type.  '; return='string '; since='2.3.0 '; type='function';}, 
	{name='get_tag_link'; match='get_tag_link'; definition='get_tag_link($tag)'; description='Retrieve the link to the tag. 
@see get_term_link() '; file='/wp-includes/category-template.php, line: 978'; params='@param int object $tag Tag ID or object.  '; return='string Link on success, empty string if tag does not exist. '; since='2.3.0 '; type='function';}, 
	{name='get_tag_template'; match='get_tag_template'; definition='get_tag_template()'; description='Retrieve path of tag template in current or parent template. 
Works by first retrieving the current tag name, for example &apos;tag-wordpress.php&apos; and then trying tag ID, for example &apos;tag-1.php&apos; and will finally fallback to tag.php template, if those files don&apos;t exist. 

'; file='/wp-includes/theme.php, line: 849'; return='string '; since='2.3.0 '; uses='apply_filters() Calls \'tag_template\' on file path of tag template.'; type='function';}, 
	{name='get_tags'; match='get_tags'; definition='get_tags($args=\'\')'; description='Retrieves all post tags. 
@see get_terms() For list of arguments to pass. 
'; file='/wp-includes/category.php, line: 268'; params='@param string array $args Tag arguments to use when retrieving tags.  '; return='array List of tags. '; since='2.3.0 '; uses='apply_filters() Calls \'get_tags\' hook on array of tags and with $args.'; type='function';}, 
	{name='get_tags_to_edit'; match='get_tags_to_edit'; definition='get_tags_to_edit($post_id, $taxonomy=\'post_tag\')'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 205'; type='function';}, 
	{name='get_tax_sql'; match='get_tax_sql'; definition='get_tax_sql($tax_query, $primary_table, $primary_id_column)'; description='Given a taxonomy query, generates SQL to be appended to a main query. 
@see <code>WP_Tax_Query</code> '; file='/wp-includes/taxonomy.php, line: 524'; params='@param array $tax_query A compact tax query  
@param string $primary_table  
@param string $primary_id_column  '; return='array '; since='3.1.0 '; type='function';}, 
	{name='get_taxonomies'; match='get_taxonomies'; definition='get_taxonomies($args=array(), $output=\'names\', $operator=\'and\')'; description=''; file='/wp-includes/taxonomy.php, line: 119'; type='function';}, 
	{name='get_taxonomy'; match='get_taxonomy'; definition='get_taxonomy($taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 187'; type='function';}, 
	{name='get_taxonomy_labels'; match='get_taxonomy_labels'; definition='get_taxonomy_labels($tax)'; description='Builds an object with all taxonomy labels out of a taxonomy object 
Accepted keys of the label array in the taxonomy object: name - general name for the taxonomy, usually plural. The same as and overriden by $tax-&gt;label. Default is Post Tags/Categories singular_name - name for one object of this taxonomy. Default is Post Tag/Category search_items - Default is Search Tags/Search Categories popular_items - This string isn&apos;t used on hierarchical taxonomies. Default is Popular Tags all_items - Default is All Tags/All Categories parent_item - This string isn&apos;t used on non-hierarchical taxonomies. In hierarchical ones the default is Parent Category parent_item_colon - The same as parent_item , but with colon : in the end edit_item - Default is Edit Tag/Edit Category update_item - Default is Update Tag/Update Category add_new_item - Default is Add New Tag/Add New Category new_item_name - Default is New Tag Name/New Category Name separate_items_with_commas - This string isn&apos;t used on hierarchical taxonomies. Default is &quot;Separate tags with commas,&quot; used in the meta box. add_or_remove_items - This string isn&apos;t used on hierarchical taxonomies. Default is &quot;Add or remove tags,&quot; used in the meta box when JavaScript is disabled. choose_from_most_used - This string isn&apos;t used on hierarchical taxonomies. Default is &quot;Choose from the most used tags,&quot; used in the meta box. 
Above, the first default value is for non-hierarchical taxonomies (like tags) and the second one is for hierarchical taxonomies (like categories.) 
'; file='/wp-includes/taxonomy.php, line: 394'; params='@param object $tax Taxonomy object  '; return='object object with all the labels as member variables '; since='3.0.0 '; type='function';}, 
	{name='get_taxonomy_template'; match='get_taxonomy_template'; definition='get_taxonomy_template()'; description='Retrieve path of taxonomy template in current or parent template. 
Retrieves the taxonomy and term, if term is available. The template is prepended with &apos;taxonomy-&apos; and followed by both the taxonomy string and the taxonomy string followed by a dash and then followed by the term. 
The taxonomy and term template is checked and used first, if it exists. Second, just the taxonomy template is checked, and then finally, taxonomy.php template is used. If none of the files exist, then it will fall back on to index.php. 

'; file='/wp-includes/theme.php, line: 878'; return='string '; since='2.5.0 '; uses='apply_filters() Calls \'taxonomy_template\' filter on found path.'; type='function';}, 
	{name='get_temp_dir'; match='get_temp_dir'; definition='get_temp_dir()'; description='Determines a writable directory for temporary files. Function&apos;s preference is to WP_CONTENT_DIR followed by the return value of sys_get_temp_dir() , before finally defaulting to /tmp/ 
In the event that this function does not find a writable location, It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file. 
'; file='/wp-includes/functions.php, line: 2159'; return='string Writable temporary directory '; since='2.5.0 '; type='function';}, 
	{name='get_template'; match='get_template'; definition='get_template()'; description='Retrieve name of the current theme. 

'; file='/wp-includes/theme.php, line: 127'; return='string Template name. '; since='1.5.0 '; uses='apply_filters() Calls \'template\' filter on template option.'; type='function';}, 
	{name='get_template_directory'; match='get_template_directory'; definition='get_template_directory()'; description='Retrieve current theme directory. 

'; file='/wp-includes/theme.php, line: 139'; return='string Template directory path. '; since='1.5.0 '; uses='apply_filters() Calls \'template_directory\' filter on template directory path and template name.'; type='function';}, 
	{name='get_template_directory_uri'; match='get_template_directory_uri'; definition='get_template_directory_uri()'; description='Retrieve theme directory URI. 

'; file='/wp-includes/theme.php, line: 155'; return='string Template directory URI. '; since='1.5.0 '; uses='apply_filters() Calls \'template_directory_uri\' filter on template directory URI path and template name.'; type='function';}, 
	{name='get_template_part'; match='get_template_part'; definition='get_template_part($slug, $name=null)'; description='Load a template part into a template 
Makes it easy for a theme to reuse sections of code in a easy to overload way for child themes. 
Includes the named template part for a theme or if a name is specified then a specialised part will be included. If the theme contains no {slug}.php file then no template will be included. 
The template is included using require, not require_once, so you may include the same template part multiple times. 
For the parameter, if the file is called &quot;{slug}-special.php&quot; then specify &quot;special&quot;. 

'; file='/wp-includes/general-template.php, line: 119'; params='@param string $slug The slug name for the generic template.  
@param string $name The name of the specialised template.  '; since='3.0.0 '; uses='locate_template() 
do_action() Calls \'get_template_part{$slug}\' action.'; type='function';}, 
	{name='get_term'; match='get_term'; definition='get_term($term, $taxonomy, $output=OBJECT, $filter=\'raw\')'; description=''; file='/wp-includes/taxonomy.php, line: 833'; type='function';}, 
	{name='get_term_by'; match='get_term_by'; definition='get_term_by($field, $value, $taxonomy, $output=OBJECT, $filter=\'raw\')'; description=''; file='/wp-includes/taxonomy.php, line: 906'; type='function';}, 
	{name='get_term_children'; match='get_term_children'; definition='get_term_children($term_id, $taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 969'; type='function';}, 
	{name='get_term_feed_link'; match='get_term_feed_link'; definition='get_term_feed_link($term_id, $taxonomy=\'category\', $feed=\'\')'; description='Retrieve the feed link for a taxonomy. 
Returns a link to the feed for all post in a given term. A specific feed can be requested or left blank to get the default feed. 
'; file='/wp-includes/link-template.php, line: 591'; params='@param int $term_id ID of a category.  
@param string $taxonomy Optional. Taxonomy of $term_id  
@param string $feed Optional. Feed type.  '; return='string Link to the feed for the taxonomy specified by $term_id and $taxonomy. '; since='3.0 '; type='function';}, 
	{name='get_term_field'; match='get_term_field'; definition='get_term_field($field, $term, $taxonomy, $context=\'display\')'; description=''; file='/wp-includes/taxonomy.php, line: 1009'; type='function';}, 
	{name='get_term_link'; match='get_term_link'; definition='get_term_link($term, $taxonomy=\'\')'; description='Generates a permalink for a taxonomy term archive. 

'; file='/wp-includes/taxonomy.php, line: 2868'; params='@param object int string $term  
@param string $taxonomy (optional if $term is object)  '; return='string|WP_Error HTML link to taxonomy term archive on success, <code>WP_Error</code> if term does not exist. '; since='2.5.0 '; uses='apply_filters() Calls \'term_link\' with term link and term object, and taxonomy parameters. 
apply_filters() For the post_tag Taxonomy, Calls \'tag_link\' with tag link and tag ID as parameters. 
apply_filters() For the category Taxonomy, Calls \'category_link\' filter on category link and category ID.'; type='function';}, 
	{name='get_term_to_edit'; match='get_term_to_edit'; definition='get_term_to_edit($id, $taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 1040'; type='function';}, 
	{name='get_terms'; match='get_terms'; definition='get_terms($taxonomies, $args=\'\')'; description=''; file='/wp-includes/taxonomy.php, line: 1149'; type='function';}, 
	{name='get_terms_to_edit'; match='get_terms_to_edit'; definition='get_terms_to_edit($post_id, $taxonomy=\'post_tag\')'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 217'; type='function';}, 
	{name='get_the_ID'; match='get_the_ID'; definition='get_the_ID()'; description='Retrieve the ID of the current item in the WordPress Loop. 

'; file='/wp-includes/post-template.php, line: 28'; return='int '; since='2.1.0 '; uses='$post'; type='function';}, 
	{name='get_the_attachment_link'; match='get_the_attachment_link'; definition='get_the_attachment_link($id=0, $fullsize=false, $max_dims=false, $permalink=false)'; description='Retrieve HTML content of attachment image with link. 
@see wp_get_attachment_link() '; file='/wp-includes/deprecated.php, line: 1892'; params='@param int $id Optional. Post ID.  
@param bool $fullsize Optional, default is false. Whether to use full size image.  
@param array $max_dims Optional. Max image dimensions.  
@param bool $permalink Optional, default is false. Whether to include permalink to image.  '; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_the_author'; match='get_the_author'; definition='get_the_author($deprecated=\'\')'; description='Retrieve the author of the current post. 

'; file='/wp-includes/author-template.php, line: 23'; params='@param string $deprecated Deprecated.  '; return='string The author&apos;s display name. '; since='1.5 '; uses='$authordata The current author\'s DB object. 
apply_filters() Calls \'the_author\' hook on the author display name.'; type='function';}, 
	{name='get_the_author_ID'; match='get_the_author_ID'; definition='get_the_author_ID()'; description='Retrieve the ID of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1655'; return='int The author&apos;s ID. '; since='1.5 '; type='function';}, 
	{name='get_the_author_aim'; match='get_the_author_aim'; definition='get_the_author_aim()'; description='Retrieve the AIM address of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1583'; return='string The author&apos;s AIM address. '; since='1.5 '; type='function';}, 
	{name='get_the_author_description'; match='get_the_author_description'; definition='get_the_author_description()'; description='Retrieve the description of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1331'; return='string The author&apos;s description. '; since='1.5 '; type='function';}, 
	{name='get_the_author_email'; match='get_the_author_email'; definition='get_the_author_email()'; description='Retrieve the email of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1471'; return='string The author&apos;s username. '; since='1.5 '; type='function';}, 
	{name='get_the_author_firstname'; match='get_the_author_firstname'; definition='get_the_author_firstname()'; description='Retrieve the first name of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1387'; return='string The author&apos;s first name. '; since='1.5 '; type='function';}, 
	{name='get_the_author_icq'; match='get_the_author_icq'; definition='get_the_author_icq()'; description='Retrieve the ICQ number of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1499'; return='string The author&apos;s ICQ number. '; since='1.5 '; type='function';}, 
	{name='get_the_author_lastname'; match='get_the_author_lastname'; definition='get_the_author_lastname()'; description='Retrieve the last name of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1415'; return='string The author&apos;s last name. '; since='1.5 '; type='function';}, 
	{name='get_the_author_link'; match='get_the_author_link'; definition='get_the_author_link()'; description='Retrieve either author&apos;s link or author&apos;s name. 
If the author has a home page set, return an HTML link, otherwise just return the author&apos;s name. 
'; file='/wp-includes/author-template.php, line: 141'; uses='get_the_author_meta() 
get_the_author() '; type='function';}, 
	{name='get_the_author_login'; match='get_the_author_login'; definition='get_the_author_login()'; description='Retrieve the login name of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1359'; return='string The author&apos;s login name (username). '; since='1.5 '; type='function';}, 
	{name='get_the_author_meta'; match='get_the_author_meta'; definition='get_the_author_meta($field=\'\', $user_id=false)'; description='Retrieve the requested data of the author of the current post. <code>2.8.0 uses 62. string $field selects the field of the users record. int $user_id Optional. User ID. string The author\'s field from the current author\'s DB object. </code> '; file='/wp-includes/author-template.php, line: 99'; type='function';}, 
	{name='get_the_author_msn'; match='get_the_author_msn'; definition='get_the_author_msn()'; description='Retrieve the MSN address of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1555'; return='string The author&apos;s MSN address. '; since='1.5 '; type='function';}, 
	{name='get_the_author_nickname'; match='get_the_author_nickname'; definition='get_the_author_nickname()'; description='Retrieve the nickname of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1443'; return='string The author&apos;s nickname. '; since='1.5 '; type='function';}, 
	{name='get_the_author_posts'; match='get_the_author_posts'; definition='get_the_author_posts()'; description='Retrieve the number of posts by the author of the current post. 
'; file='/wp-includes/author-template.php, line: 171'; return='int The number of posts by the author. '; since='1.5 '; uses='$post The current post in the Loop\'s DB object. 
count_user_posts() '; type='function';}, 
	{name='get_the_author_url'; match='get_the_author_url'; definition='get_the_author_url()'; description='Retrieve the URL to the home page of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1627'; return='string The URL to the author&apos;s page. '; since='1.5 '; type='function';}, 
	{name='get_the_author_yim'; match='get_the_author_yim'; definition='get_the_author_yim()'; description='Retrieve the Yahoo! IM name of the author of the current post. 
@see get_the_author_meta() '; file='/wp-includes/deprecated.php, line: 1527'; return='string The author&apos;s Yahoo! IM name. '; since='1.5 '; type='function';}, 
	{name='get_the_category'; match='get_the_category'; definition='get_the_category($id=false)'; description='Retrieve post categories. 

'; file='/wp-includes/category-template.php, line: 74'; params='@param int $id Optional, default to current post ID. The post ID.  '; return='array '; since='0.71 '; uses='$post'; type='function';}, 
	{name='get_the_category_by_ID'; match='get_the_category_by_ID'; definition='get_the_category_by_ID($cat_ID)'; description='Retrieve category name based on category ID. 
'; file='/wp-includes/category-template.php, line: 136'; params='@param int $cat_ID Category ID.  '; return='string Category name. '; since='0.71 '; type='function';}, 
	{name='get_the_category_list'; match='get_the_category_list'; definition='get_the_category_list($separator=\'\', $parents=\'\', $post_id=false)'; description='Retrieve category list in either HTML list or custom format. 
'; file='/wp-includes/category-template.php, line: 154'; params='@param string $separator Optional, default is empty string. Separator for between the categories.  
@param string $parents Optional. How to display the parents.  
@param int $post_id Optional. Post ID to retrieve categories.  '; return='string '; since='1.5.1 '; type='function';}, 
	{name='get_the_category_rss'; match='get_the_category_rss'; definition='get_the_category_rss($type=null)'; description=''; file='/wp-includes/feed.php, line: 299'; type='function';}, 
	{name='get_the_content'; match='get_the_content'; definition='get_the_content($more_link_text=null, $stripteaser=0)'; description='Retrieve the post content. 
'; file='/wp-includes/post-template.php, line: 181'; params='@param string $more_link_text Optional. Content for when there is more text.  
@param string $stripteaser Optional. Teaser content before the more text.  '; return='string '; since='0.71 '; type='function';}, 
	{name='get_the_content_feed'; match='get_the_content_feed'; definition='get_the_content_feed($feed_type=null)'; description=''; file='/wp-includes/feed.php, line: 143'; type='function';}, 
	{name='get_the_date'; match='get_the_date'; definition='get_the_date($d=\'\')'; description='Retrieve the date the current $post was written. 
Unlike the_date() this function will always return the date. Modify output with &apos;get_the_date&apos; filter. 
'; file='/wp-includes/general-template.php, line: 1379'; params='@param string $d Optional. PHP date format defaults to the date_format option if not specified.  '; return='string|null Null if displaying, string if retrieving. '; since='3.0.0 '; type='function';}, 
	{name='get_the_excerpt'; match='get_the_excerpt'; definition='get_the_excerpt($deprecated=\'\')'; description='Retrieve the post excerpt. 
'; file='/wp-includes/post-template.php, line: 261'; params='@param mixed $deprecated Not used.  '; return='string '; since='0.71 '; type='function';}, 
	{name='get_the_generator'; match='get_the_generator'; definition='get_the_generator($type=\'\')'; description='Creates the generator XML or Comment for RSS, ATOM, etc. 
Returns the correct generator type for the requested output format. Allows for a plugin to filter generators on an individual basis using the &apos;get_the_generator_{$type}&apos; filter. 

'; file='/wp-includes/general-template.php, line: 2200'; params='@param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).  '; return='string The HTML content for the generator. '; since='2.5.0 '; uses='apply_filters() Calls \'get_the_generator_$type\' hook.'; type='function';}, 
	{name='get_the_guid'; match='get_the_guid'; definition='get_the_guid($id=0)'; description='Retrieve the Post Global Unique Identifier (guid). 
The guid will appear to be a link, but should not be used as an link to the post. The reason you should not use it as a link, is because of moving the blog across domains. 
'; file='/wp-includes/post-template.php, line: 151'; params='@param int $id Optional. Post ID.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_the_modified_author'; match='get_the_modified_author'; definition='get_the_modified_author()'; description='Retrieve the author who last edited the current post. 
'; file='/wp-includes/author-template.php, line: 71'; return='string The author&apos;s display name. '; since='2.8 '; uses='$post The current post\'s DB object. 
get_post_meta() Retrieves the ID of the author who last edited the current post. 
get_userdata() Retrieves the author\'s DB object. 
apply_filters() Calls \'the_modified_author\' hook on the author display name. '; type='function';}, 
	{name='get_the_modified_date'; match='get_the_modified_date'; definition='get_the_modified_date($d=\'\')'; description='Retrieve the date on which the post was last modified. 
'; file='/wp-includes/general-template.php, line: 1422'; params='@param string $d Optional. PHP date format. Defaults to the \"date_format\" option  '; return='string '; since='2.1.0 '; type='function';}, 
	{name='get_the_modified_time'; match='get_the_modified_time'; definition='get_the_modified_time($d=\'\')'; description='Retrieve the time at which the post was last modified. 
'; file='/wp-includes/general-template.php, line: 1502'; params='@param string $d Optional Either \'G\', \'U\', or php date format defaults to the value specified in the time_format option.  '; return='string '; since='2.0.0 '; type='function';}, 
	{name='get_the_password_form'; match='get_the_password_form'; definition='get_the_password_form()'; description='Retrieve protected post password form content. 

'; file='/wp-includes/post-template.php, line: 1213'; return='string HTML content for password form for password protected post. '; since='1.0.0 '; uses='apply_filters() Calls \'the_password_form\' filter on output.'; type='function';}, 
	{name='get_the_post_thumbnail'; match='get_the_post_thumbnail'; definition='get_the_post_thumbnail($post_id=null, $size=\'post-thumbnail\', $attr=\'\')'; description='Retrieve Post Thumbnail. 
'; file='/wp-includes/post-thumbnail-template.php, line: 89'; params='@param int $post_id Optional. Post ID.  
@param string $size Optional. Image size. Defaults to \'thumbnail\'.  
@param string array $attr Optional. Query string or array of attributes.  '; since='2.9.0 '; type='function';}, 
	{name='get_the_tag_list'; match='get_the_tag_list'; definition='get_the_tag_list($before=\'\', $sep=\'\', $after=\'\')'; description='Retrieve the tags for a post formatted as a string. 

'; file='/wp-includes/category-template.php, line: 1014'; params='@param string $before Optional. Before tags.  
@param string $sep Optional. Between tags.  
@param string $after Optional. After tags.  '; return='string '; since='2.3.0 '; uses='apply_filters() Calls \'the_tags\' filter on string list of tags.'; type='function';}, 
	{name='get_the_tags'; match='get_the_tags'; definition='get_the_tags($id=0)'; description='Retrieve the tags for a post. 

'; file='/wp-includes/category-template.php, line: 999'; params='@param int $id Post ID.  '; return='array '; since='2.3.0 '; uses='apply_filters() Calls \'get_the_tags\' filter on the list of post tags.'; type='function';}, 
	{name='get_the_taxonomies'; match='get_the_taxonomies'; definition='get_the_taxonomies($post=0, $args=array())'; description='Retrieve all taxonomies associated with a post. 
This function can be used within the loop. It will also return an array of the taxonomies with links to the taxonomy and name. 
'; file='/wp-includes/taxonomy.php, line: 2971'; params='@param int $post Optional. Post ID or will use Global Post ID (in loop).  
@param array $args Override the defaults.  '; return='array '; since='2.5.0 '; type='function';}, 
	{name='get_the_term_list'; match='get_the_term_list'; definition='get_the_term_list($id=0, $taxonomy, $before=\'\', $sep=\'\', $after=\'\')'; description='Retrieve a post&apos;s terms as a list with specified format. 
'; file='/wp-includes/category-template.php, line: 1111'; params='@param int $id Post ID.  
@param string $taxonomy Taxonomy name.  
@param string $before Optional. Before list.  
@param string $sep Optional. Separate items using this.  
@param string $after Optional. After list.  '; return='string '; since='2.5.0 '; type='function';}, 
	{name='get_the_terms'; match='get_the_terms'; definition='get_the_terms($id=0, $taxonomy)'; description='Retrieve the terms of the taxonomy that are attached to the post. 
'; file='/wp-includes/category-template.php, line: 1073'; params='@param int $id Post ID. Is not optional.  
@param string $taxonomy Taxonomy name.  '; return='array|bool False on failure. Array of term objects on success. '; since='2.5.0 '; type='function';}, 
	{name='get_the_time'; match='get_the_time'; definition='get_the_time($d=\'\', $post=null)'; description='Retrieve the time at which the post was written. 
'; file='/wp-includes/general-template.php, line: 1450'; params='@param string $d Optional Either \'G\', \'U\', or php date format defaults to the value specified in the time_format option.  
@param int object $post Optional post ID or object. Default is global $post object.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='get_the_title'; match='get_the_title'; definition='get_the_title($id=0)'; description='Retrieve post title. 
If the post is protected and the visitor is not an admin, then &quot;Protected&quot; will be displayed before the post title. If the post is private, then &quot;Private&quot; will be located before the post title. 
'; file='/wp-includes/post-template.php, line: 104'; params='@param int $id Optional. Post ID.  '; return='string '; since='0.71 '; type='function';}, 
	{name='get_the_title_rss'; match='get_the_title_rss'; definition='get_the_title_rss()'; description=''; file='/wp-includes/feed.php, line: 114'; type='function';}, 
	{name='get_theme'; match='get_theme'; definition='get_theme($theme)'; description='Retrieve theme data. 
'; file='/wp-includes/theme.php, line: 496'; params='@param string $theme Theme name.  '; return='array|null Null, if theme name does not exist. Theme data, if exists. '; since='1.5.0 '; type='function';}, 
	{name='get_theme_data'; match='get_theme_data'; definition='get_theme_data($theme_file)'; description='Retrieve theme data from parsed theme file. 
The description will have the tags filtered with the following HTML elements whitelisted. The &apos;a&apos; element with the href and title attributes. The abbr element with the title attribute. The acronym element with the title attribute allowed. The code , em , and strong elements also allowed. 
The style.css file must contain theme name, theme URI, and description. The data can also contain author URI, author, template (parent template), version, status, and finally tags. Some of these are not used by WordPress administration panels, but are used by theme directory web sites which list the theme. 
'; file='/wp-includes/theme.php, line: 183'; params='@param string $theme_file Theme file path.  '; return='array Theme data. '; since='1.5.0 '; type='function';}, 
	{name='get_theme_feature_list'; match='get_theme_feature_list'; definition='get_theme_feature_list()'; description='Retrieve list of WordPress theme features (aka theme tags) 
'; file='/wp-admin/includes/theme.php, line: 267'; return='array Array of features keyed by category with translations keyed by slug. '; since='3.1.0 '; type='function';}, 
	{name='get_theme_mod'; match='get_theme_mod'; definition='get_theme_mod($name, $default=false)'; description='Retrieve theme modification value for the current theme. 
If the modification name does not exist, then the $default will be passed through <code>sprintf()</code> PHP function with the first string the template directory URI and the second string the stylesheet directory URI. 

'; file='/wp-includes/theme.php, line: 1337'; params='@param string $name Theme modification name.  
@param bool string $default  '; return='string '; since='2.1.0 '; uses='apply_filters() Calls \'theme_mod_$name\' filter on the value.'; type='function';}, 
	{name='get_theme_mods'; match='get_theme_mods'; definition='get_theme_mods()'; description='Retrieve all theme modifications. 
'; file='/wp-includes/theme.php, line: 1309'; return='array Theme modifications. '; since='3.1.0 '; type='function';}, 
	{name='get_theme_root'; match='get_theme_root'; definition='get_theme_root($stylesheet_or_template=false)'; description='Retrieve path to themes directory. 
Does not have trailing slash. 

'; file='/wp-includes/theme.php, line: 661'; params='@param string $stylesheet_or_template The stylesheet or template name of the theme  '; return='string Theme path. '; since='1.5.0 '; uses='apply_filters() Calls \'theme_root\' filter on path.'; type='function';}, 
	{name='get_theme_root_uri'; match='get_theme_root_uri'; definition='get_theme_root_uri($stylesheet_or_template=false)'; description='Retrieve URI for themes directory. 
Does not have trailing slash. 
'; file='/wp-includes/theme.php, line: 684'; params='@param string $stylesheet_or_template The stylesheet or template name of the theme  '; return='string Themes URI. '; since='1.5.0 '; type='function';}, 
	{name='get_theme_roots'; match='get_theme_roots'; definition='get_theme_roots()'; description='Retrieve theme roots. 
'; file='/wp-includes/theme.php, line: 474'; return='array|string An arry of theme roots keyed by template/stylesheet or a single theme root if all themes have the same root. '; since='2.9.0 '; type='function';}, 
	{name='get_theme_support'; match='get_theme_support'; definition='get_theme_support($feature)'; description='Gets the theme support arguments passed when registering that support 
'; file='/wp-includes/theme.php, line: 1870'; params='@param string $feature the feature to check  '; return='array The array of extra arguments '; since='3.1 '; type='function';}, 
	{name='get_theme_updates'; match='get_theme_updates'; definition='get_theme_updates()'; description=''; file='/wp-admin/includes/update.php, line: 224'; type='function';}, 
	{name='get_themes'; match='get_themes'; definition='get_themes()'; description='Retrieve list of themes with theme data in theme directory. 
The theme is broken, if it doesn&apos;t have a parent theme and is missing either style.css and, or index.php. If the theme has a parent theme then it is broken, if it is missing style.css; index.php is optional. The broken theme list is saved in the <code>$wp_broken_themes</code> global, which is displayed on the theme list in the administration panels. 

'; file='/wp-includes/theme.php, line: 264'; return='array Theme list with theme data. '; since='1.5.0 '; type='function';}, 
	{name='get_to_ping'; match='get_to_ping'; definition='get_to_ping($post_id)'; description='Retrieve URLs that need to be pinged. 

'; file='/wp-includes/post.php, line: 3071'; params='@param int $post_id Post ID  '; return='array '; since='1.5.0 '; uses='$wpdb'; type='function';}, 
	{name='get_trackback_url'; match='get_trackback_url'; definition='get_trackback_url()'; description='Retrieve The current post&apos;s trackback URL. 
There is a check to see if permalink&apos;s have been enabled and if so, will retrieve the pretty path. If permalinks weren&apos;t enabled, the ID of the current post is used and appended to the correct page to go to. 

'; file='/wp-includes/comment-template.php, line: 706'; return='string The trackback URL after being filtered '; since='1.5.0 '; uses='apply_filters() Calls \'trackback_url\' on the resulting trackback URL'; type='function';}, 
	{name='get_transient'; match='get_transient'; definition='get_transient($transient)'; description=''; file='/wp-includes/functions.php, line: 740'; type='function';}, 
	{name='get_translations_for_domain'; match='get_translations_for_domain'; definition='get_translations_for_domain($domain)'; description='Returns the Translations instance for a domain. If there isn&apos;t one, returns empty Translations instance. 
'; file='/wp-includes/l10n.php, line: 483'; params='@param string $domain  '; return='object A Translation instance '; type='function';}, 
	{name='get_upload_iframe_src'; match='get_upload_iframe_src'; definition='get_upload_iframe_src($type)'; description=''; file='/wp-admin/includes/media.php, line: 408'; type='function';}, 
	{name='get_upload_space_available'; match='get_upload_space_available'; definition='get_upload_space_available()'; description='Determines if there is any upload space left in the current blog&apos;s quota. 
'; file='/wp-admin/includes/ms.php, line: 360'; return='int of upload space available in bytes '; type='function';}, 
	{name='get_uploaded_header_images'; match='get_uploaded_header_images'; definition='get_uploaded_header_images()'; description='Get the header images uploaded for the current theme. 
'; file='/wp-includes/theme.php, line: 1528'; return='array '; since='3.2.0 '; type='function';}, 
	{name='get_user_by'; match='get_user_by'; definition='get_user_by($field, $value)'; description='Retrieve user info by a given field 
'; file='/wp-includes/pluggable.php, line: 169'; params='@param string $field The field to retrieve the user with. id | slug | email | login  
@param int string $value A value for $field. A user ID, slug, email address, or login name.  '; return='bool|object False on failure, User DB row object '; since='2.8.0 '; type='function';}, 
	{name='get_user_by_email'; match='get_user_by_email'; definition='get_user_by_email($email)'; description='Retrieve user info by email. 
'; file='/wp-includes/pluggable.php, line: 228'; params='@param string $email User\'s email address  '; return='bool|object False on failure, User DB row object '; since='2.5 '; type='function';}, 
	{name='get_user_count'; match='get_user_count'; definition='get_user_count()'; description='The number of active users in your installation. 
The count is cached and updated twice daily. This is not a live count. 
'; file='/wp-includes/ms-functions.php, line: 154'; return='int '; since='MU 2.7 '; type='function';}, 
	{name='get_user_details'; match='get_user_details'; definition='get_user_details($username)'; description='@see get_user_by() '; file='/wp-includes/ms-deprecated.php, line: 104'; since='MU '; type='function';}, 
	{name='get_user_id_from_string'; match='get_user_id_from_string'; definition='get_user_id_from_string($string)'; description='Get a numeric user ID from either an email address or a login. 

'; file='/wp-includes/ms-functions.php, line: 1420'; params='@param string $string  '; return='int '; since='MU '; uses='is_email()'; type='function';}, 
	{name='get_user_meta'; match='get_user_meta'; definition='get_user_meta($user_id, $key, $single=false)'; description='Retrieve user meta field for a user. 

'; file='/wp-includes/user.php, line: 795'; params='@param int $user_id Post ID.  
@param string $key The meta key to retrieve.  
@param bool $single Whether to return a single value.  '; return='mixed Will be an array if $single is false. Will be value of meta data field if $single is true. '; since='3.0.0 '; uses='get_metadata() '; type='function';}, 
	{name='get_user_metavalues'; match='get_user_metavalues'; definition='get_user_metavalues($ids)'; description='Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users 
'; file='/wp-includes/user.php, line: 1070'; params='@param array $ids User ID numbers list.  '; return='array of arrays. The array is indexed by user_id, containing $metavalues object arrays. '; since='3.0.0 '; type='function';}, 
	{name='get_user_option'; match='get_user_option'; definition='get_user_option($option, $user=0, $deprecated=\'\')'; description='Retrieve user option that can be either per Site or per Network. 
If the user ID is not given, then the current user will be used instead. If the user ID is given, then the user data will be retrieved. The filter for the result, will also pass the original option name and finally the user data object as the third parameter. 
The option will first check for the per site name and then the per Network name. 

'; file='/wp-includes/user.php, line: 251'; params='@param string $option User option name.  
@param int $user Optional. User ID.  
@param bool $deprecated Use get_option() to check for an option in the options table.  '; return='mixed '; since='2.0.0 '; uses='$wpdb WordPress database object for queries. 
apply_filters() Calls \'get_user_option_$option\' hook with result, option parameter, and user data object.'; type='function';}, 
	{name='get_user_setting'; match='get_user_setting'; definition='get_user_setting($name, $default=false)'; description=''; file='/wp-includes/functions.php, line: 877'; type='function';}, 
	{name='get_user_to_edit'; match='get_user_to_edit'; definition='get_user_to_edit($user_id)'; description='Retrieve user data and filter it. 
'; file='/wp-admin/includes/user.php, line: 226'; params='@param int $user_id User ID.  '; return='object <code>WP_User</code> object with user data. '; since='2.0.5 '; type='function';}, 
	{name='get_userdata'; match='get_userdata'; definition='get_userdata($user_id)'; description='Retrieve user info by user ID. 
'; file='/wp-includes/pluggable.php, line: 103'; params='@param int $user_id User ID  '; return='bool|object False on failure, User DB row object '; since='0.71 '; type='function';}, 
	{name='get_userdatabylogin'; match='get_userdatabylogin'; definition='get_userdatabylogin($user_login)'; description='Retrieve user info by login name. 
'; file='/wp-includes/pluggable.php, line: 214'; params='@param string $user_login User\'s username  '; return='bool|object False on failure, User DB row object '; since='0.71 '; type='function';}, 
	{name='get_usermeta'; match='get_usermeta'; definition='get_usermeta($user_id, $meta_key=\'\')'; description='Retrieve user metadata. 
If $user_id is not a number, then the function will fail over with a &apos;false&apos; boolean return value. Other returned values depend on whether there is only one item to be returned, which be that single item type. If there is more than one metadata value, then it will be list of metadata values. 
@see get_user_meta() '; file='/wp-includes/deprecated.php, line: 2325'; params='@param int $user_id User ID  
@param string $meta_key Optional. Metadata key.  '; return='mixed '; since='2.0.0 '; type='function';}, 
	{name='get_usernumposts'; match='get_usernumposts'; definition='get_usernumposts($userid)'; description='Number of posts user has written. 
@see count_user_posts() '; file='/wp-includes/deprecated.php, line: 2486'; since='0.71 '; type='function';}, 
	{name='get_users'; match='get_users'; definition='get_users($args=array())'; description='Retrieve list of users matching criteria. 

'; file='/wp-includes/user.php, line: 635'; params='@param array $args Optional.  '; return='array List of users. '; since='3.1.0 '; uses='$wpdb 
 See for default arguments and information.'; type='function';}, 
	{name='get_users_drafts'; match='get_users_drafts'; definition='get_users_drafts($user_id)'; description='Retrieve the user&apos;s drafts. 
'; file='/wp-admin/includes/user.php, line: 251'; params='@param int $user_id User ID.  '; return='array '; since='2.0.0 '; type='function';}, 
	{name='get_users_of_blog'; match='get_users_of_blog'; definition='get_users_of_blog($id=\'\')'; description='Get users for the blog. 
For setups that use the multi-blog feature. Can be used outside of the multi-blog feature. 

'; file='/wp-includes/deprecated.php, line: 2432'; params='@param int $id Blog ID.  '; return='array List of users that are part of that Blog ID '; since='2.2.0 '; uses='$wpdb WordPress database object for queries 
$blog_id The Blog id of the blog for those that use more than one blog'; type='function';}, 
	{name='get_weekstartend'; match='get_weekstartend'; definition='get_weekstartend($mysqlstring, $start_of_week=\'\')'; description='Get the week start and end from the datetime or date string from mysql. 
'; file='/wp-includes/functions.php, line: 205'; params='@param string $mysqlstring Date or datetime field type from mysql.  
@param int $start_of_week Optional. Start of the week as an integer.  '; return='array Keys are &apos;start&apos; and &apos;end&apos;. '; since='0.71 '; type='function';}, 
	{name='get_wp_title_rss'; match='get_wp_title_rss'; definition='get_wp_title_rss($sep=\'&#187;\')'; description=''; file='/wp-includes/feed.php, line: 81'; type='function';}, 
	{name='get_year_link'; match='get_year_link'; definition='get_year_link($year)'; description='Retrieve the permalink for the year archives. 
'; file='/wp-includes/link-template.php, line: 341'; params='@param int bool $year False for current year or year for permalink.  '; return='string '; since='1.5.0 '; type='function';}, 
	{name='global_terms'; match='global_terms'; definition='global_terms($term_id, $deprecated=\'\')'; description='Maintains a canonical list of terms by syncing terms created for each blog with the global terms table. 
@see term_id_filter '; file='/wp-includes/ms-functions.php, line: 1667'; params='@param int $term_id An ID for a term on the current blog.  '; return='int An ID from the global terms table mapped from $term_id. '; since='3.0.0 '; type='function';}, 
	{name='global_terms_enabled'; match='global_terms_enabled'; definition='global_terms_enabled()'; description=''; file='/wp-includes/functions.php, line: 4049'; type='function';}, 
	{name='got_mod_rewrite'; match='got_mod_rewrite'; definition='got_mod_rewrite()'; description='{ '; file='/wp-admin/includes/misc.php, line: 16'; type='function';}, 
	{name='grant_super_admin'; match='grant_super_admin'; definition='grant_super_admin($user_id)'; description='Grants super admin privileges. 
'; file='/wp-admin/includes/ms.php, line: 690'; params='@param int $user_id  '; since='3.0.0 '; type='function';}, 
	{name='gzip_compression'; match='gzip_compression'; definition='gzip_compression()'; description='Unused function. 
'; file='/wp-includes/deprecated.php, line: 1244'; type='function';}, 
	{name='has_action'; match='has_action'; definition='has_action($tag, $function_to_check=false)'; description=''; file='/wp-includes/plugin.php, line: 505'; type='function';}, 
	{name='has_category'; match='has_category'; definition='has_category($category=\'\', $post=null)'; description='Check if the current post has any of given category. 
'; file='/wp-includes/category-template.php, line: 1163'; params='@param string int array $tag Optional. The category name/term_id/slug or array of them to check for.  
@param int object $post Optional. Post to check instead of the current post.  '; return='bool True if the current post has any of the given categories (or any category, if no category specified). '; since='3.1.0 '; type='function';}, 
	{name='has_excerpt'; match='has_excerpt'; definition='has_excerpt($id=0)'; description='Whether post has excerpt. 
'; file='/wp-includes/post-template.php, line: 283'; params='@param int $id Optional. Post ID.  '; return='bool '; since='2.3.0 '; type='function';}, 
	{name='has_filter'; match='has_filter'; definition='has_filter($tag, $function_to_check=false)'; description=''; file='/wp-includes/plugin.php, line: 86'; type='function';}, 
	{name='has_meta'; match='has_meta'; definition='has_meta($postid)'; description='{ '; file='/wp-admin/includes/post.php, line: 768'; type='function';}, 
	{name='has_nav_menu'; match='has_nav_menu'; definition='has_nav_menu($location)'; description='Whether a registered nav menu location has a menu assigned to it. 
'; file='/wp-includes/nav-menu.php, line: 140'; params='@param string $location Menu location identifier.  '; return='bool Whether location has a menu. '; since='3.0.0 '; type='function';}, 
	{name='has_post_format'; match='has_post_format'; definition='has_post_format($format, $post=null)'; description='Check if a post has a particular format 

'; file='/wp-includes/post.php, line: 521'; params='@param string $format The format to check for  
@param object id $post The post to check. If not supplied, defaults to the current post if used in the loop.  '; return='bool True if the post has the format, false otherwise. '; since='3.1.0 '; uses='has_term()'; type='function';}, 
	{name='has_post_thumbnail'; match='has_post_thumbnail'; definition='has_post_thumbnail($post_id=null)'; description='Check if post has an image attached. 
'; file='/wp-includes/post-thumbnail-template.php, line: 20'; params='@param int $post_id Optional. Post ID.  '; return='bool Whether post has an image attached. '; since='2.9.0 '; type='function';}, 
	{name='has_tag'; match='has_tag'; definition='has_tag($tag=\'\', $post=null)'; description='Check if the current post has any of given tags. 
The given tags are checked against the post&apos;s tags&apos; term_ids, names and slugs. Tags given as integers will only be checked against the post&apos;s tags&apos; term_ids. If no tags are given, determines if post has any tags. 
Prior to v2.7 of WordPress, tags given as integers would also be checked against the post&apos;s tags&apos; names and slugs (in addition to term_ids) Prior to v2.7, this function could only be used in the WordPress Loop. As of 2.7, the function can be used anywhere if it is provided a post ID or post object. 
'; file='/wp-includes/category-template.php, line: 1184'; params='@param string int array $tag Optional. The tag name/term_id/slug or array of them to check for.  
@param int object $post Optional. Post to check instead of the current post. (since 2.7.0)  '; return='bool True if the current post has any of the given tags (or any tag, if no tag specified). '; since='2.6.0 '; type='function';}, 
	{name='has_term'; match='has_term'; definition='has_term($term=\'\', $taxonomy=\'\', $post=null)'; description='Check if the current post has any of given terms. 
The given terms are checked against the post&apos;s terms&apos; term_ids, names and slugs. Terms given as integers will only be checked against the post&apos;s terms&apos; term_ids. If no terms are given, determines if post has any terms. 
'; file='/wp-includes/category-template.php, line: 1202'; params='@param string int array $term Optional. The term name/term_id/slug or array of them to check for.  
@param string $taxonomy Taxonomy name  
@param int object $post Optional. Post to check instead of the current post.  '; return='bool True if the current post has any of the given tags (or any tag, if no tag specified). '; since='3.1.0 '; type='function';}, 
	{name='have_comments'; match='have_comments'; definition='have_comments()'; description='Whether there are comments to loop over. 
@see <code>WP_Query::have_comments()</code> 
'; file='/wp-includes/query.php, line: 792'; return='bool '; since='2.2.0 '; uses='$wp_query'; type='function';}, 
	{name='have_posts'; match='have_posts'; definition='have_posts()'; description='Whether current WordPress query has results to loop over. 
@see <code>WP_Query::have_posts()</code> 
'; file='/wp-includes/query.php, line: 731'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='header_image'; match='header_image'; definition='header_image()'; description='Display header image path. 
'; file='/wp-includes/theme.php, line: 1517'; since='2.1.0 '; type='function';}, 
	{name='header_textcolor'; match='header_textcolor'; definition='header_textcolor()'; description='Display text color for custom header. 
'; file='/wp-includes/theme.php, line: 1418'; since='2.1.0 '; type='function';}, 
	{name='home_url'; match='home_url'; definition='home_url()'; description=''; file='/wp-admin/load-scripts.php, line: 83'; type='function';}, 
	{name='html_type_rss'; match='html_type_rss'; definition='html_type_rss()'; description=''; file='/wp-includes/feed.php, line: 356'; type='function';}, 
	{name='htmlentities2'; match='htmlentities2'; definition='htmlentities2($myHTML)'; description='Convert entities, while preserving already-encoded entities. 
<code>Borrowed from the PHP Manual user notes. 1.2.2 string $myHTML The text to be converted. string Converted text. </code> '; file='/wp-includes/formatting.php, line: 2298'; type='function';}, 
	{name='human_time_diff'; match='human_time_diff'; definition='human_time_diff($from, $to=\'\')'; description='Determines the difference between two timestamps. 
The difference is returned in a human readable format such as &quot;1 hour&quot;, &quot;5 mins&quot;, &quot;2 days&quot;. 
'; file='/wp-includes/formatting.php, line: 1803'; params='@param int $from Unix timestamp from which the difference begins.  
@param int $to Optional. Unix timestamp to end the time difference. Default becomes time() if not set.  '; return='string Human readable time difference. '; since='1.5.0 '; type='function';}, 
	{name='iframe_footer'; match='iframe_footer'; definition='iframe_footer()'; description='Generic Iframe footer for use with Thickbox 
'; file='/wp-admin/includes/template.php, line: 1612'; since='2.7.0 '; type='function';}, 
	{name='iframe_header'; match='iframe_header'; definition='iframe_header($title=\'\', $limit_styles=false)'; description='Generic Iframe header for use with Thickbox 
'; file='/wp-admin/includes/template.php, line: 1548'; params='@param string $title Title of the Iframe page.  
@param bool $limit_styles Limit styles to colour-related styles only (unless others are enqueued).  '; since='2.7.0 '; type='function';}, 
	{name='iis7_add_rewrite_rule'; match='iis7_add_rewrite_rule'; definition='iis7_add_rewrite_rule($filename, $rewrite_rule)'; description='Add WordPress rewrite rule to the IIS 7 configuration file. 
'; file='/wp-admin/includes/misc.php, line: 443'; params='@param string $filename The file path to the configuration file  
@param string $rewrite_rule The XML fragment with URL Rewrite rule  '; return='bool '; since='2.8.0 '; type='function';}, 
	{name='iis7_delete_rewrite_rule'; match='iis7_delete_rewrite_rule'; definition='iis7_delete_rewrite_rule($filename)'; description='Delete WordPress rewrite rule from web.config file if it exists there 
'; file='/wp-admin/includes/misc.php, line: 409'; params='@param string $filename Name of the configuration file  '; return='bool '; since='2.8.0 '; type='function';}, 
	{name='iis7_rewrite_rule_exists'; match='iis7_rewrite_rule_exists'; definition='iis7_rewrite_rule_exists($filename)'; description='Check if rewrite rule for WordPress already exists in the IIS 7 configuration file 
'; file='/wp-admin/includes/misc.php, line: 384'; params='@param string $filename The file path to the configuration file  '; return='bool '; since='2.8.0 '; type='function';}, 
	{name='iis7_save_url_rewrite_rules'; match='iis7_save_url_rewrite_rules'; definition='iis7_save_url_rewrite_rules()'; description='Updates the IIS web.config file with the current rules if it is writable. If the permalinks do not require rewrite rules then the rules are deleted from the web.config file. 
'; file='/wp-admin/includes/misc.php, line: 151'; return='bool True if web.config was updated successfully '; since='2.8.0 '; type='function';}, 
	{name='iis7_supports_permalinks'; match='iis7_supports_permalinks'; definition='iis7_supports_permalinks()'; description='Check if IIS 7 supports pretty permalinks 
'; file='/wp-includes/functions.php, line: 3554'; return='bool '; since='2.8.0 '; type='function';}, 
	{name='image_add_caption'; match='image_add_caption'; definition='image_add_caption($html, $id, $caption, $title, $align, $url, $size, $alt=\'\')'; description='{ '; file='/wp-admin/includes/media.php, line: 131'; type='function';}, 
	{name='image_align_input_fields'; match='image_align_input_fields'; definition='image_align_input_fields($post, $checked=\'\')'; description='Retrieve HTML for the image alignment radio buttons with the specified one checked. 
'; file='/wp-admin/includes/media.php, line: 845'; params='@param unknown_type $post  
@param unknown_type $checked  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='image_attachment_fields_to_edit'; match='image_attachment_fields_to_edit'; definition='image_attachment_fields_to_edit($form_fields, $post)'; description='{ '; file='/wp-admin/includes/media.php, line: 959'; type='function';}, 
	{name='image_attachment_fields_to_save'; match='image_attachment_fields_to_save'; definition='image_attachment_fields_to_save($post, $attachment)'; description='{ '; file='/wp-admin/includes/media.php, line: 1026'; type='function';}, 
	{name='image_constrain_size_for_editor'; match='image_constrain_size_for_editor'; definition='image_constrain_size_for_editor($width, $height, $size=\'medium\')'; description='Scale down the default size of an image. 
This is so that the image is a better fit for the editor and theme. 
The $size parameter accepts either an array or a string. The supported string values are &apos;thumb&apos; or &apos;thumbnail&apos; for the given thumbnail size or defaults at 128 width and 96 height in pixels. Also supported for the string value is &apos;medium&apos; and &apos;full&apos;. The &apos;full&apos; isn&apos;t actually supported, but any value other than the supported will result in the content_width size or 500 if that is not set. 
Finally, there is a filter named, &apos;editor_max_image_size&apos; that will be called on the calculated array for width and height, respectively. The second parameter will be the value that was in the $size parameter. The returned type for the hook is an array with the width as the first element and the height as the second element. 

'; file='/wp-includes/media.php, line: 34'; params='@param int $width Width of the image  
@param int $height Height of the image  
@param string array $size Size of what the result image should be.  '; return='array Width and height of what the result image should resize to. '; since='2.5.0 '; uses='wp_constrain_dimensions() This function passes the widths and the heights.'; type='function';}, 
	{name='image_downsize'; match='image_downsize'; definition='image_downsize($id, $size=\'medium\')'; description='Scale an image to fit a particular size (such as &apos;thumb&apos; or &apos;medium&apos;). 
Array with image url, width, height, and whether is intermediate size, in that order is returned on success is returned. $is_intermediate is true if $url is a resized image, false if it is the original. 
The URL might be the original image, or it might be a resized version. This function won&apos;t create a new resized copy, it will just return an already resized one if it exists. 
A plugin may use the &apos;image_downsize&apos; filter to hook into and offer image resizing services for images. The hook must return an array with the same elements that are returned in the function. The first element being the URL to the new image that was resized. 

'; file='/wp-includes/media.php, line: 131'; params='@param int $id Attachment ID for image.  
@param array string $size Optional, default is \'medium\'. Size of image, either array or string.  '; return='bool|array False on failure, array on success. '; since='2.5.0 '; uses='apply_filters() Calls \'image_downsize\' on $id and $size to provide resize services.'; type='function';}, 
	{name='image_get_intermediate_size'; match='image_get_intermediate_size'; definition='image_get_intermediate_size($post_id, $size=\'thumbnail\')'; description='Retrieve the image&apos;s intermediate size (resized) path, width, and height. 
The $size parameter can be an array with the width and height respectively. If the size matches the &apos;sizes&apos; metadata array for width and height, then it will be used. If there is no direct match, then the nearest image size larger than the specified size will be used. If nothing is found, then the function will break out and return false. 
The metadata &apos;sizes&apos; is used for compatible sizes that can be used for the parameter $size value. 
The url path will be given, when the $size parameter is a string. 
If you are passing an array for the $size, you should consider using add_image_size() so that a cropped version is generated. It&apos;s much more efficient than having to find the closest-sized image and then having the browser scale down the image. 
@see add_image_size() '; file='/wp-includes/media.php, line: 525'; params='@param int $post_id Attachment ID for image.  
@param array string $size Optional, default is \'thumbnail\'. Size of image, either array or string.  '; return='bool|array False on failure or array of file path, width, and height on success. '; since='2.5.0 '; type='function';}, 
	{name='image_hwstring'; match='image_hwstring'; definition='image_hwstring($width, $height)'; description='Retrieve width and height attributes using given width and height values. 
Both attributes are required in the sense that both parameters must have a value, but are optional in that if you set them to false or null, then they will not be added to the returned string. 
You can set the value using a string, but it will only take numeric values. If you wish to put &apos;px&apos; after the numbers, then it will be stripped out of the return. 
'; file='/wp-includes/media.php, line: 98'; params='@param int string $width Optional. Width attribute value.  
@param int string $height Optional. Height attribute value.  '; return='string HTML attributes for width and, or height. '; since='2.5.0 '; type='function';}, 
	{name='image_link_input_fields'; match='image_link_input_fields'; definition='image_link_input_fields($post, $url_type=\'\')'; description='Retrieve HTML for the Link URL buttons with the default link type as specified. 
'; file='/wp-admin/includes/media.php, line: 928'; params='@param unknown_type $post  
@param unknown_type $url_type  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='image_make_intermediate_size'; match='image_make_intermediate_size'; definition='image_make_intermediate_size($file, $width, $height, $crop=false)'; description='Resize an image to make a thumbnail or intermediate size. 
The returned array has the file size, the image width, and image height. The filter &apos;image_make_intermediate_size&apos; can be used to hook in and change the values of the returned array. The only parameter is the resized file path. 
'; file='/wp-includes/media.php, line: 484'; params='@param string $file File path.  
@param int $width Image width.  
@param int $height Image height.  
@param bool $crop Optional, default is false. Whether to crop image to specified height and width or resize.  '; return='bool|array False, if no image was created. Metadata array on success. '; since='2.5.0 '; type='function';}, 
	{name='image_media_send_to_editor'; match='image_media_send_to_editor'; definition='image_media_send_to_editor($html, $attachment_id, $attachment)'; description='{ '; file='/wp-admin/includes/media.php, line: 1049'; type='function';}, 
	{name='image_resize'; match='image_resize'; definition='image_resize($file, $max_w, $max_h, $crop=false, $suffix=null, $dest_path=null, $jpeg_quality=90)'; description='Scale down an image to fit a particular size and save a new copy of the image. 
The PNG transparency will be preserved using the function, as well as the image type. If the file going in is PNG, then the resized image is going to be PNG. The only supported image types are PNG, GIF, and JPEG. 
Some functionality requires API to exist, so some PHP version may lose out support. This is not the fault of WordPress (where functionality is downgraded, not actual defects), but of your PHP version. 
'; file='/wp-includes/media.php, line: 406'; params='@param string $file Image file path.  
@param int $max_w Maximum width to resize to.  
@param int $max_h Maximum height to resize to.  
@param bool $crop Optional. Whether to crop image or resize.  
@param string $suffix Optional. File Suffix.  
@param string $dest_path Optional. New image file path.  
@param int $jpeg_quality Optional, default is 90. Image quality percentage.  '; return='mixed <code>WP_Error</code> on failure. String with new destination path. '; since='2.5.0 '; type='function';}, 
	{name='image_resize_dimensions'; match='image_resize_dimensions'; definition='image_resize_dimensions($orig_w, $orig_h, $dest_w, $dest_h, $crop=false)'; description='Retrieve calculated resized dimensions for use in imagecopyresampled(). 
Calculate dimensions and coordinates for a resized image that fits within a specified width and height. If $crop is true, the largest matching central portion of the image will be cropped out and resized to the required size. 
'; file='/wp-includes/media.php, line: 334'; params='@param int $orig_w Original width.  
@param int $orig_h Original height.  
@param int $dest_w New width.  
@param int $dest_h New height.  
@param bool $crop Optional, default is false. Whether to crop image or resize.  '; return='bool|array False, on failure. Returned array matches parameters for imagecopyresampled() PHP function. '; since='2.5.0 '; type='function';}, 
	{name='image_size_input_fields'; match='image_size_input_fields'; definition='image_size_input_fields($post, $check=\'\')'; description='Retrieve HTML for the size radio buttons with the specified one checked. 
'; file='/wp-admin/includes/media.php, line: 873'; params='@param unknown_type $post  
@param unknown_type $check  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='img_caption_shortcode'; match='img_caption_shortcode'; definition='img_caption_shortcode($attr, $content=null)'; description='The Caption shortcode. 
Allows a plugin to replace the content that would otherwise be returned. The filter is &apos;img_caption_shortcode&apos; and passes an empty string, the attr parameter and the content parameter values. 
The supported attributes for the shortcode are &apos;id&apos;, &apos;align&apos;, &apos;width&apos;, and &apos;caption&apos;. 
'; file='/wp-includes/media.php, line: 722'; params='@param array $attr Attributes attributed to the shortcode.  
@param string $content Optional. Shortcode content.  '; return='string '; since='2.6.0 '; type='function';}, 
	{name='in_category'; match='in_category'; definition='in_category($category, $post=null)'; description='Check if the current post in within any of the given categories. 
The given categories are checked against the post&apos;s categories&apos; term_ids, names and slugs. Categories given as integers will only be checked against the post&apos;s categories&apos; term_ids. 
Prior to v2.5 of WordPress, category names were not supported. Prior to v2.7, category slugs were not supported. Prior to v2.7, only one category could be compared: in_category( $single_category ). Prior to v2.7, this function could only be used in the WordPress Loop. As of 2.7, the function can be used anywhere if it is provided a post ID or post object. 
'; file='/wp-includes/category-template.php, line: 234'; params='@param int string array $category Category ID, name or slug, or array of said.  
@param int object $_post Optional. Post to check instead of the current post. (since 2.7.0)  '; return='bool True if the current post is in any of the given categories. '; since='1.2.0 '; type='function';}, 
	{name='in_the_loop'; match='in_the_loop'; definition='in_the_loop()'; description='Whether the caller is in the Loop. 

'; file='/wp-includes/query.php, line: 745'; return='bool True if caller is within loop, false if loop hasn&apos;t started or ended. '; since='2.0.0 '; uses='$wp_query'; type='function';}, 
	{name='includes_url'; match='includes_url'; definition='includes_url()'; description=''; file='/wp-admin/load-scripts.php, line: 88'; type='function';}, 
	{name='index_rel_link'; match='index_rel_link'; definition='index_rel_link()'; description='Display relational link for the site index. 
'; file='/wp-includes/link-template.php, line: 1361'; since='2.8.0 '; type='function';}, 
	{name='info'; match='info'; definition='info($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 70'; type='function';}, 
	{name='insert_blog'; match='insert_blog'; definition='insert_blog($domain, $path, $site_id)'; description='Store basic site info in the blogs table. 
This function creates a row in the wp_blogs table and returns the new blog&apos;s ID. It is the first step in creating a new blog. 
'; file='/wp-includes/ms-functions.php, line: 1191'; params='@param string $domain The domain of the new site.  
@param string $path The path of the new site.  
@param int $site_id Unless you\'re running a multi-network install, be sure to set this value to 1.  '; return='int The ID of the new row '; since='MU '; type='function';}, 
	{name='insert_with_markers'; match='insert_with_markers'; definition='insert_with_markers($filename, $marker, $insertion)'; description='{ '; file='/wp-admin/includes/misc.php, line: 67'; type='function';}, 
	{name='install_blog'; match='install_blog'; definition='install_blog($blog_id, $blog_title=\'\')'; description='Install an empty blog. 
Creates the new blog tables and options. If calling this function directly, be sure to use switch_to_blog() first, so that $wpdb points to the new blog. 

'; file='/wp-includes/ms-functions.php, line: 1219'; params='@param int $blog_id The value returned by insert_blog().  
@param string $blog_title The title of the new site.  '; since='MU '; uses='make_db_current_silent() 
populate_roles()'; type='function';}, 
	{name='install_blog_defaults'; match='install_blog_defaults'; definition='install_blog_defaults($blog_id, $user_id)'; description='Set blog defaults. 
This function creates a row in the wp_blogs table. 

'; file='/wp-includes/ms-functions.php, line: 1270'; params='@param int $blog_id Ignored in this function.  
@param int $user_id  '; since='MU '; uses='wp_install_defaults()'; type='function';}, 
	{name='is_404'; match='is_404'; definition='is_404()'; description='Is the query a 404 (returns no results)? 
@see <code>WP_Query::is_404()</code> 
'; file='/wp-includes/query.php, line: 707'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_active_sidebar'; match='is_active_sidebar'; definition='is_active_sidebar($index)'; description='Whether a sidebar is in use. 
'; file='/wp-includes/widgets.php, line: 973'; params='@param mixed $index Sidebar name, id or number to check.  '; return='bool true if the sidebar is in use, false otherwise. '; since='2.8 '; type='function';}, 
	{name='is_active_widget'; match='is_active_widget'; definition='is_active_widget($callback=false, $widget_id=false, $id_base=false, $skip_inactive=true)'; description='Whether widget is displayed on the front-end. 
Either $callback or $id_base can be used $id_base is the first argument when extending <code>WP_Widget</code> class Without the optional $widget_id parameter, returns the ID of the first sidebar in which the first instance of the widget with the given callback or $id_base is found. With the $widget_id parameter, returns the ID of the sidebar where the widget with that callback/$id_base AND that ID is found. 
NOTE: $widget_id and $id_base are the same for single widgets. To be effective this function has to run after widgets have initialized, at action &apos;init&apos; or later. 
'; file='/wp-includes/widgets.php, line: 922'; params='@param string $callback Optional, Widget callback to check.  
@param int $widget_id Optional, but needed for checking. Widget ID.  
@param string $id_base Optional, the base ID of a widget created by extending  
@param bool $skip_inactive Optional, whether to check in \'wp_inactive_widgets\'.  '; return='mixed false if widget is not active or id of sidebar in which the widget is active. '; since='2.2.0 '; type='function';}, 
	{name='is_admin'; match='is_admin'; definition='is_admin()'; description='Whether the current request is for a network or blog admin page 
Does not inform on whether the user is an admin! Use capability checks to tell if the user should be accessing a section or not. 
'; file='/wp-includes/load.php, line: 583'; return='bool True if inside WordPress administration pages. '; since='1.5.1 '; type='function';}, 
	{name='is_admin_bar_showing'; match='is_admin_bar_showing'; definition='is_admin_bar_showing()'; description='Determine whether the admin bar should be showing. 
'; file='/wp-includes/admin-bar.php, line: 411'; return='bool Whether the admin bar should be showing. '; since='3.1.0 '; type='function';}, 
	{name='is_archive'; match='is_archive'; definition='is_archive()'; description='Is the query for an archive page? 
Month, Year, Category, Author, Post Type archive... 
@see <code>WP_Query::is_archive()</code> 
'; file='/wp-includes/query.php, line: 142'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_archived'; match='is_archived'; definition='is_archived($id)'; description='Check if a particular blog is archived. 
'; file='/wp-includes/ms-blogs.php, line: 590'; params='@param int $id The blog id  '; return='string Whether the blog is archived or not '; since='MU '; type='function';}, 
	{name='is_attachment'; match='is_attachment'; definition='is_attachment()'; description='Is the query for an attachment page? 
@see <code>WP_Query::is_attachment()</code> 
'; file='/wp-includes/query.php, line: 183'; return='bool '; since='2.0.0 '; uses='$wp_query'; type='function';}, 
	{name='is_author'; match='is_author'; definition='is_author($author=\'\')'; description='Is the query for an author archive page? 
If the $author parameter is specified, this function will additionally check if the query is for one of the authors specified. 
@see <code>WP_Query::is_author()</code> 
'; file='/wp-includes/query.php, line: 207'; params='@param mixed $author Optional. User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_blog_admin'; match='is_blog_admin'; definition='is_blog_admin()'; description='Whether the current request is for a blog admin screen /wp-admin/ 
Does not inform on whether the user is a blog admin! Use capability checks to tell if the user should be accessing a section or not. 
'; file='/wp-includes/load.php, line: 599'; return='bool True if inside WordPress network administration pages. '; since='3.1.0 '; type='function';}, 
	{name='is_blog_installed'; match='is_blog_installed'; definition='is_blog_installed()'; description='Test whether blog is already installed. 
The cache will be checked first. If you have a cache plugin, which saves the cache values, then this will work. If you use the default WordPress cache, and the database goes away, then you might have problems. 
Checks for the option siteurl for whether WordPress is installed. 

'; file='/wp-includes/functions.php, line: 1874'; return='bool Whether blog is already installed. '; since='2.1.0 '; uses='$wpdb'; type='function';}, 
	{name='is_blog_user'; match='is_blog_user'; definition='is_blog_user($blog_id=0)'; description='Checks if the current user belong to a given blog. 
'; file='/wp-includes/user.php, line: 728'; params='@param int $blog_id Blog ID  '; return='bool True if the current users belong to $blog_id, false if not. '; since='3.0.0 '; type='function';}, 
	{name='is_category'; match='is_category'; definition='is_category($category=\'\')'; description='Is the query for a category archive page? 
If the $category parameter is specified, this function will additionally check if the query is for one of the categories specified. 
@see <code>WP_Query::is_category()</code> 
'; file='/wp-includes/query.php, line: 231'; params='@param mixed $category Optional. Category ID, name, slug, or array of Category IDs, names, and slugs.  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_child_theme'; match='is_child_theme'; definition='is_child_theme()'; description='Whether a child theme is in use. 
'; file='/wp-includes/theme.php, line: 16'; return='bool true if a child theme is in use, false otherwise. '; since='3.0.0 '; type='function';}, 
	{name='is_comment_feed'; match='is_comment_feed'; definition='is_comment_feed()'; description='Is the query for a comments feed? 
@see WP_Query::is_comments_feed() 
'; file='/wp-includes/query.php, line: 385'; return='bool '; since='3.0.0 '; uses='$wp_query'; type='function';}, 
	{name='is_comments_popup'; match='is_comments_popup'; definition='is_comments_popup()'; description='Whether the current URL is within the comments popup window. 
@see <code>WP_Query::is_comments_popup()</code> 
'; file='/wp-includes/query.php, line: 304'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_date'; match='is_date'; definition='is_date()'; description='Is the query for a date archive? 
@see <code>WP_Query::is_date()</code> 
'; file='/wp-includes/query.php, line: 324'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_day'; match='is_day'; definition='is_day()'; description='Is the query for a day archive? 
@see <code>WP_Query::is_day()</code> 
'; file='/wp-includes/query.php, line: 344'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_dynamic_sidebar'; match='is_dynamic_sidebar'; definition='is_dynamic_sidebar()'; description='Whether the dynamic sidebar is enabled and used by theme. 
'; file='/wp-includes/widgets.php, line: 952'; return='bool True, if using widgets. False, if not using widgets. '; since='2.2.0 '; type='function';}, 
	{name='is_email'; match='is_email'; definition='is_email($email, $deprecated=false)'; description='Verifies that an email is valid. 
Does not grok i18n domains. Not RFC compliant. 
'; file='/wp-includes/formatting.php, line: 1496'; params='@param string $email Email address to verify.  
@param boolean $deprecated Deprecated.  '; return='string|bool Either false or the valid email address. '; since='0.71 '; type='function';}, 
	{name='is_email_address_unsafe'; match='is_email_address_unsafe'; definition='is_email_address_unsafe($user_email)'; description='Checks an email address against a list of banned domains. 
This function checks against the Banned Email Domains list at wp-admin/network/settings.php. The check is only run on self-registrations; user creation at wp-admin/network/users.php bypasses this check. 
'; file='/wp-includes/ms-functions.php, line: 469'; params='@param string $user_email The email provided by the user at registration.  '; return='bool Returns true when the email address is banned. '; since='MU '; type='function';}, 
	{name='is_feed'; match='is_feed'; definition='is_feed($feeds=\'\')'; description='Is the query for a feed? 
@see <code>WP_Query::is_feed()</code> 
'; file='/wp-includes/query.php, line: 365'; params='@param string array $feeds Optional feed types to check.  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_front_page'; match='is_front_page'; definition='is_front_page()'; description='Is the query for the front page of the site? 
This is for what is displayed at your site&apos;s main URL. 
Depends on the site&apos;s &quot;Front page displays&quot; Reading Settings &apos;show_on_front&apos; and &apos;page_on_front&apos;. 
If you set a static page for the front page of your site, this function will return true when viewing that page. 
Otherwise the same as @see is_home() <code>WP_Query::is_front_page()</code> 
'; file='/wp-includes/query.php, line: 415'; return='bool True, if front of site. '; since='2.5.0 '; uses='is_home() 
get_option()'; type='function';}, 
	{name='is_home'; match='is_home'; definition='is_home()'; description='Is the query for the blog homepage? 
This is the page which shows the time based blog content of your site. 
Depends on the site&apos;s &quot;Front page displays&quot; Reading Settings &apos;show_on_front&apos; and &apos;page_for_posts&apos;. 
If you set a static page for the front page of your site, this function will return true only on the page you set as the &quot;Posts page&quot;. 
@see is_front_page() <code>WP_Query::is_home()</code> 
'; file='/wp-includes/query.php, line: 444'; return='bool True if blog view homepage. '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_lighttpd_before_150'; match='is_lighttpd_before_150'; definition='is_lighttpd_before_150()'; description=''; file='/wp-admin/load-styles.php, line: 48'; type='function';}, 
	{name='is_local_attachment'; match='is_local_attachment'; definition='is_local_attachment($url)'; description='Check if the attachment URI is local one and is really an attachment. 
'; file='/wp-includes/post.php, line: 3551'; params='@param string $url URL to check  '; return='bool True on success, false on failure. '; since='2.0.0 '; type='function';}, 
	{name='is_main_blog'; match='is_main_blog'; definition='is_main_blog()'; description='@see is_main_site() '; file='/wp-includes/ms-deprecated.php, line: 125'; since='MU '; type='function';}, 
	{name='is_main_site'; match='is_main_site'; definition='is_main_site($blog_id=\'\')'; description=''; file='/wp-includes/functions.php, line: 4028'; type='function';}, 
	{name='is_month'; match='is_month'; definition='is_month()'; description='Is the query for a month archive? 
@see <code>WP_Query::is_month()</code> 
'; file='/wp-includes/query.php, line: 464'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_multi_author'; match='is_multi_author'; definition='is_multi_author()'; description='Does this site have more than one author 
Checks to see if more than one author has published posts. 
'; file='/wp-includes/author-template.php, line: 379'; return='bool Whether or not we have more than one author '; since='3.2.0 '; type='function';}, 
	{name='is_multisite'; match='is_multisite'; definition='is_multisite()'; description='Whether Multisite support is enabled 
'; file='/wp-includes/load.php, line: 644'; return='bool True if multisite is enabled, false otherwise. '; since='3.0.0 '; type='function';}, 
	{name='is_nav_menu'; match='is_nav_menu'; definition='is_nav_menu($menu)'; description='Check if the given ID is a navigation menu. 
Returns true if it is; false otherwise. 
'; file='/wp-includes/nav-menu.php, line: 49'; params='@param int string $menu The menu to check (id, slug, or name)  '; return='bool Whether the menu exists. '; since='3.0.0 '; type='function';}, 
	{name='is_nav_menu_item'; match='is_nav_menu_item'; definition='is_nav_menu_item($menu_item_id=0)'; description='Determine whether the given ID is a nav menu item. 
'; file='/wp-includes/nav-menu.php, line: 153'; params='@param int $menu_item_id The ID of the potential nav menu item.  '; return='bool Whether the given ID is that of a nav menu item. '; since='3.0.0 '; type='function';}, 
	{name='is_network_admin'; match='is_network_admin'; definition='is_network_admin()'; description='Whether the current request is for a network admin screen /wp-admin/network/ 
Does not inform on whether the user is a network admin! Use capability checks to tell if the user should be accessing a section or not. 
'; file='/wp-includes/load.php, line: 615'; return='bool True if inside WordPress network administration pages. '; since='3.1.0 '; type='function';}, 
	{name='is_network_only_plugin'; match='is_network_only_plugin'; definition='is_network_only_plugin($plugin)'; description='Checks for &quot;Network: true&quot; in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled. 
Checks for &quot;Site Wide Only: true&quot; for backwards compatibility. 
'; file='/wp-admin/includes/plugin.php, line: 467'; params='@param string $plugin Plugin to check  '; return='bool True if plugin is network only, false otherwise. '; since='3.0.0 '; type='function';}, 
	{name='is_new_day'; match='is_new_day'; definition='is_new_day()'; description='Whether today is a new day. 

'; file='/wp-includes/functions.php, line: 1356'; return='int 1 when new day, 0 if not a new day. '; since='0.71 '; uses='$day Today 
$previousday Previous day'; type='function';}, 
	{name='is_object_in_taxonomy'; match='is_object_in_taxonomy'; definition='is_object_in_taxonomy($object_type, $taxonomy)'; description='Determine if the given object type is associated with the given taxonomy. 

'; file='/wp-includes/taxonomy.php, line: 3086'; params='@param string $object_type Object type string  
@param string $taxonomy Single taxonomy name  '; return='bool True if object is associated with the taxonomy, otherwise false. '; since='3.0.0 '; uses='get_object_taxonomies()'; type='function';}, 
	{name='is_object_in_term'; match='is_object_in_term'; definition='is_object_in_term($object_id, $taxonomy, $terms=null)'; description='Determine if the given object is associated with any of the given terms. 
The given terms are checked against the object&apos;s terms&apos; term_ids, names and slugs. Terms given as integers will only be checked against the object&apos;s terms&apos; term_ids. If no terms are given, determines if object is associated with any terms in the given taxonomy. 

'; file='/wp-includes/taxonomy.php, line: 3042'; params='@param int $object_id ID of the object (post ID, link ID, ...)  
@param string $taxonomy Single taxonomy name  
@param int string array $terms Optional. Term term_id, name, slug or array of said  '; return='bool|WP_Error. <code>WP_Error</code> on input error. '; since='2.7.0 '; uses='get_object_term_cache() 
wp_get_object_terms()'; type='function';}, 
	{name='is_page'; match='is_page'; definition='is_page($page=\'\')'; description='Is the query for a single page? 
If the $page parameter is specified, this function will additionally check if the query is for one of the pages specified. 
@see is_single() is_singular() <code>WP_Query::is_page()</code> 
'; file='/wp-includes/query.php, line: 491'; params='@param mixed $page Page ID, title, slug, or array of such.  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_page_template'; match='is_page_template'; definition='is_page_template($template=\'\')'; description='Whether currently in a page template. 
This template tag allows you to determine if you are in a page template. You can optionally provide a template name and then the check will be specific to that template. 

'; file='/wp-includes/post-template.php, line: 1237'; params='@param string $template The specific template name if specific matching is required.  '; return='bool False on failure, true if success. '; since='2.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_paged'; match='is_paged'; definition='is_paged()'; description='Is the query for paged result and not for the first page? 
@see <code>WP_Query::is_paged()</code> 
'; file='/wp-includes/query.php, line: 511'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_plugin_active'; match='is_plugin_active'; definition='is_plugin_active($plugin)'; description='Check whether the plugin is active by checking the active_plugins list. 
'; file='/wp-admin/includes/plugin.php, line: 417'; params='@param string $plugin Base plugin path from plugins directory.  '; return='bool True, if in the active plugins list. False, not in the list. '; since='2.5.0 '; type='function';}, 
	{name='is_plugin_active_for_network'; match='is_plugin_active_for_network'; definition='is_plugin_active_for_network($plugin)'; description='Check whether the plugin is active for the entire network. 
'; file='/wp-admin/includes/plugin.php, line: 444'; params='@param string $plugin Base plugin path from plugins directory.  '; return='bool True, if active for the network, otherwise false. '; since='3.0.0 '; type='function';}, 
	{name='is_plugin_inactive'; match='is_plugin_inactive'; definition='is_plugin_inactive($plugin)'; description='Check whether the plugin is inactive. 
Reverse of is_plugin_active(). Used as a callback. 
@see is_plugin_active() '; file='/wp-admin/includes/plugin.php, line: 432'; params='@param string $plugin Base plugin path from plugins directory.  '; return='bool True if inactive. False if active. '; since='3.1.0 '; type='function';}, 
	{name='is_plugin_page'; match='is_plugin_page'; definition='is_plugin_page()'; description='Is the current admin page generated by a plugin? 


'; file='/wp-includes/deprecated.php, line: 2576'; return='bool '; since='1.5.0 '; type='function';}, 
	{name='is_post_type_archive'; match='is_post_type_archive'; definition='is_post_type_archive($post_types=\'\')'; description='Is the query for a post type archive page? 
@see <code>WP_Query::is_post_type_archive()</code> 
'; file='/wp-includes/query.php, line: 163'; params='@param mixed $post_types Optional. Post type or array of posts types to check against.  '; return='bool '; since='3.1.0 '; uses='$wp_query'; type='function';}, 
	{name='is_post_type_hierarchical'; match='is_post_type_hierarchical'; definition='is_post_type_hierarchical($post_type)'; description='Whether the post type is hierarchical. 
A false return value might also mean that the post type does not exist. 
@see get_post_type_object '; file='/wp-includes/post.php, line: 764'; params='@param string $post_type Post type name  '; return='bool Whether post type is hierarchical. '; since='3.0.0 '; type='function';}, 
	{name='is_preview'; match='is_preview'; definition='is_preview()'; description='Is the query for a post or page preview? 
@see <code>WP_Query::is_preview()</code> 
'; file='/wp-includes/query.php, line: 531'; return='bool '; since='2.0.0 '; uses='$wp_query'; type='function';}, 
	{name='is_protected_meta'; match='is_protected_meta'; definition='is_protected_meta($meta_key, $meta_type=null)'; description='Determine whether a meta key is protected 
'; file='/wp-includes/meta.php, line: 590'; params='@param string $meta_key Meta key  '; return='bool True if the key is protected, false otherwise. '; since='3.1.3 '; type='function';}, 
	{name='is_random_header_image'; match='is_random_header_image'; definition='is_random_header_image($type=\'any\')'; description='Check if random header image is in use. 
Always true if user expressly chooses the option in Appearance &gt; Header. Also true if theme has multiple header images registered, no specific header image is chosen, and theme turns on random headers with add_theme_support(). 

'; file='/wp-includes/theme.php, line: 1495'; params='@param string $type The random pool to use. any|default|uploaded  '; return='boolean '; since='3.2.0 '; uses='HEADER_IMAGE'; type='function';}, 
	{name='is_robots'; match='is_robots'; definition='is_robots()'; description='Is the query for the robots file? 
@see <code>WP_Query::is_robots()</code> 
'; file='/wp-includes/query.php, line: 551'; return='bool '; since='2.1.0 '; uses='$wp_query'; type='function';}, 
	{name='is_rtl'; match='is_rtl'; definition='is_rtl()'; description='Checks if current locale is RTL. 
'; file='/wp-includes/locale.php, line: 346'; return='bool Whether locale is RTL. '; since='3.0.0 '; type='function';}, 
	{name='is_search'; match='is_search'; definition='is_search()'; description='Is the query for a search? 
@see <code>WP_Query::is_search()</code> 
'; file='/wp-includes/query.php, line: 571'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_serialized'; match='is_serialized'; definition='is_serialized($data)'; description='Check value to find if it was serialized. 
If $data is not an string, then returned value will always be false. Serialized data is always a string. 
'; file='/wp-includes/functions.php, line: 247'; params='@param mixed $data Value to check to see if was serialized.  '; return='bool False if not serialized and true if it was. '; since='2.0.5 '; type='function';}, 
	{name='is_serialized_string'; match='is_serialized_string'; definition='is_serialized_string($data)'; description='Check whether serialized data is of string type. 
'; file='/wp-includes/functions.php, line: 286'; params='@param mixed $data Serialized data  '; return='bool False if not a serialized string, true if it is. '; since='2.0.5 '; type='function';}, 
	{name='is_single'; match='is_single'; definition='is_single($post=\'\')'; description='Is the query for a single post? 
Works for any post type, except attachments and pages 
If the $post parameter is specified, this function will additionally check if the query is for one of the Posts specified. 
@see is_page() is_singular() <code>WP_Query::is_single()</code> 
'; file='/wp-includes/query.php, line: 600'; params='@param mixed $post Post ID, title, slug, or array of such.  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_singular'; match='is_singular'; definition='is_singular($post_types=\'\')'; description='Is the query for a single post of any post type (post, attachment, page, ... )? 
If the $post_types parameter is specified, this function will additionally check if the query is for one of the Posts Types specified. 
@see is_page() is_single() <code>WP_Query::is_singular()</code> 
'; file='/wp-includes/query.php, line: 627'; params='@param mixed $post_types Optional. Post Type or array of Post Types  '; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_site_admin'; match='is_site_admin'; definition='is_site_admin($user_login=\'\')'; description='Determine if user is a site admin. 
Plugins should use is_multisite() instead of checking if this function exists to determine if multisite is enabled. 
This function must reside in a file included only if is_multisite() due to legacy function_exists() checks to determine if multisite is enabled. 
@see is_super_admin() is_multisite() '; file='/wp-includes/ms-deprecated.php, line: 43'; since='MU '; type='function';}, 
	{name='is_ssl'; match='is_ssl'; definition='is_ssl()'; description='Determine if SSL is used. 
'; file='/wp-includes/functions.php, line: 3612'; return='bool True if SSL, false if not used. '; since='2.6.0 '; type='function';}, 
	{name='is_sticky'; match='is_sticky'; definition='is_sticky($post_id=0)'; description='Check if post is sticky. 
Sticky posts should remain at the top of The Loop. If the post ID is not given, then The Loop ID for the current post will be used. 
'; file='/wp-includes/post.php, line: 1597'; params='@param int $post_id Optional. Post ID.  '; return='bool Whether post is sticky. '; since='2.7.0 '; type='function';}, 
	{name='is_subdomain_install'; match='is_subdomain_install'; definition='is_subdomain_install()'; description='Whether a subdomain configuration is enabled. 
'; file='/wp-includes/ms-load.php, line: 18'; return='bool True if subdomain configuration is enabled, false otherwise. '; since='3.0.0 '; type='function';}, 
	{name='is_super_admin'; match='is_super_admin'; definition='is_super_admin($user_id=false)'; description='Determine if user is a site admin. 
'; file='/wp-includes/capabilities.php, line: 1205'; params='@param int $user_id (Optional) The ID of a user. Defaults to the current user.  '; return='bool True if the user is a site admin. '; since='3.0.0 '; type='function';}, 
	{name='is_tag'; match='is_tag'; definition='is_tag($slug=\'\')'; description='Is the query for a tag archive page? 
If the $tag parameter is specified, this function will additionally check if the query is for one of the tags specified. 
@see <code>WP_Query::is_tag()</code> 
'; file='/wp-includes/query.php, line: 255'; params='@param mixed $slug Optional. Tag slug or array of slugs.  '; return='bool '; since='2.3.0 '; uses='$wp_query'; type='function';}, 
	{name='is_tax'; match='is_tax'; definition='is_tax($taxonomy=\'\', $term=\'\')'; description='Is the query for a taxonomy archive page? 
If the $taxonomy parameter is specified, this function will additionally check if the query is for that specific $taxonomy. 
If the $term parameter is specified in addition to the $taxonomy parameter, this function will additionally check if the query is for one of the terms specified. 
@see <code>WP_Query::is_tax()</code> 
'; file='/wp-includes/query.php, line: 284'; params='@param mixed $taxonomy Optional. Taxonomy slug or slugs.  
@param mixed $term Optional. Term ID, name, slug or array of Term IDs, names, and slugs.  '; return='bool '; since='2.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_taxonomy'; match='is_taxonomy'; definition='is_taxonomy($taxonomy)'; description='Checks that the taxonomy name exists. 
@see taxonomy_exists() '; file='/wp-includes/deprecated.php, line: 2542'; params='@param string $taxonomy Name of taxonomy object  '; return='bool Whether the taxonomy exists. '; since='2.3.0 '; type='function';}, 
	{name='is_taxonomy_hierarchical'; match='is_taxonomy_hierarchical'; definition='is_taxonomy_hierarchical($taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 234'; type='function';}, 
	{name='is_term'; match='is_term'; definition='is_term($term, $taxonomy=\'\', $parent=0)'; description='Check if Term exists. 
@see term_exists() '; file='/wp-includes/deprecated.php, line: 2560'; params='@param int string $term The term to check  
@param string $taxonomy The taxonomy name to use  
@param int $parent ID of parent term under which to confine the exists search.  '; return='mixed Get the term id or Term Object, if exists. '; since='2.3.0 '; type='function';}, 
	{name='is_textdomain_loaded'; match='is_textdomain_loaded'; definition='is_textdomain_loaded($domain)'; description='Whether there are translations for the domain 
'; file='/wp-includes/l10n.php, line: 498'; params='@param string $domain  '; return='bool Whether there are translations '; since='3.0.0 '; type='function';}, 
	{name='is_time'; match='is_time'; definition='is_time()'; description='Is the query for a specific time? 
@see <code>WP_Query::is_time()</code> 
'; file='/wp-includes/query.php, line: 647'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_trackback'; match='is_trackback'; definition='is_trackback()'; description='Is the query for a trackback endpoint call? 
@see <code>WP_Query::is_trackback()</code> 
'; file='/wp-includes/query.php, line: 667'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='is_uninstallable_plugin'; match='is_uninstallable_plugin'; definition='is_uninstallable_plugin($plugin)'; description='Whether the plugin can be uninstalled. 
'; file='/wp-admin/includes/plugin.php, line: 794'; params='@param string $plugin Plugin path to check.  '; return='bool Whether plugin can be uninstalled. '; since='2.7.0 '; type='function';}, 
	{name='is_upload_space_available'; match='is_upload_space_available'; definition='is_upload_space_available()'; description='Determines if there is any upload space left in the current blog&apos;s quota. 
'; file='/wp-admin/includes/ms.php, line: 333'; return='bool True if space is available, false otherwise. '; since='3.0.0 '; type='function';}, 
	{name='is_user_admin'; match='is_user_admin'; definition='is_user_admin()'; description='Whether the current request is for a user admin screen /wp-admin/user/ 
Does not inform on whether the user is an admin! Use capability checks to tell if the user should be accessing a section or not. 
'; file='/wp-includes/load.php, line: 631'; return='bool True if inside WordPress user administration pages. '; since='3.1.0 '; type='function';}, 
	{name='is_user_logged_in'; match='is_user_logged_in'; definition='is_user_logged_in()'; description='Checks if the current visitor is a logged in user. 
'; file='/wp-includes/pluggable.php, line: 783'; return='bool True if user is logged in, false if not logged in. '; since='2.0.0 '; type='function';}, 
	{name='is_user_member_of_blog'; match='is_user_member_of_blog'; definition='is_user_member_of_blog($user_id, $blog_id=0)'; description='Find out whether a user is a member of a given blog. 

'; file='/wp-includes/ms-functions.php, line: 129'; params='@param int $user_id The unique ID of the user  
@param int $blog Optional. If no blog_id is provided, current site is used  '; return='bool '; since='MU 1.1 '; uses='get_blogs_of_user()'; type='function';}, 
	{name='is_user_option_local'; match='is_user_option_local'; definition='is_user_option_local($key, $user_id=0, $blog_id=0)'; description='Check whether a usermeta key has to do with the current blog. 

'; file='/wp-includes/ms-functions.php, line: 1946'; params='@param string $key  
@param int $user_id Optional. Defaults to current user.  
@param int $blog_id Optional. Defaults to current blog.  '; return='bool '; since='MU '; uses='wp_get_current_user()'; type='function';}, 
	{name='is_user_spammy'; match='is_user_spammy'; definition='is_user_spammy($username=0)'; description='Check to see whether a user is marked as a spammer, based on username 

'; file='/wp-includes/ms-functions.php, line: 1890'; params='@param string $username  '; return='bool '; since='MU '; uses='get_current_user_id() 
get_user_id_from_string()'; type='function';}, 
	{name='is_wp_error'; match='is_wp_error'; definition='is_wp_error($thing)'; description='Check whether variable is a WordPress Error. 
Looks at the object and if a <code>WP_Error</code> class. Does not check to see if the parent is also <code>WP_Error</code> , so can&apos;t inherit <code>WP_Error</code> and still use this function. 
'; file='/wp-includes/class-wp-error.php, line: 206'; params='@param mixed $thing Check if unknown variable is WordPress Error object.  '; return='bool True, if <code>WP_Error</code> . False, if not <code>WP_Error</code> . '; since='2.1.0 '; type='function';}, 
	{name='is_wpmu_sitewide_plugin'; match='is_wpmu_sitewide_plugin'; definition='is_wpmu_sitewide_plugin($file)'; description='@see is_network_only_plugin() '; file='/wp-admin/includes/ms-deprecated.php, line: 63'; type='function';}, 
	{name='is_year'; match='is_year'; definition='is_year()'; description='Is the query for a specific year? 
@see <code>WP_Query::is_year()</code> 
'; file='/wp-includes/query.php, line: 687'; return='bool '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='iso8601_timezone_to_offset'; match='iso8601_timezone_to_offset'; definition='iso8601_timezone_to_offset($timezone)'; description='Computes an offset in seconds from an iso8601 timezone. 
'; file='/wp-includes/formatting.php, line: 1647'; params='@param string $timezone Either \'Z\' for 0 offset or \'±hhmm\'.  '; return='int|float The offset in seconds. '; since='1.5.0 '; type='function';}, 
	{name='iso8601_to_datetime'; match='iso8601_to_datetime'; definition='iso8601_to_datetime($date_string, $timezone=\'user\')'; description='Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt]. 
'; file='/wp-includes/formatting.php, line: 1669'; params='@param string $date_string Date and time in ISO 8601 format  
@param string $timezone Optional. If set to GMT returns the time minus gmt_offset. Default is \'user\'.  '; return='string The date and time in MySQL DateTime format - Y-m-d H:i:s. '; since='1.5.0 '; type='function';}, 
	{name='js_escape'; match='js_escape'; definition='js_escape($text)'; description='Escape single quotes, specialchar double quotes, and fix line endings. 
The filter &apos;js_escape&apos; is also applied by esc_js() 
@see esc_js() '; file='/wp-includes/deprecated.php, line: 2110'; params='@param string $text The text to be escaped.  '; return='string Escaped text. '; since='2.0.4 '; type='function';}, 
	{name='kses_init'; match='kses_init'; definition='kses_init()'; description='Sets up most of the Kses filters for input form content. 
If you remove the kses_init() function from &apos;init&apos; hook and &apos;set_current_user&apos; (priority is default), then none of the Kses filter hooks will be added. 
First removes all of the Kses filters in case the current user does not need to have Kses filter the content. If the user does not have unfiltered html capability, then Kses filters are added. 
kses_remove_filters() Removes the Kses filters kses_init_filters() Adds the Kses filters back if the user does not have unfiltered HTML capability. '; file='/wp-includes/kses.php, line: 1353'; since='2.0.0 '; type='function';}, 
	{name='kses_init_filters'; match='kses_init_filters'; definition='kses_init_filters()'; description='Adds all Kses input form content filters. 
All hooks have default priority. The wp_filter_kses() function is added to the &apos;pre_comment_content&apos; and &apos;title_save_pre&apos; hooks. 
The wp_filter_post_kses() function is added to the &apos;content_save_pre&apos;, &apos;excerpt_save_pre&apos;, and &apos;content_filtered_save_pre&apos; hooks. 
'; file='/wp-includes/kses.php, line: 1303'; since='2.0.0 add_filter() See description for what functions are added to what hooks. '; type='function';}, 
	{name='kses_remove_filters'; match='kses_remove_filters'; definition='kses_remove_filters()'; description='Removes all Kses input form content filters. 
A quick procedural method to removing all of the filters that kses uses for content in WordPress Loop. 
Does not remove the kses_init() function from &apos;init&apos; hook (priority is default). Also does not remove kses_init() function from &apos;set_current_user&apos; hook (priority is also default). 
'; file='/wp-includes/kses.php, line: 1326'; since='2.0.6 '; type='function';}, 
	{name='language_attributes'; match='language_attributes'; definition='language_attributes($doctype=\'html\')'; description='Display the language attributes for the html tag. 
Builds up a set of html attributes containing the text direction and language information for the page. 
'; file='/wp-includes/general-template.php, line: 1896'; params='@param string $doctype The type of html document (xhtml|html).  '; since='2.1.0 '; type='function';}, 
	{name='like_escape'; match='like_escape'; definition='like_escape($text)'; description='Escapes text for SQL LIKE special characters % and _. 
'; file='/wp-includes/formatting.php, line: 2387'; params='@param string $text The text to be escaped.  '; return='string text, safe for inclusion in LIKE query. '; since='2.5.0 '; type='function';}, 
	{name='link_advanced_meta_box'; match='link_advanced_meta_box'; definition='link_advanced_meta_box($link)'; description='Display advanced link options form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 873'; params='@param object $link  '; since='2.6.0 '; type='function';}, 
	{name='link_categories_meta_box'; match='link_categories_meta_box'; definition='link_categories_meta_box($link)'; description='Display link categories form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 654'; params='@param object $link  '; since='2.6.0 '; type='function';}, 
	{name='link_pages'; match='link_pages'; definition='link_pages($before=\'< br/>\', $after=\'< br/>\', $next_or_number=\'number\', $nextpagelink=\'next page\', $previouspagelink=\'previous page\', $pagelink=\'%\', $more_file=\'\')'; description='Print list of pages based on arguments. 
@see wp_link_pages() '; file='/wp-includes/deprecated.php, line: 830'; params='@param string $before  
@param string $after  
@param string $next_or_number  
@param string $nextpagelink  
@param string $previouspagelink  
@param string $pagelink  
@param string $more_file  '; return='string '; since='0.71 '; type='function';}, 
	{name='link_submit_meta_box'; match='link_submit_meta_box'; definition='link_submit_meta_box($link)'; description='Display link create form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 594'; params='@param object $link  '; since='2.7.0 '; type='function';}, 
	{name='link_target_meta_box'; match='link_target_meta_box'; definition='link_target_meta_box($link)'; description='Display form fields for changing link target. 
'; file='/wp-admin/includes/meta-boxes.php, line: 698'; params='@param object $link  '; since='2.6.0 '; type='function';}, 
	{name='link_xfn_meta_box'; match='link_xfn_meta_box'; definition='link_xfn_meta_box($link)'; description='Display xfn form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 753'; params='@param object $link  '; since='2.6.0 '; type='function';}, 
	{name='links_add_base_url'; match='links_add_base_url'; definition='links_add_base_url($content, $base, $attrs=array(\'src\', \'href\'))'; description='Add a Base url to relative links in passed content. 
By default it supports the &apos;src&apos; and &apos;href&apos; attributes. However this can be changed via the 3rd param. 
'; file='/wp-includes/formatting.php, line: 2747'; params='@param string $content String to search for links in.  
@param string $base The base URL to prefix to links.  
@param array $attrs The attributes which should be processed.  '; return='string The processed content. '; since='2.7.0 '; type='function';}, 
	{name='links_add_target'; match='links_add_target'; definition='links_add_target($content, $target=\'_blank\', $tags=array(\'a\'))'; description='Adds a Target attribute to all links in passed content. 
This function by default only applies to tags, however this can be modified by the 3rd param. 
NOTE: Any current target attributed will be stripped and replaced. 
'; file='/wp-includes/formatting.php, line: 2788'; params='@param string $content String to search for links in.  
@param string $target The Target to add to the links.  
@param array $tags An array of tags to apply to.  '; return='string The processed content. '; since='2.7.0 '; type='function';}, 
	{name='links_popup_script'; match='links_popup_script'; definition='links_popup_script($text=\'Links\', $width=400, $height=400, $file=\'links.all.php\', $count=true)'; description='Show the link to the links popup and the number of links. 
'; file='/wp-includes/deprecated.php, line: 1088'; since='0.71 '; type='function';}, 
	{name='list_authors'; match='list_authors'; definition='list_authors($optioncount=false, $exclude_admin=true, $show_fullname=false, $hide_empty=true, $feed=\'\', $feed_image=\'\')'; description='@see wp_list_authors() '; file='/wp-includes/deprecated.php, line: 729'; params='@param bool $optioncount  
@param bool $exclude_admin  
@param bool $show_fullname  
@param bool $hide_empty  
@param string $feed  
@param string $feed_image  '; return='unknown '; since='1.2 '; type='function';}, 
	{name='list_cats'; match='list_cats'; definition='list_cats($optionall=1, $all=\'All\', $sort_column=\'ID\', $sort_order=\'asc\', $file=\'\', $list=true, $optiondates=0, $optioncount=0, $hide_empty=1, $use_desc_for_title=1, $children=false, $child_of=0, $categories=0, $recurse=0, $feed=\'\', $feed_image=\'\', $exclude=\'\', $hierarchical=false)'; description='@see wp_list_categories() '; file='/wp-includes/deprecated.php, line: 638'; params='@param int $optionall  
@param string $all  
@param string $sort_column  
@param string $sort_order  
@param string $file  
@param bool $list  
@param int $optiondates  
@param int $optioncount  
@param int $hide_empty  
@param int $use_desc_for_title  
@param bool $children  
@param int $child_of  
@param int $categories  
@param int $recurse  
@param string $feed  
@param string $feed_image  
@param string $exclude  
@param bool $hierarchical  '; return='unknown '; since='0.71 '; type='function';}, 
	{name='list_core_update'; match='list_core_update'; definition='list_core_update($update)'; description=''; file='/wp-admin/update-core.php, line: 20'; type='function';}, 
	{name='list_files'; match='list_files'; definition='list_files($folder=\'\', $levels=100)'; description='Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep. The depth of the recursiveness can be controlled by the $levels param. 
'; file='/wp-admin/includes/file.php, line: 128'; params='@param string $folder Full path to folder  
@param int $levels (optional) Levels of folders to follow, Default: 100 (PHP Loop limit).  '; return='bool|array False on failure, Else array of files '; since='2.6.0 '; type='function';}, 
	{name='list_meta'; match='list_meta'; definition='list_meta($meta)'; description='{ '; file='/wp-admin/includes/template.php, line: 421'; type='function';}, 
	{name='list_plugin_updates'; match='list_plugin_updates'; definition='list_plugin_updates()'; description=''; file='/wp-admin/update-core.php, line: 182'; type='function';}, 
	{name='list_theme_updates'; match='list_theme_updates'; definition='list_theme_updates()'; description=''; file='/wp-admin/update-core.php, line: 263'; type='function';}, 
	{name='load_child_theme_textdomain'; match='load_child_theme_textdomain'; definition='load_child_theme_textdomain($domain, $path=false)'; description='Loads the child themes translated strings. 
If the current locale exists as a .mo file in the child themes root directory, it will be included in the translated strings by the $domain. 
The .mo files must be named based on the locale exactly. 
'; file='/wp-includes/l10n.php, line: 467'; params='@param string $domain Unique identifier for retrieving translated strings  '; since='2.9.0 '; type='function';}, 
	{name='load_default_textdomain'; match='load_default_textdomain'; definition='load_default_textdomain()'; description='Loads default translated strings based on locale. 
Loads the .mo file in WP_LANG_DIR constant path from WordPress root. The translated (.mo) file is named based off of the locale. 
'; file='/wp-includes/l10n.php, line: 380'; since='1.5.0 '; type='function';}, 
	{name='load_muplugin_textdomain'; match='load_muplugin_textdomain'; definition='load_muplugin_textdomain($domain, $mu_plugin_rel_path=\'\')'; description='Load the translated strings for a plugin residing in the mu-plugins dir. 
'; file='/wp-includes/l10n.php, line: 428'; params='@param string $domain Unique identifier for retrieving translated strings  
@param strings $mu_plugin_rel_path Relative to WPMU_PLUGIN_DIR directory in which the MO file resides. Defaults is empty string.  '; since='3.0.0 '; type='function';}, 
	{name='load_plugin_textdomain'; match='load_plugin_textdomain'; definition='load_plugin_textdomain($domain, $abs_rel_path=false, $plugin_rel_path=false)'; description='Loads the plugin&apos;s translated strings. 
If the path is not given then it will be the root of the plugin directory. The .mo file should be named based on the domain with a dash, and then the locale exactly. 
'; file='/wp-includes/l10n.php, line: 403'; params='@param string $domain Unique identifier for retrieving translated strings  
@param string $abs_rel_path Optional. Relative path to ABSPATH of a folder, where the .mo file resides. Deprecated, but still functional until 2.7  
@param string $plugin_rel_path Optional. Relative path to WP_PLUGIN_DIR. This is the preferred argument to use. It takes precendence over $abs_rel_path  '; since='1.5.0 '; type='function';}, 
	{name='load_template'; match='load_template'; definition='load_template($_template_file, $require_once=true)'; description='Require the template file with WordPress environment. 
The globals are set up for the template file to ensure that the WordPress environment is available from within the function. The query variables are also available. 
'; file='/wp-includes/theme.php, line: 1107'; params='@param string $_template_file Path to template file.  
@param bool $require_once Whether to require_once or require. Default true.  '; since='1.5.0 '; type='function';}, 
	{name='load_textdomain'; match='load_textdomain'; definition='load_textdomain($domain, $mofile)'; description='Loads a MO file into the domain $domain. 
If the domain already exists, the translations will be merged. If both sets have the same string, the translation from the original value will be taken. 
On success, the .mo file will be placed in the $l10n global by $domain and will be a MO object. 

'; file='/wp-includes/l10n.php, line: 321'; params='@param string $domain Unique identifier for retrieving translated strings  
@param string $mofile Path to the .mo file  '; return='bool true on success, false on failure '; since='1.5.0 '; uses='$l10n Gets list of domain translated string objects'; type='function';}, 
	{name='load_theme_textdomain'; match='load_theme_textdomain'; definition='load_theme_textdomain($domain, $path=false)'; description='Loads the theme&apos;s translated strings. 
If the current locale exists as a .mo file in the theme&apos;s root directory, it will be included in the translated strings by the $domain. 
The .mo files must be named based on the locale exactly. 
'; file='/wp-includes/l10n.php, line: 446'; params='@param string $domain Unique identifier for retrieving translated strings  '; since='1.5.0 '; type='function';}, 
	{name='locale_stylesheet'; match='locale_stylesheet'; definition='locale_stylesheet()'; description='Display localized stylesheet link element. 
'; file='/wp-includes/theme.php, line: 1124'; since='2.1.0 '; type='function';}, 
	{name='locate_template'; match='locate_template'; definition='locate_template($template_names, $load=false, $require_once=true)'; description='Retrieve the name of the highest priority template file that exists. 
Searches in the STYLESHEETPATH before TEMPLATEPATH so that themes which inherit from a parent theme can just overload one file. 
'; file='/wp-includes/theme.php, line: 1075'; params='@param string array $template_names Template file(s) to search for, in order.  
@param bool $load If true the template file will be loaded if it is found.  
@param bool $require_once Whether to require_once or require. Default true. Has no effect if $load is false.  '; return='string The template filename if one is located. '; since='2.7.0 '; type='function';}, 
	{name='logIO'; match='logIO'; definition='logIO($io, $msg)'; description=''; file='/xmlrpc.php, line: 86'; type='function';}, 
	{name='log_app'; match='log_app'; definition='log_app($label, $msg)'; description=''; file='/wp-app.php, line: 54'; type='function';}, 
	{name='login_footer'; match='login_footer'; definition='login_footer($input_id=\'\')'; description='Outputs the footer for the login page. 
'; file='/wp-login.php, line: 125'; params='@param string $input_id Which input to auto-focus  '; type='function';}, 
	{name='login_header'; match='login_header'; definition='login_header($title=\'Log In\', $message=\'\', $wp_error=\'\')'; description='Make sure that the WordPress bootstrap has run before continuing. Outputs the header for the login page. 

'; file='/wp-login.php, line: 41'; params='@param string $title Optional. WordPress Log In Page title to display in <title> element.  
@param string $message Optional. Message to display in header.  
@param  $wp_error Optional. WordPress Error Object  '; uses='do_action() Calls the \'login_head\' for outputting HTML in the Log In header. 
apply_filters() Calls \'login_headerurl\' for the top login link. 
apply_filters() Calls \'login_headertitle\' for the top login title. 
apply_filters() Calls \'login_message\' on the message to display in the header. 
$error The error global, which is checked for displaying errors.'; type='function';}, 
	{name='maintenance_nag'; match='maintenance_nag'; definition='maintenance_nag()'; description=''; file='/wp-admin/includes/update.php, line: 299'; type='function';}, 
	{name='make_clickable'; match='make_clickable'; definition='make_clickable($ret)'; description='Convert plaintext URI to HTML links. 
Converts URI, www and ftp, and email addresses. Finishes by fixing links within links. 
'; file='/wp-includes/formatting.php, line: 1375'; params='@param string $ret Content to convert URIs.  '; return='string Content with converted URIs. '; since='0.71 '; type='function';}, 
	{name='make_url_footnote'; match='make_url_footnote'; definition='make_url_footnote($content)'; description='Strip HTML and put links at the bottom of stripped content. 
Searches for all of the links, strips them out of the content, and places them at the bottom of the content with numbers. 

'; file='/wp-includes/deprecated.php, line: 1753'; params='@param string $content Content to get links  '; return='string HTML stripped out of content with links at the bottom. '; since='0.71 '; type='function';}, 
	{name='map_meta_cap'; match='map_meta_cap'; definition='map_meta_cap($cap, $user_id)'; description='Map meta capabilities to primitive capabilities. 
This does not actually compare whether the user ID has the actual capability, just what the capability or capabilities are. Meta capability list value can be &apos;delete_user&apos;, &apos;edit_user&apos;, &apos;remove_user&apos;, &apos;promote_user&apos;, &apos;delete_post&apos;, &apos;delete_page&apos;, &apos;edit_post&apos;, &apos;edit_page&apos;, &apos;read_post&apos;, or &apos;read_page&apos;. 
'; file='/wp-includes/capabilities.php, line: 796'; params='@param string $cap Capability name.  
@param int $user_id User ID.  '; return='array Actual capabilities for meta capability. '; since='2.0.0 '; type='function';}, 
	{name='maybe_add_existing_user_to_blog'; match='maybe_add_existing_user_to_blog'; definition='maybe_add_existing_user_to_blog()'; description='Add a new user to a blog by visiting /newbloguser/username/. 
This will only work when the user&apos;s details are saved as an option keyed as &apos;new_user_x&apos;, where &apos;x&apos; is the username of the user to be added, as when a user is invited through the regular <code>WP</code> Add User interface. 
'; file='/wp-includes/ms-functions.php, line: 1812'; since='MU '; uses='add_existing_user_to_blog() '; type='function';}, 
	{name='maybe_redirect_404'; match='maybe_redirect_404'; definition='maybe_redirect_404()'; description='Correct 404 redirects when NOBLOGREDIRECT is defined. 
'; file='/wp-includes/ms-functions.php, line: 1792'; since='MU '; type='function';}, 
	{name='maybe_serialize'; match='maybe_serialize'; definition='maybe_serialize($data)'; description='Serialize data, if needed. 
'; file='/wp-includes/functions.php, line: 1036'; params='@param mixed $data Data that might be serialized.  '; return='mixed A scalar data '; since='2.0.5 '; type='function';}, 
	{name='maybe_unserialize'; match='maybe_unserialize'; definition='maybe_unserialize($original)'; description='Unserialize value only if it was serialized. 
'; file='/wp-includes/functions.php, line: 230'; params='@param string $original Maybe unserialized original, if is needed.  '; return='mixed Unserialized data can be any type. '; since='2.0.0 '; type='function';}, 
	{name='mce_escape'; match='mce_escape'; definition='mce_escape($text)'; description=''; file='/wp-includes/js/tinymce/langs/wp-langs.php, line: 4'; type='function';}, 
	{name='media_buttons'; match='media_buttons'; definition='media_buttons()'; description='{ '; file='/wp-admin/includes/media.php, line: 376'; type='function';}, 
	{name='media_handle_sideload'; match='media_handle_sideload'; definition='media_handle_sideload($file_array, $post_id, $desc=null, $post_data=array())'; description='This handles a sideloaded file in the same way as an uploaded file is handled by <code>media_handle_upload()</code> 
'; file='/wp-admin/includes/media.php, line: 256'; params='@param array $file_array Array similar to a  
@param int $post_id The post ID the media is associated with  
@param string $desc Description of the sideloaded file  
@param array $post_data allows you to overwrite some of the attachment  '; return='int|object The ID of the attachment or a <code>WP_Error</code> on failure '; since='2.6.0 '; type='function';}, 
	{name='media_handle_upload'; match='media_handle_upload'; definition='media_handle_upload($file_id, $post_id, $post_data=array(), $overrides=array( \'test_form\'=> false))'; description='{ '; file='/wp-admin/includes/media.php, line: 191'; type='function';}, 
	{name='media_post_single_attachment_fields_to_edit'; match='media_post_single_attachment_fields_to_edit'; definition='media_post_single_attachment_fields_to_edit($form_fields, $post)'; description='{ '; file='/wp-admin/includes/media.php, line: 1012'; type='function';}, 
	{name='media_send_to_editor'; match='media_send_to_editor'; definition='media_send_to_editor($html)'; description='{ '; file='/wp-admin/includes/media.php, line: 166'; type='function';}, 
	{name='media_sideload_image'; match='media_sideload_image'; definition='media_sideload_image($file, $post_id, $desc=null)'; description='Download an image from the specified URL and attach it to a post. 
'; file='/wp-admin/includes/media.php, line: 582'; params='@param string $file The URL of the image to download  
@param int $post_id The post ID the media is to be associated with  
@param string $desc Optional. Description of the image  '; return='string|WP_Error Populated HTML img tag on success '; since='2.6.0 '; type='function';}, 
	{name='media_single_attachment_fields_to_edit'; match='media_single_attachment_fields_to_edit'; definition='media_single_attachment_fields_to_edit($form_fields, $post)'; description='{ '; file='/wp-admin/includes/media.php, line: 998'; type='function';}, 
	{name='media_upload_audio'; match='media_upload_audio'; definition='media_upload_audio()'; description='{ '; file='/wp-admin/includes/media.php, line: 625'; type='function';}, 
	{name='media_upload_bypass_url'; match='media_upload_bypass_url'; definition='media_upload_bypass_url($url)'; description='{ '; file='/wp-admin/includes/media.php, line: 2330'; type='function';}, 
	{name='media_upload_file'; match='media_upload_file'; definition='media_upload_file()'; description='{ '; file='/wp-admin/includes/media.php, line: 743'; type='function';}, 
	{name='media_upload_flash_bypass'; match='media_upload_flash_bypass'; definition='media_upload_flash_bypass()'; description='{ '; file='/wp-admin/includes/media.php, line: 2295'; type='function';}, 
	{name='media_upload_form'; match='media_upload_form'; definition='media_upload_form($errors=null)'; description='{ '; file='/wp-admin/includes/media.php, line: 1437'; type='function';}, 
	{name='media_upload_form_handler'; match='media_upload_form_handler'; definition='media_upload_form_handler()'; description='{ '; file='/wp-admin/includes/media.php, line: 427'; type='function';}, 
	{name='media_upload_gallery'; match='media_upload_gallery'; definition='media_upload_gallery()'; description='{ '; file='/wp-admin/includes/media.php, line: 799'; type='function';}, 
	{name='media_upload_gallery_form'; match='media_upload_gallery_form'; definition='media_upload_gallery_form($errors)'; description='{ '; file='/wp-admin/includes/media.php, line: 1778'; type='function';}, 
	{name='media_upload_header'; match='media_upload_header'; definition='media_upload_header()'; description='{ '; file='/wp-admin/includes/media.php, line: 1421'; type='function';}, 
	{name='media_upload_html_bypass'; match='media_upload_html_bypass'; definition='media_upload_html_bypass($flash=true)'; description='{ '; file='/wp-admin/includes/media.php, line: 2306'; type='function';}, 
	{name='media_upload_image'; match='media_upload_image'; definition='media_upload_image()'; description='{ '; file='/wp-admin/includes/media.php, line: 519'; type='function';}, 
	{name='media_upload_library'; match='media_upload_library'; definition='media_upload_library()'; description='{ '; file='/wp-admin/includes/media.php, line: 822'; type='function';}, 
	{name='media_upload_library_form'; match='media_upload_library_form'; definition='media_upload_library_form($errors)'; description='{ '; file='/wp-admin/includes/media.php, line: 1920'; type='function';}, 
	{name='media_upload_tabs'; match='media_upload_tabs'; definition='media_upload_tabs()'; description='{ '; file='/wp-admin/includes/media.php, line: 16'; type='function';}, 
	{name='media_upload_type_form'; match='media_upload_type_form'; definition='media_upload_type_form($type=\'file\', $errors=null, $id=null)'; description='{ '; file='/wp-admin/includes/media.php, line: 1604'; type='function';}, 
	{name='media_upload_type_url_form'; match='media_upload_type_url_form'; definition='media_upload_type_url_form($type=\'file\', $errors=null, $id=null)'; description='{ '; file='/wp-admin/includes/media.php, line: 1662'; type='function';}, 
	{name='media_upload_use_flash'; match='media_upload_use_flash'; definition='media_upload_use_flash($flash)'; description='{ '; file='/wp-admin/includes/media.php, line: 2282'; type='function';}, 
	{name='media_upload_video'; match='media_upload_video'; definition='media_upload_video()'; description='{ '; file='/wp-admin/includes/media.php, line: 684'; type='function';}, 
	{name='menu_page_url'; match='menu_page_url'; definition='menu_page_url($menu_slug, $echo=true)'; description='Get the url to access a particular menu page based on the slug it was registered with. 
If the slug hasn&apos;t been registered properly no url will be returned 
'; file='/wp-admin/includes/plugin.php, line: 1307'; params='@param string $menu_slug The slug name to refer to this menu by (should be unique for this menu)  
@param bool $echo Whether or not to echo the url - default is true  '; return='string the url '; since='3.0 '; type='function';}, 
	{name='meta_box_prefs'; match='meta_box_prefs'; definition='meta_box_prefs($screen)'; description='{ '; file='/wp-admin/includes/template.php, line: 1014'; type='function';}, 
	{name='meta_form'; match='meta_form'; definition='meta_form()'; description='{ '; file='/wp-admin/includes/template.php, line: 521'; type='function';}, 
	{name='ms_cookie_constants'; match='ms_cookie_constants'; definition='ms_cookie_constants()'; description='Defines Multisite cookie constants. 
'; file='/wp-includes/ms-default-constants.php, line: 37'; since='3.0.0 '; type='function';}, 
	{name='ms_deprecated_blogs_file'; match='ms_deprecated_blogs_file'; definition='ms_deprecated_blogs_file()'; description=''; file='/wp-admin/includes/ms.php, line: 675'; type='function';}, 
	{name='ms_file_constants'; match='ms_file_constants'; definition='ms_file_constants()'; description='Defines Multisite file constants. 
'; file='/wp-includes/ms-default-constants.php, line: 79'; since='3.0.0 '; type='function';}, 
	{name='ms_not_installed'; match='ms_not_installed'; definition='ms_not_installed()'; description='Displays a failure message. 
Used when a blog&apos;s tables do not exist. Checks for a missing $wpdb-&gt;site table as well. 
'; file='/wp-includes/ms-load.php, line: 224'; since='3.0.0 '; type='function';}, 
	{name='ms_site_check'; match='ms_site_check'; definition='ms_site_check()'; description='Checks status of current blog. 
Checks if the blog is deleted, inactive, archived, or spammed. 
Dies with a default message if the blog does not pass the check. 
To change the default message when a blog does not pass the check, use the wp-content/blog-deleted.php, blog-inactive.php and blog-suspended.php drop-ins. 
'; file='/wp-includes/ms-load.php, line: 71'; return='bool|string Returns true on success, or drop-in file to include. '; type='function';}, 
	{name='ms_subdomain_constants'; match='ms_subdomain_constants'; definition='ms_subdomain_constants()'; description='Defines Multisite subdomain constants and handles warnings and notices. 
VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool. 
On first call, the constants are checked and defined. On second call, we will have translations loaded and can trigger warnings easily. 
'; file='/wp-includes/ms-default-constants.php, line: 105'; since='3.0.0 '; type='function';}, 
	{name='ms_upload_constants'; match='ms_upload_constants'; definition='ms_upload_constants()'; description='Defines Multisite upload constants. 
'; file='/wp-includes/ms-default-constants.php, line: 15'; since='3.0.0 '; type='function';}, 
	{name='mu_dropdown_languages'; match='mu_dropdown_languages'; definition='mu_dropdown_languages($lang_files=array(), $current=\'\')'; description=''; file='/wp-admin/includes/ms.php, line: 543'; type='function';}, 
	{name='mu_options'; match='mu_options'; definition='mu_options($options)'; description=''; file='/wp-admin/includes/ms-deprecated.php, line: 36'; type='function';}, 
	{name='mysql2date'; match='mysql2date'; definition='mysql2date($dateformatstring, $mysqlstring, $translate=true)'; description='Converts MySQL DATETIME field to user specified date format. 
If $dateformatstring has &apos;G&apos; value, then gmmktime() function will be used to make the time. If $dateformatstring is set to &apos;U&apos;, then mktime() function will be used to make the time. 
The $translate will only be used, if it is set to true and it is by default and if the $wp_locale object has the month and weekday set. 
'; file='/wp-includes/functions.php, line: 25'; params='@param string $dateformatstring Either \'G\', \'U\', or php date format.  
@param string $mysqlstring Time from mysql DATETIME field.  
@param bool $translate Optional. Default is true. Will switch format to locale.  '; return='string Date formated by $dateformatstring or locale (if available). '; since='0.71 '; type='function';}, 
	{name='network_admin_url'; match='network_admin_url'; definition='network_admin_url($path=\'\', $scheme=\'admin\')'; description=''; file='/wp-includes/link-template.php, line: 2237'; type='function';}, 
	{name='network_domain_check'; match='network_domain_check'; definition='network_domain_check()'; description='Check for an existing network. 
'; file='/wp-admin/network.php, line: 40'; return='Whether a network exists. '; since='3.0.0 '; type='function';}, 
	{name='network_home_url'; match='network_home_url'; definition='network_home_url($path=\'\', $scheme=null)'; description=''; file='/wp-includes/link-template.php, line: 2208'; type='function';}, 
	{name='network_site_url'; match='network_site_url'; definition='network_site_url($path=\'\', $scheme=null)'; description=''; file='/wp-includes/link-template.php, line: 2168'; type='function';}, 
	{name='network_step1'; match='network_step1'; definition='network_step1($errors=false)'; description='Prints step 1 for Network installation process. 
'; file='/wp-admin/network.php, line: 134'; since='3.0.0 '; type='function';}, 
	{name='network_step2'; match='network_step2'; definition='network_step2($errors=false)'; description='Prints step 2 for Network installation process. 
'; file='/wp-admin/network.php, line: 306'; since='3.0.0 '; type='function';}, 
	{name='new_user_email_admin_notice'; match='new_user_email_admin_notice'; definition='new_user_email_admin_notice()'; description=''; file='/wp-admin/includes/ms.php, line: 301'; type='function';}, 
	{name='newblog_notify_siteadmin'; match='newblog_notify_siteadmin'; definition='newblog_notify_siteadmin($blog_id, $deprecated=\'\')'; description='Notifies the network admin that a new site has been activated. 
Filter &apos;newblog_notify_siteadmin&apos; to change the content of the notification email. 
'; file='/wp-includes/ms-functions.php, line: 1101'; params='@param int $blog_id The new site\'s ID.  '; return='bool '; since='MU '; type='function';}, 
	{name='newuser_notify_siteadmin'; match='newuser_notify_siteadmin'; definition='newuser_notify_siteadmin($user_id)'; description='Notifies the network admin that a new user has been activated. 
Filter &apos;newuser_notify_siteadmin&apos; to change the content of the notification email. 
'; file='/wp-includes/ms-functions.php, line: 1138'; params='@param int $user_id The new user\'s ID.  '; return='bool '; since='MU '; type='function';}, 
	{name='next_comments_link'; match='next_comments_link'; definition='next_comments_link($label=\'\', $max_page=0)'; description='Display the link to next comments pages. 
'; file='/wp-includes/link-template.php, line: 1816'; params='@param string $label Optional. Label for link text.  
@param int $max_page Optional. Max page.  '; since='2.7.0 '; type='function';}, 
	{name='next_image_link'; match='next_image_link'; definition='next_image_link($size=\'thumbnail\', $text=false)'; description='Display next image link that has the same post parent. 
'; file='/wp-includes/media.php, line: 898'; params='@param string $size Optional, default is \'thumbnail\'. Size of image, either array or string. 0 or \'none\' will default to post_title or $text;  
@param string $text Optional, default is false. If included, link will reflect $text variable.  '; return='string HTML content. '; since='2.5.0 '; type='function';}, 
	{name='next_post'; match='next_post'; definition='next_post($format=\'%\', $next=\'next post: \', $title=\'yes\', $in_same_cat=\'no\', $limitnext=1, $excluded_categories=\'\')'; description='Prints link to the next post. 
@see next_post_link() '; file='/wp-includes/deprecated.php, line: 173'; params='@param string $format  
@param string $next  
@param string $title  
@param string $in_same_cat  
@param int $limitnext  
@param string $excluded_categories  '; since='0.71 '; type='function';}, 
	{name='next_post_link'; match='next_post_link'; definition='next_post_link($format=\'%link &raquo;\', $link=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display next post link that is adjacent to the current post. 
'; file='/wp-includes/link-template.php, line: 1426'; params='@param string $format Optional. Link anchor format.  
@param string $link Optional. Link permalink format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='1.5.0 '; type='function';}, 
	{name='next_post_rel_link'; match='next_post_rel_link'; definition='next_post_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display relational link for the next post adjacent to the current post. 
'; file='/wp-includes/link-template.php, line: 1229'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='2.8.0 '; type='function';}, 
	{name='next_posts'; match='next_posts'; definition='next_posts($max_page=0, $echo=true)'; description='Display or return the next posts pages link. 
'; file='/wp-includes/link-template.php, line: 1564'; params='@param int $max_page Optional. Max pages.  
@param boolean $echo Optional. Echo or return;  '; since='0.71 '; type='function';}, 
	{name='next_posts_link'; match='next_posts_link'; definition='next_posts_link($label=null, $max_page=0)'; description='Display the next posts pages link. 

'; file='/wp-includes/link-template.php, line: 1611'; params='@param string $label Content for link text.  
@param int $max_page Optional. Max pages.  '; since='0.71 '; uses='get_next_posts_link()'; type='function';}, 
	{name='next_widget_id_number'; match='next_widget_id_number'; definition='next_widget_id_number($id_base)'; description=''; file='/wp-admin/includes/widgets.php, line: 113'; type='function';}, 
	{name='no_update_actions'; match='no_update_actions'; definition='no_update_actions($actions)'; description=''; file='/wp-admin/update-core.php, line: 392'; type='function';}, 
	{name='nocache_headers'; match='nocache_headers'; definition='nocache_headers()'; description='Sets the headers to prevent caching for the different browsers. 
Different browsers support different nocache headers, so several headers must be sent so that all of them get the point that no caching should occur. 
'; file='/wp-includes/functions.php, line: 1713'; since='2.0.0 '; uses='wp_get_nocache_headers() '; type='function';}, 
	{name='noindex'; match='noindex'; definition='noindex()'; description='Display a noindex meta tag if required by the blog configuration. 
If a blog is marked as not being public then the noindex meta tag will be output to tell web robots not to index the page content. 
'; file='/wp-includes/general-template.php, line: 1702'; since='2.1.0 '; type='function';}, 
	{name='normalize_whitespace'; match='normalize_whitespace'; definition='normalize_whitespace($str)'; description=''; file='/wp-includes/formatting.php, line: 2812'; type='function';}, 
	{name='number_format_i18n'; match='number_format_i18n'; definition='number_format_i18n($number, $decimals=0)'; description='Convert integer number to format based on the locale. 
'; file='/wp-includes/functions.php, line: 153'; params='@param int $number The number to convert based on locale.  
@param int $decimals Precision of the number of decimal places.  '; return='string Converted number in string format. '; since='2.3.0 '; type='function';}, 
	{name='option_update_filter'; match='option_update_filter'; definition='option_update_filter($options)'; description='{ '; file='/wp-admin/includes/plugin.php, line: 1644'; type='function';}, 
	{name='page_attributes_meta_box'; match='page_attributes_meta_box'; definition='page_attributes_meta_box($post)'; description='Display page attributes form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 556'; params='@param object $post  '; since='2.7.0 '; type='function';}, 
	{name='page_template_dropdown'; match='page_template_dropdown'; definition='page_template_dropdown($default=\'\')'; description='{ '; file='/wp-admin/includes/template.php, line: 658'; type='function';}, 
	{name='paginate_comments_links'; match='paginate_comments_links'; definition='paginate_comments_links($args=array())'; description='Create pagination links for the comments on the current post. 
@see paginate_links() '; file='/wp-includes/link-template.php, line: 1865'; params='@param string array $args Optional args. See paginate_links.  '; return='string Markup for pagination links. '; since='2.7.0 '; type='function';}, 
	{name='paginate_links'; match='paginate_links'; definition='paginate_links($args=\'\')'; description='Retrieve paginated link for archive post pages. 
Technically, the function can be used to create paginated link list for any area. The &apos;base&apos; argument is used to reference the url, which will be used to create the paginated links. The &apos;format&apos; argument is then used for replacing the page number. It is however, most likely and by default, to be used on the archive post pages. 
The &apos;type&apos; argument controls format of the returned value. The default is &apos;plain&apos;, which is just a string with the links separated by a newline character. The other possible values are either &apos;array&apos; or &apos;list&apos;. The &apos;array&apos; value will return an array of the paginated link list to offer full control of display. The &apos;list&apos; value will place all of the paginated links in an unordered HTML list. 
The &apos;total&apos; argument is the total amount of pages and is an integer. The &apos;current&apos; argument is the current page number and is also an integer. 
An example of the &apos;base&apos; argument is &quot;http://example.com/all_posts.php%_%&quot; and the &apos;_%&apos; is required. The &apos;_%&apos; will be replaced by the contents of in the &apos;format&apos; argument. An example for the &apos;format&apos; argument is &quot;?page=%#%&quot; and the &apos;%#%&apos; is also required. The &apos;%#%&apos; will be replaced with the page number. 
You can include the previous and next links in the list by setting the &apos;prev_next&apos; argument to true, which it is by default. You can set the previous text, by using the &apos;prev_text&apos; argument. You can set the next text by setting the &apos;next_text&apos; argument. 
If the &apos;show_all&apos; argument is set to true, then it will show all of the pages instead of a short list of the pages near the current page. By default, the &apos;show_all&apos; is set to false and controlled by the &apos;end_size&apos; and &apos;mid_size&apos; arguments. The &apos;end_size&apos; argument is how many numbers on either the start and the end list edges, by default is 1. The &apos;mid_size&apos; argument is how many numbers to either side of current page, but not including current page. 
It is possible to add query vars to the link by using the &apos;add_args&apos; argument and see <code>add_query_arg()</code> for more information. 
'; file='/wp-includes/general-template.php, line: 1961'; params='@param string array $args Optional. Override defaults.  '; return='array|string String of page links or array of page links. '; since='2.1.0 '; type='function';}, 
	{name='parent_dropdown'; match='parent_dropdown'; definition='parent_dropdown($default=0, $parent=0, $level=0)'; description='{ '; file='/wp-admin/includes/template.php, line: 680'; type='function';}, 
	{name='parent_post_rel_link'; match='parent_post_rel_link'; definition='parent_post_rel_link($title=\'%title\')'; description='Display relational link for parent item 
'; file='/wp-includes/link-template.php, line: 1398'; since='2.8.0 '; type='function';}, 
	{name='path_is_absolute'; match='path_is_absolute'; definition='path_is_absolute($path)'; description='Test if a give filesystem path is absolute (&apos;/foo/bar&apos;, &apos;c:&apos;). 
'; file='/wp-includes/functions.php, line: 2115'; params='@param string $path File path  '; return='bool True if path is absolute, false is not absolute. '; since='2.5.0 '; type='function';}, 
	{name='path_join'; match='path_join'; definition='path_join($base, $path)'; description='Join two filesystem paths together (e.g. &apos;give me $path relative to $base&apos;). 
If the $path is absolute, then it the full path is returned. 
'; file='/wp-includes/functions.php, line: 2142'; params='@param string $base  
@param string $path  '; return='string The path with the base or absolute path. '; since='2.5.0 '; type='function';}, 
	{name='permalink_anchor'; match='permalink_anchor'; definition='permalink_anchor($mode=\'id\')'; description='Display permalink anchor for current post. 
The permalink mode title will use the post title for the &apos;a&apos; element &apos;id&apos; attribute. The id mode uses &apos;post-&apos; with the post ID for the &apos;id&apos; attribute. 
'; file='/wp-includes/link-template.php, line: 57'; params='@param string $mode Permalink mode can be either \'title\', \'id\', or default, which is \'id\'.  '; since='0.71 '; type='function';}, 
	{name='permalink_link'; match='permalink_link'; definition='permalink_link()'; description='Print the permalink of the current post in the loop. 
@see the_permalink() '; file='/wp-includes/deprecated.php, line: 862'; since='0.71 '; type='function';}, 
	{name='permalink_single_rss'; match='permalink_single_rss'; definition='permalink_single_rss($deprecated=\'\')'; description='Print the permalink to the RSS feed. 
@see the_permalink_rss() '; file='/wp-includes/deprecated.php, line: 877'; params='@param string $deprecated  '; since='0.71 '; type='function';}, 
	{name='phpmailerException::errorMessage'; match='errorMessage'; definition='errorMessage()'; description=''; file='/wp-includes/class-phpmailer.php, line: 2315'; type='method';}, 
	{name='pingback'; match='pingback'; definition='pingback($content, $post_ID)'; description='Pings back the links found in a post. 

'; file='/wp-includes/comment.php, line: 1767'; params='@param string $content Post content to check for links.  
@param int $post_ID Post ID.  '; since='0.71 '; uses='$wp_version 
'; type='function';}, 
	{name='pings_open'; match='pings_open'; definition='pings_open($post_id=NULL)'; description='Whether the current post is open for pings. 

'; file='/wp-includes/comment-template.php, line: 789'; params='@param int $post_id An optional post ID to check instead of the current post.  '; return='bool True if pings are accepted '; since='1.5.0 '; uses='$post'; type='function';}, 
	{name='plugin_basename'; match='plugin_basename'; definition='plugin_basename($file)'; description=''; file='/wp-includes/plugin.php, line: 562'; type='function';}, 
	{name='plugin_dir_path'; match='plugin_dir_path'; definition='plugin_dir_path($file)'; description=''; file='/wp-includes/plugin.php, line: 583'; type='function';}, 
	{name='plugin_dir_url'; match='plugin_dir_url'; definition='plugin_dir_url($file)'; description=''; file='/wp-includes/plugin.php, line: 596'; type='function';}, 
	{name='plugins_url'; match='plugins_url'; definition='plugins_url($path=\'\', $plugin=\'\')'; description=''; file='/wp-includes/link-template.php, line: 2126'; type='function';}, 
	{name='populate_network'; match='populate_network'; definition='populate_network($network_id=1, $domain=\'\', $email=\'\', $site_name=\'\', $path=\'/\', $subdomain_install=false)'; description='populate network settings 
'; file='/wp-admin/includes/schema.php, line: 635'; params='@param int $network_id id of network to populate  '; return='bool|WP_Error True on success, or <code>WP_Error</code> on warning (with the install otherwise successful, so the error code must be checked) or failure. '; since='3.0.0 '; type='function';}, 
	{name='populate_options'; match='populate_options'; definition='populate_options()'; description='Create WordPress options and set the default values. 
'; file='/wp-admin/includes/schema.php, line: 184'; since='1.5.0 '; uses='$wpdb 
$wp_db_version '; type='function';}, 
	{name='populate_roles'; match='populate_roles'; definition='populate_roles()'; description='Execute WordPress role creation for the various WordPress versions. 
'; file='/wp-admin/includes/schema.php, line: 376'; since='2.0.0 '; type='function';}, 
	{name='populate_roles_160'; match='populate_roles_160'; definition='populate_roles_160()'; description='Create the roles for WordPress 2.0 
'; file='/wp-admin/includes/schema.php, line: 392'; since='2.0.0 '; type='function';}, 
	{name='populate_roles_210'; match='populate_roles_210'; definition='populate_roles_210()'; description='Create and modify WordPress roles for WordPress 2.1. 
'; file='/wp-admin/includes/schema.php, line: 497'; since='2.1.0 '; type='function';}, 
	{name='populate_roles_230'; match='populate_roles_230'; definition='populate_roles_230()'; description='Create and modify WordPress roles for WordPress 2.3. 
'; file='/wp-admin/includes/schema.php, line: 544'; since='2.3.0 '; type='function';}, 
	{name='populate_roles_250'; match='populate_roles_250'; definition='populate_roles_250()'; description='Create and modify WordPress roles for WordPress 2.5. 
'; file='/wp-admin/includes/schema.php, line: 557'; since='2.5.0 '; type='function';}, 
	{name='populate_roles_260'; match='populate_roles_260'; definition='populate_roles_260()'; description='Create and modify WordPress roles for WordPress 2.6. 
'; file='/wp-admin/includes/schema.php, line: 570'; since='2.6.0 '; type='function';}, 
	{name='populate_roles_270'; match='populate_roles_270'; definition='populate_roles_270()'; description='Create and modify WordPress roles for WordPress 2.7. 
'; file='/wp-admin/includes/schema.php, line: 584'; since='2.7.0 '; type='function';}, 
	{name='populate_roles_280'; match='populate_roles_280'; definition='populate_roles_280()'; description='Create and modify WordPress roles for WordPress 2.8. 
'; file='/wp-admin/includes/schema.php, line: 598'; since='2.8.0 '; type='function';}, 
	{name='populate_roles_300'; match='populate_roles_300'; definition='populate_roles_300()'; description='Create and modify WordPress roles for WordPress 3.0. 
'; file='/wp-admin/includes/schema.php, line: 611'; since='3.0.0 '; type='function';}, 
	{name='popuplinks'; match='popuplinks'; definition='popuplinks($text)'; description='Adds a element attributes to open links in new windows. 
Comment text in popup windows should be filtered through this. Right now it&apos;s a moderately dumb function, ideally it would detect whether a target or rel attribute was already there and adjust its actions accordingly. 
'; file='/wp-includes/formatting.php, line: 1704'; params='@param string $text Content to replace links to open in a new window.  '; return='string Content that has filtered links. '; since='0.71 '; type='function';}, 
	{name='post_author_meta_box'; match='post_author_meta_box'; definition='post_author_meta_box($post)'; description='Display form field with list of authors. 
'; file='/wp-admin/includes/meta-boxes.php, line: 521'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_categories_meta_box'; match='post_categories_meta_box'; definition='post_categories_meta_box($post, $box)'; description='Display post categories form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 314'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_class'; match='post_class'; definition='post_class($class=\'\', $post_id=null)'; description='Display the classes for the post div. 
'; file='/wp-includes/post-template.php, line: 296'; params='@param string array $class One or more classes to add to the class list.  
@param int $post_id An optional post ID.  '; since='2.7.0 '; type='function';}, 
	{name='post_comment_meta_box'; match='post_comment_meta_box'; definition='post_comment_meta_box($post)'; description='Display comments for post. 
'; file='/wp-admin/includes/meta-boxes.php, line: 474'; params='@param object $post  '; since='2.8.0 '; type='function';}, 
	{name='post_comment_meta_box_thead'; match='post_comment_meta_box_thead'; definition='post_comment_meta_box_thead($result)'; description='Display comments for post table header 
'; file='/wp-admin/includes/meta-boxes.php, line: 462'; params='@param array $result table header rows  '; return='array '; since='3.0.0 '; type='function';}, 
	{name='post_comment_status_meta_box'; match='post_comment_status_meta_box'; definition='post_comment_status_meta_box($post)'; description='Display comments status form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 443'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_comments_feed_link'; match='post_comments_feed_link'; definition='post_comments_feed_link($link_text=\'\', $post_id=\'\', $feed=\'\')'; description=''; file='/wp-includes/link-template.php, line: 514'; type='function';}, 
	{name='post_custom'; match='post_custom'; definition='post_custom($key=\'\')'; description='Retrieve post custom meta data field. 
'; file='/wp-includes/post-template.php, line: 717'; params='@param string $key Meta data key name.  '; return='bool|string|array Array of values or single value, if only one element exists. False will be returned if key does not exist. '; since='1.5.0 '; type='function';}, 
	{name='post_custom_meta_box'; match='post_custom_meta_box'; definition='post_custom_meta_box($post)'; description='Display custom fields form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 422'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_excerpt_meta_box'; match='post_excerpt_meta_box'; definition='post_excerpt_meta_box($post)'; description='Display post excerpt form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 380'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_exists'; match='post_exists'; definition='post_exists($title, $content=\'\', $date=\'\')'; description='Determine if a post exists based on title, content, and date 
'; file='/wp-admin/includes/post.php, line: 495'; params='@param string $title Post title  
@param string $content Optional post content  
@param string $date Optional post date  '; return='int Post ID if post exists, 0 otherwise. '; since='2.0.0 '; type='function';}, 
	{name='post_format_meta_box'; match='post_format_meta_box'; definition='post_format_meta_box($post, $box)'; description='Display post format form elements. 
'; file='/wp-admin/includes/meta-boxes.php, line: 243'; params='@param object $post  '; since='3.1.0 '; type='function';}, 
	{name='post_password_required'; match='post_password_required'; definition='post_password_required($post=null)'; description='Whether post requires password and correct password has been provided. 
'; file='/wp-includes/post-template.php, line: 556'; params='@param int object $post An optional post. Global $post used if not provided.  '; return='bool false if a password is not required or the correct password cookie is present, true otherwise. '; since='2.7.0 '; type='function';}, 
	{name='post_permalink'; match='post_permalink'; definition='post_permalink($post_id=0, $deprecated=\'\')'; description='Retrieve permalink from post ID. 
'; file='/wp-includes/link-template.php, line: 219'; params='@param int $post_id Optional. Post ID.  
@param mixed $deprecated Not used.  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='post_preview'; match='post_preview'; definition='post_preview()'; description=''; file='/wp-admin/includes/post.php, line: 1367'; type='function';}, 
	{name='post_reply_link'; match='post_reply_link'; definition='post_reply_link($args=array(), $post=null)'; description='Displays the HTML content for reply to post link. @see get_post_reply_link() '; file='/wp-includes/comment-template.php, line: 1127'; params='@param array $args Optional. Override default options.  
@param int object $post Optional. Post that the comment is going to be displayed on.  '; return='string|bool|null Link to show comment form, if successful. False, if comments are closed. '; since='2.7.0 '; type='function';}, 
	{name='post_revisions_meta_box'; match='post_revisions_meta_box'; definition='post_revisions_meta_box($post)'; description='Display list of revisions. 
'; file='/wp-admin/includes/meta-boxes.php, line: 542'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_slug_meta_box'; match='post_slug_meta_box'; definition='post_slug_meta_box($post)'; description='Display slug form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 507'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_submit_meta_box'; match='post_submit_meta_box'; definition='post_submit_meta_box($post)'; description='Display post submit form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 12'; params='@param object $post  '; since='2.7.0 '; type='function';}, 
	{name='post_tags_meta_box'; match='post_tags_meta_box'; definition='post_tags_meta_box($post, $box)'; description='Display post tags form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 272'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_thumbnail_meta_box'; match='post_thumbnail_meta_box'; definition='post_thumbnail_meta_box()'; description='Display post thumbnail meta box. 
'; file='/wp-admin/includes/meta-boxes.php, line: 910'; since='2.9.0 '; type='function';}, 
	{name='post_trackback_meta_box'; match='post_trackback_meta_box'; definition='post_trackback_meta_box($post)'; description='Display trackback links form fields. 
'; file='/wp-admin/includes/meta-boxes.php, line: 395'; params='@param object $post  '; since='2.6.0 '; type='function';}, 
	{name='post_type_archive_title'; match='post_type_archive_title'; definition='post_type_archive_title($prefix=\'\', $display=true)'; description='Display or retrieve title for a post type archive. 
This is optimized for archive.php and archive-{$post_type}.php template files for displaying the title of the post type. 
'; file='/wp-includes/general-template.php, line: 660'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='3.1.0 '; type='function';}, 
	{name='post_type_exists'; match='post_type_exists'; definition='post_type_exists($post_type)'; description='Checks if a post type is registered. 

'; file='/wp-includes/post.php, line: 781'; params='@param string $post_type Post type name  '; return='bool Whether post type is registered. '; since='3.0.0 '; uses='get_post_type_object()'; type='function';}, 
	{name='post_type_supports'; match='post_type_supports'; definition='post_type_supports($post_type, $feature)'; description='Checks a post type&apos;s support for a given feature 
'; file='/wp-includes/post.php, line: 1293'; params='@param string $post_type The post type being checked  
@param string $feature the feature being checked  '; return='boolean '; since='3.0.0 '; type='function';}, 
	{name='postbox_classes'; match='postbox_classes'; definition='postbox_classes($id, $page)'; description='Returns the list of classes to be used by a metabox 
'; file='/wp-admin/includes/post.php, line: 1067'; params='@param unknown_type $id  
@param unknown_type $page  '; return='unknown '; since='2.5.0 '; uses='get_user_option() '; type='function';}, 
	{name='posts_nav_link'; match='posts_nav_link'; definition='posts_nav_link($sep=\'\', $prelabel=\'\', $nxtlabel=\'\')'; description='Display post pages link navigation for previous and next pages. 
'; file='/wp-includes/link-template.php, line: 1733'; params='@param string $sep Optional. Separator for posts navigation links.  
@param string $prelabel Optional. Label for previous pages.  
@param string $nxtlabel Optional Label for next pages.  '; since='0.71 '; type='function';}, 
	{name='prep_atom_text_construct'; match='prep_atom_text_construct'; definition='prep_atom_text_construct($data)'; description=''; file='/wp-includes/feed.php, line: 452'; type='function';}, 
	{name='prepend_attachment'; match='prepend_attachment'; definition='prepend_attachment($content)'; description='Wrap attachment in &lt; 
&gt; element before content. 

'; file='/wp-includes/post-template.php, line: 1186'; params='@param string $content  '; return='string '; since='2.0.0 '; uses='apply_filters() Calls \'prepend_attachment\' hook on HTML content.'; type='function';}, 
	{name='prev_post_rel_link'; match='prev_post_rel_link'; definition='prev_post_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display relational link for the previous post adjacent to the current post. 
'; file='/wp-includes/link-template.php, line: 1242'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='2.8.0 '; type='function';}, 
	{name='preview_theme'; match='preview_theme'; definition='preview_theme()'; description='Start preview theme output buffer. 
Will only preform task if the user has permissions and template and preview query variables exist. 
'; file='/wp-includes/theme.php, line: 1139'; since='2.6.0 '; type='function';}, 
	{name='preview_theme_ob_filter'; match='preview_theme_ob_filter'; definition='preview_theme_ob_filter($content)'; description='Callback function for ob_start() to capture all links in the theme. 

'; file='/wp-includes/theme.php, line: 1204'; params='@param string $content  '; return='string '; since='2.6.0 '; type='function';}, 
	{name='preview_theme_ob_filter_callback'; match='preview_theme_ob_filter_callback'; definition='preview_theme_ob_filter_callback($matches)'; description='Manipulates preview theme links in order to control and maintain location. 
Callback function for preg_replace_callback() to accept and filter matches. 

'; file='/wp-includes/theme.php, line: 1219'; params='@param array $matches  '; return='string '; since='2.6.0 '; type='function';}, 
	{name='previous_comments_link'; match='previous_comments_link'; definition='previous_comments_link($label=\'\')'; description='Display the previous comments page link. 
'; file='/wp-includes/link-template.php, line: 1852'; params='@param string $label Optional. Label for comments link text.  '; since='2.7.0 '; type='function';}, 
	{name='previous_image_link'; match='previous_image_link'; definition='previous_image_link($size=\'thumbnail\', $text=false)'; description='Display previous image link that has the same post parent. 
'; file='/wp-includes/media.php, line: 886'; params='@param string $size Optional, default is \'thumbnail\'. Size of image, either array or string. 0 or \'none\' will default to post_title or $text;  
@param string $text Optional, default is false. If included, link will reflect $text variable.  '; return='string HTML content. '; since='2.5.0 '; type='function';}, 
	{name='previous_post'; match='previous_post'; definition='previous_post($format=\'%\', $previous=\'previous post: \', $title=\'yes\', $in_same_cat=\'no\', $limitprev=1, $excluded_categories=\'\')'; description='Prints link to the previous post. 
@see previous_post_link() '; file='/wp-includes/deprecated.php, line: 136'; params='@param string $format  
@param string $previous  
@param string $title  
@param string $in_same_cat  
@param int $limitprev  
@param string $excluded_categories  '; since='1.5 '; type='function';}, 
	{name='previous_post_link'; match='previous_post_link'; definition='previous_post_link($format=\'&laquo;%link\', $link=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display previous post link that is adjacent to the current post. 
'; file='/wp-includes/link-template.php, line: 1412'; params='@param string $format Optional. Link anchor format.  
@param string $link Optional. Link permalink format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='1.5.0 '; type='function';}, 
	{name='previous_posts'; match='previous_posts'; definition='previous_posts($echo=true)'; description='Display or return the previous posts pages link. 
'; file='/wp-includes/link-template.php, line: 1644'; params='@param boolean $echo Optional. Echo or return;  '; since='0.71 '; type='function';}, 
	{name='previous_posts_link'; match='previous_posts_link'; definition='previous_posts_link($label=null)'; description='Display the previous posts page link. 

'; file='/wp-includes/link-template.php, line: 1681'; params='@param string $label Optional. Previous page link text.  '; since='0.71 '; uses='get_previous_posts_link()'; type='function';}, 
	{name='print_admin_styles'; match='print_admin_styles'; definition='print_admin_styles()'; description=''; file='/wp-includes/script-loader.php, line: 741'; type='function';}, 
	{name='print_column_headers'; match='print_column_headers'; definition='print_column_headers($screen, $id=true)'; description='Prints column headers for a particular screen. 
'; file='/wp-admin/includes/list-table.php, line: 65'; since='2.7.0 '; type='function';}, 
	{name='print_footer_scripts'; match='print_footer_scripts'; definition='print_footer_scripts()'; description='Prints the scripts that were queued for the footer on admin pages. 
'; file='/wp-includes/script-loader.php, line: 654'; since='2.8 '; type='function';}, 
	{name='print_head_scripts'; match='print_head_scripts'; definition='print_head_scripts()'; description='Prints the script queue in the HTML head on admin pages. 
Postpones the scripts that were queued for the footer. print_footer_scripts() is called in the footer to print these scripts. 
@see wp_print_scripts() '; file='/wp-includes/script-loader.php, line: 628'; since='2.8 '; type='function';}, 
	{name='privacy_ping_filter'; match='privacy_ping_filter'; definition='privacy_ping_filter($sites)'; description='Check whether blog is public before returning sites. 
'; file='/wp-includes/comment.php, line: 1841'; params='@param mixed $sites Will return if blog is public, will not return if not public.  '; return='mixed Empty string if blog is not public, returns $sites, if site is public. '; since='2.1.0 '; type='function';}, 
	{name='query_posts'; match='query_posts'; definition='query_posts($query)'; description='Set up The Loop with query parameters. 
This will override the current WordPress Loop and shouldn&apos;t be used more than once. This must not be used within the WordPress Loop. 

'; file='/wp-includes/query.php, line: 90'; params='@param string $query  '; return='array List of posts '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='recurse_dirsize'; match='recurse_dirsize'; definition='recurse_dirsize($directory)'; description='Get the size of a directory recursively. 
Used by get_dirsize() to get a directory&apos;s size when it contains other directories. 
'; file='/wp-includes/ms-functions.php, line: 1520'; params='@param string $directory  '; return='int '; since='MU '; type='function';}, 
	{name='redirect_canonical'; match='redirect_canonical'; definition='redirect_canonical($requested_url=null, $do_redirect=true)'; description='Redirects incoming links to the proper URL based on the site url. 
Search engines consider www.somedomain.com and somedomain.com to be two different URLs when they both go to the same location. This SEO enhancement prevents penality for duplicate content by redirecting all incoming links to one or the other. 
Prevents redirection for feeds, trackbacks, searches, comment popup, and admin URLs. Does not redirect on IIS, page/post previews, and on form data. 
Will also attempt to find the correct link when a user enters a URL that does not exist based on exact WordPress query. Will instead try to parse the URL or query in an attempt to figure the correct page to go to. 

'; file='/wp-includes/canonical.php, line: 37'; params='@param string $requested_url Optional. The URL that was requested, used to figure if redirect is needed.  
@param bool $do_redirect Optional. Redirect to the new URL.  '; return='null|false|string Null, if redirect not needed. False, if redirect not needed or the string of the URL '; since='2.3.0 '; uses='$wp_rewrite 
$is_IIS'; type='function';}, 
	{name='redirect_guess_404_permalink'; match='redirect_guess_404_permalink'; definition='redirect_guess_404_permalink()'; description='Attempts to guess correct post based on query vars. 

'; file='/wp-includes/canonical.php, line: 407'; return='bool|string Returns False, if it can&apos;t find post, returns correct location on success. '; since='2.3.0 '; uses='$wpdb'; type='function';}, 
	{name='redirect_post'; match='redirect_post'; definition='redirect_post($post_id=\'\')'; description='Redirect to previous page. 
'; file='/wp-admin/post.php, line: 53'; params='@param int $post_id Optional. Post ID.  '; type='function';}, 
	{name='redirect_this_site'; match='redirect_this_site'; definition='redirect_this_site($deprecated=\'\')'; description='Ensure that the current site&apos;s domain is listed in the allowed redirect host list. 
@see wp_validate_redirect() '; file='/wp-includes/ms-functions.php, line: 1733'; return='array The current site&apos;s domain '; since='MU '; type='function';}, 
	{name='refresh_blog_details'; match='refresh_blog_details'; definition='refresh_blog_details($blog_id)'; description='Clear the blog details cache. 
'; file='/wp-includes/ms-blogs.php, line: 249'; params='@param int $blog_id Blog ID  '; since='MU '; type='function';}, 
	{name='refresh_user_details'; match='refresh_user_details'; definition='refresh_user_details($id)'; description=''; file='/wp-admin/includes/ms.php, line: 458'; type='function';}, 
	{name='register_activation_hook'; match='register_activation_hook'; definition='register_activation_hook($file, $function)'; description=''; file='/wp-includes/plugin.php, line: 619'; type='function';}, 
	{name='register_admin_color_schemes'; match='register_admin_color_schemes'; definition='register_admin_color_schemes()'; description='Registers the default Admin color schemes 
'; file='/wp-includes/general-template.php, line: 2076'; since='3.0.0 '; type='function';}, 
	{name='register_column_headers'; match='register_column_headers'; definition='register_column_headers($screen, $columns)'; description='Register column headers for a particular screen. 
@see get_column_headers(), print_column_headers(), get_hidden_columns() '; file='/wp-admin/includes/list-table.php, line: 56'; params='@param string $screen The handle for the screen to add help to. This is usually the hook name returned by the add_&lowast;_page() functions.  
@param array $columns An array of columns with column IDs as the keys and translated column names as the values  '; since='2.7.0 '; type='function';}, 
	{name='register_deactivation_hook'; match='register_deactivation_hook'; definition='register_deactivation_hook($file, $function)'; description=''; file='/wp-includes/plugin.php, line: 644'; type='function';}, 
	{name='register_default_headers'; match='register_default_headers'; definition='register_default_headers($headers)'; description='Register a selection of default headers to be displayed by the custom header admin UI. 
'; file='/wp-includes/theme.php, line: 1617'; params='@param array $headers Array of headers keyed by a string id. The ids point to arrays containing \'url\', \'thumbnail_url\', and \'description\' keys.  '; since='3.0.0 '; type='function';}, 
	{name='register_nav_menu'; match='register_nav_menu'; definition='register_nav_menu($location, $description)'; description='Register a navigation menu for a theme. 
'; file='/wp-includes/nav-menu.php, line: 106'; params='@param string $location Menu location identifier, like a slug.  
@param string $description Menu location descriptive text.  '; since='3.0.0 '; type='function';}, 
	{name='register_nav_menus'; match='register_nav_menus'; definition='register_nav_menus($locations=array())'; description='Register navigation menus for a theme. 
'; file='/wp-includes/nav-menu.php, line: 73'; params='@param array $locations Associative array of menu location identifiers (like a slug) and descriptive text.  '; since='3.0.0 '; type='function';}, 
	{name='register_new_user'; match='register_new_user'; definition='register_new_user($user_login, $user_email)'; description='Handles registering a new user. 
'; file='/wp-login.php, line: 290'; params='@param string $user_login User\'s username for logging in  
@param string $user_email User\'s email address to send password and add  '; return='int|WP_Error Either user&apos;s ID or error on failure. '; type='function';}, 
	{name='register_post_status'; match='register_post_status'; definition='register_post_status($post_status, $args=array())'; description=''; file='/wp-includes/post.php, line: 652'; type='function';}, 
	{name='register_post_type'; match='register_post_type'; definition='register_post_type($post_type, $args=array())'; description='Register a post type. Do not use before init. 
A function for creating or modifying a post type based on the parameters given. The function will accept an array (second optional parameter), along with a string for the post type name. 
Optional $args contents: 
label - Name of the post type shown in the menu. Usually plural. If not set, labels[&apos;name&apos;] will be used. description - A short descriptive summary of what the post type is. Defaults to blank. public - Whether posts of this type should be shown in the admin UI. Defaults to false. exclude_from_search - Whether to exclude posts with this post type from search results. Defaults to true if the type is not public, false if the type is public. publicly_queryable - Whether post_type queries can be performed from the front page. Defaults to whatever public is set as. show_ui - Whether to generate a default UI for managing this post type. Defaults to true if the type is public, false if the type is not public. show_in_menu - Where to show the post type in the admin menu. True for a top level menu, false for no menu, or can be a top level page like &apos;tools.php&apos; or &apos;edit.php?post_type=page&apos;. show_ui must be true. menu_position - The position in the menu order the post type should appear. Defaults to the bottom. menu_icon - The url to the icon to be used for this menu. Defaults to use the posts icon. capability_type - The string to use to build the read, edit, and delete capabilities. Defaults to &apos;post&apos;. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array(&apos;story&apos;, &apos;stories&apos;). capabilities - Array of capabilities for this post type. By default the capability_type is used as a base to construct capabilities. You can see accepted values in <code>get_post_type_capabilities()</code> . map_meta_cap - Whether to use the internal default meta capability handling. Defaults to false. hierarchical - Whether the post type is hierarchical. Defaults to false. supports - An alias for calling add_post_type_support() directly. See <code>add_post_type_support()</code> for documentation. Defaults to none. register_meta_box_cb - Provide a callback function that will be called when setting up the meta boxes for the edit form. Do remove_meta_box() and add_meta_box() calls in the callback. taxonomies - An array of taxonomy identifiers that will be registered for the post type. Default is no taxonomies. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type(). labels - An array of labels for this post type. By default post labels are used for non-hierarchical types and page labels for hierarchical ones. You can see accepted values in <code>get_post_type_labels()</code> . permalink_epmask - The default rewrite endpoint bitmasks. has_archive - True to enable post type archives. Will generate the proper rewrite rules if rewrite is enabled. rewrite - false to prevent rewrite. Defaults to true. Use array(&apos;slug&apos;=&gt;$slug) to customize permastruct; default will use $post_type as slug. Other options include &apos;with_front&apos;, &apos;feeds&apos;, and &apos;pages&apos;. query_var - false to prevent queries, or string to value of the query var to use for this post type can_export - true allows this post type to be exported. show_in_nav_menus - true makes this post type available for selection in navigation menus. _builtin - true if this post type is a native or &quot;built-in&quot; post_type. THIS IS FOR INTERNAL USE ONLY! _edit_link - URL segement to use for edit link of this post type. THIS IS FOR INTERNAL USE ONLY! 

'; file='/wp-includes/post.php, line: 910'; params='@param string $post_type Name of the post type.  
@param array string $args See above description.  '; return='object|WP_Error the registered post type object, or an error object '; since='2.9.0 '; uses='$wp_post_types Inserts new post type object into the list'; type='function';}, 
	{name='register_setting'; match='register_setting'; definition='register_setting($option_group, $option_name, $sanitize_callback=\'\')'; description='Register a setting and its sanitization callback 
'; file='/wp-admin/includes/plugin.php, line: 1598'; params='@param string $option_group A settings group name. Should correspond to a whitelisted option key name. Default whitelisted option key names include \"general,\" \"discussion,\" and \"reading,\" among others.  
@param string $option_name The name of an option to sanitize and save.  
@param unknown_type $sanitize_callback A callback function that sanitizes the option\'s value.  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='register_sidebar'; match='register_sidebar'; definition='register_sidebar($args=array())'; description='Builds the definition for a single sidebar and returns the ID. 
The $args parameter takes either a string or an array with &apos;name&apos; and &apos;id&apos; contained in either usage. It will be noted that the values will be applied to all sidebars, so if creating more than one, it will be advised to allow for WordPress to create the defaults for you. 
Example for string would be &apos;name=whatever;id=whatever1&apos; and for the array it would be array( &apos;name&apos; =&gt; &apos;whatever&apos;, &apos;id&apos; =&gt; &apos;whatever1&apos;) . 
name - The name of the sidebar, which presumably the title which will be displayed. id - The unique identifier by which the sidebar will be called by. before_widget - The content that will prepended to the widgets when they are displayed. after_widget - The content that will be appended to the widgets when they are displayed. before_title - The content that will be prepended to the title when displayed. after_title - the content that will be appended to the title when displayed. 
Content is assumed to be HTML and should be formatted as such, but doesn&apos;t have to be. 

'; file='/wp-includes/widgets.php, line: 541'; params='@param string array $args Builds Sidebar based off of \'name\' and \'id\' values  '; return='string The sidebar id that was added. '; since='2.2.0 '; uses='$wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.'; type='function';}, 
	{name='register_sidebar_widget'; match='register_sidebar_widget'; definition='register_sidebar_widget($name, $output_callback, $classname=\'\')'; description='Register widget for sidebar with backwards compatibility. 
Allows $name to be an array that accepts either three elements to grab the first element and the third for the name or just uses the first element of the array for the name. 
Passes to <code>wp_register_sidebar_widget()</code> after argument list and backwards compatibility is complete. 
@see wp_register_sidebar_widget() '; file='/wp-includes/deprecated.php, line: 2169'; params='@param string int $name Widget ID.  
@param callback $output_callback Run when widget is called.  
@param string $classname Classname widget option.  
@param mixed $params mixed ... Widget parameters.  '; since='2.2.0 '; type='function';}, 
	{name='register_sidebars'; match='register_sidebars'; definition='register_sidebars($number=1, $args=array())'; description='Creates multiple sidebars. 
If you wanted to quickly create multiple sidebars for a theme or internally. This function will allow you to do so. If you don&apos;t pass the &apos;name&apos; and/or &apos;id&apos; in $args, then they will be built for you. 
The default for the name is &quot;Sidebar #&quot;, with &apos;#&apos; being replaced with the number the sidebar is currently when greater than one. If first sidebar, the name will be just &quot;Sidebar&quot;. The default for id is &quot;sidebar-&quot; followed by the number the sidebar creation is currently at. If the id is provided, and mutliple sidebars are being defined, the id will have &quot;-2&quot; appended, and so on. 
@see register_sidebar() The second parameter is documented by register_sidebar() and is the same here. 
'; file='/wp-includes/widgets.php, line: 477'; params='@param int $number Number of sidebars to create.  
@param string array $args Builds Sidebar based off of \'name\' and \'id\' values.  '; since='2.2.0 '; uses='parse_str() Converts a string to an array to be used in the rest of the function. 
register_sidebar() Sends single sidebar information [name, id] to this function to handle building the sidebar.'; type='function';}, 
	{name='register_taxonomy'; match='register_taxonomy'; definition='register_taxonomy($taxonomy, $object_type, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 294'; type='function';}, 
	{name='register_taxonomy_for_object_type'; match='register_taxonomy_for_object_type'; definition='register_taxonomy_for_object_type($taxonomy, $object_type)'; description=''; file='/wp-includes/taxonomy.php, line: 432'; type='function';}, 
	{name='register_theme_directory'; match='register_theme_directory'; definition='register_theme_directory($directory)'; description='Register a directory that contains themes. 
'; file='/wp-includes/theme.php, line: 549'; params='@param string $directory Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR  '; return='bool '; since='2.9.0 '; type='function';}, 
	{name='register_uninstall_hook'; match='register_uninstall_hook'; definition='register_uninstall_hook($file, $callback)'; description='Set the uninstallation hook for a plugin. 
Registers the uninstall hook that will be called when the user clicks on the uninstall link that calls for the plugin to uninstall itself. The link won&apos;t be active unless the plugin hooks into the action. 
The plugin should not run arbitrary code outside of functions, when registering the uninstall hook. In order to run using the hook, the plugin will have to be included, which means that any code laying outside of a function will be run during the uninstall process. The plugin should not hinder the uninstall process. 
If the plugin can not be written without running code within the plugin, then the plugin should create a file named &apos;uninstall.php&apos; in the base plugin folder. This file will be called, if it exists, during the uninstall process bypassing the uninstall hook. The plugin, when using the &apos;uninstall.php&apos; should always check for the &apos;WP_UNINSTALL_PLUGIN&apos; constant, before executing. 
'; file='/wp-includes/plugin.php, line: 674'; params='@param string $file  
@param callback $callback The callback to run when the hook is called. Must be a static method or function.  '; since='2.7 '; type='function';}, 
	{name='register_widget'; match='register_widget'; definition='register_widget($widget_class)'; description='Register a widget 
Registers a <code>WP_Widget</code> widget 
@see <code>WP_Widget</code> <code>WP_Widget_Factory</code> 
'; file='/wp-includes/widgets.php, line: 428'; params='@param string $widget_class The name of a class that extends  '; since='2.8.0 '; type='function';}, 
	{name='register_widget_control'; match='register_widget_control'; definition='register_widget_control($name, $control_callback, $width=\'\', $height=\'\')'; description='Registers widget control callback for customizing options. 
Allows $name to be an array that accepts either three elements to grab the first element and the third for the name or just uses the first element of the array for the name. 
Passes to <code>wp_register_widget_control()</code> after the argument list has been compiled. 
@see wp_register_widget_control() '; file='/wp-includes/deprecated.php, line: 2226'; params='@param int string $name Sidebar ID.  
@param callback $control_callback Widget control callback to display and process form.  
@param int $width Widget width.  
@param int $height Widget height.  '; since='2.2.0 '; type='function';}, 
	{name='rel_canonical'; match='rel_canonical'; definition='rel_canonical()'; description=''; file='/wp-includes/link-template.php, line: 2353'; type='function';}, 
	{name='remove_accents'; match='remove_accents'; definition='remove_accents($string)'; description='Converts all accent characters to ASCII characters. 
If there are no accent characters, then the string given is just returned. 
'; file='/wp-includes/formatting.php, line: 532'; params='@param string $string Text that might have accent characters  '; return='string Filtered string with replaced &quot;nice&quot; characters. '; since='1.2.1 '; type='function';}, 
	{name='remove_action'; match='remove_action'; definition='remove_action($tag, $function_to_remove, $priority=10, $accepted_args=1)'; description=''; file='/wp-includes/plugin.php, line: 526'; type='function';}, 
	{name='remove_all_actions'; match='remove_all_actions'; definition='remove_all_actions($tag, $priority=false)'; description='Remove all of the hooks from an action. 
'; file='/wp-includes/plugin.php, line: 539'; params='@param string $tag The action to remove hooks from.  
@param int $priority The priority number to remove them from.  '; return='bool True when finished. '; since='2.7 '; type='function';}, 
	{name='remove_all_filters'; match='remove_all_filters'; definition='remove_all_filters($tag, $priority=false)'; description='Remove all of the hooks from a filter. 
'; file='/wp-includes/plugin.php, line: 281'; params='@param string $tag The filter to remove hooks from.  
@param int $priority The priority number to remove.  '; return='bool True when finished. '; since='2.7 '; type='function';}, 
	{name='remove_all_shortcodes'; match='remove_all_shortcodes'; definition='remove_all_shortcodes()'; description='Clear all shortcodes. 
This function is simple, it clears all of the shortcode tags by replacing the shortcodes global by a empty array. This is actually a very efficient method for removing all shortcodes. 
'; file='/wp-includes/shortcodes.php, line: 124'; since='2.5 '; uses='$shortcode_tags '; type='function';}, 
	{name='remove_custom_background'; match='remove_custom_background'; definition='remove_custom_background()'; description='Remove custom background support. 
@see add_custom_background() '; file='/wp-includes/theme.php, line: 1733'; return='bool Whether support was removed. '; since='3.1.0 '; type='function';}, 
	{name='remove_custom_image_header'; match='remove_custom_image_header'; definition='remove_custom_image_header()'; description='Remove image header support. 
@see add_custom_image_header() '; file='/wp-includes/theme.php, line: 1593'; return='bool Whether support was removed. '; since='3.1.0 '; type='function';}, 
	{name='remove_editor_styles'; match='remove_editor_styles'; definition='remove_editor_styles()'; description='Removes all visual editor stylesheets. 
'; file='/wp-includes/theme.php, line: 1832'; return='bool True on success, false if there were no stylesheets to remove. '; since='3.1.0 '; type='function';}, 
	{name='remove_filter'; match='remove_filter'; definition='remove_filter($tag, $function_to_remove, $priority=10, $accepted_args=1)'; description=''; file='/wp-includes/plugin.php, line: 257'; type='function';}, 
	{name='remove_menu_page'; match='remove_menu_page'; definition='remove_menu_page($menu_slug)'; description='Remove a top level admin menu 
'; file='/wp-admin/includes/plugin.php, line: 1258'; params='@param string $menu_slug The slug of the menu  '; return='array|bool The removed menu on success, False if not found '; since='3.1.0 '; type='function';}, 
	{name='remove_meta_box'; match='remove_meta_box'; definition='remove_meta_box($id, $page, $context)'; description='Remove a meta box from an edit form. 
'; file='/wp-admin/includes/template.php, line: 993'; params='@param string $id String for use in the \'id\' attribute of tags.  
@param string $page The type of edit page on which to show the box (post, page, link).  
@param string $context The context within the page where the boxes should show (\'normal\', \'advanced\').  '; since='2.6.0 '; type='function';}, 
	{name='remove_option_update_handler'; match='remove_option_update_handler'; definition='remove_option_update_handler($option_group, $option_name, $sanitize_callback=\'\')'; description='Unregister a setting 
@see unregister_setting() '; file='/wp-admin/includes/deprecated.php, line: 160'; params='@param unknown_type $option_group  
@param unknown_type $option_name  
@param unknown_type $sanitize_callback  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='remove_option_whitelist'; match='remove_option_whitelist'; definition='remove_option_whitelist($del_options, $options=\'\')'; description='{ '; file='/wp-admin/includes/plugin.php, line: 1694'; type='function';}, 
	{name='remove_post_type_support'; match='remove_post_type_support'; definition='remove_post_type_support($post_type, $feature)'; description='Remove support for a feature from a post type. 
'; file='/wp-includes/post.php, line: 1274'; params='@param string $post_type The post type for which to remove the feature  
@param string $feature The feature being removed  '; since='3.0.0 '; type='function';}, 
	{name='remove_query_arg'; match='remove_query_arg'; definition='remove_query_arg($key, $query=false)'; description='Removes an item or list from the query string. 
'; file='/wp-includes/functions.php, line: 1504'; params='@param string array $key Query key or keys to remove.  
@param bool $query When false uses the $_SERVER value.  '; return='string New URL query string. '; since='1.5.0 '; type='function';}, 
	{name='remove_role'; match='remove_role'; definition='remove_role($role)'; description='Remove role, if it exists. 
@see <code>WP_Roles::remove_role()</code> Uses method to remove role. '; file='/wp-includes/capabilities.php, line: 1170'; params='@param string $role Role name.  '; return='null '; since='2.0.0 '; type='function';}, 
	{name='remove_shortcode'; match='remove_shortcode'; definition='remove_shortcode($tag)'; description='Removes hook for shortcode. 

'; file='/wp-includes/shortcodes.php, line: 108'; params='@param string $tag shortcode tag to remove hook for.  '; since='2.5 '; uses='$shortcode_tags'; type='function';}, 
	{name='remove_submenu_page'; match='remove_submenu_page'; definition='remove_submenu_page($menu_slug, $submenu_slug)'; description='Remove an admin submenu 
'; file='/wp-admin/includes/plugin.php, line: 1280'; params='@param string $menu_slug The slug for the parent menu  
@param string $submenu_slug The slug of the submenu  '; return='array|bool The removed submenu on success, False if not found '; since='3.1.0 '; type='function';}, 
	{name='remove_theme_mod'; match='remove_theme_mod'; definition='remove_theme_mod($name)'; description='Remove theme modification name from current theme list. 
If removing the name also removes all elements, then the entire option will be removed. 
'; file='/wp-includes/theme.php, line: 1374'; params='@param string $name Theme modification name.  '; return='null '; since='2.1.0 '; type='function';}, 
	{name='remove_theme_mods'; match='remove_theme_mods'; definition='remove_theme_mods()'; description='Remove theme modifications option for current theme. 
'; file='/wp-includes/theme.php, line: 1394'; since='2.1.0 '; type='function';}, 
	{name='remove_theme_support'; match='remove_theme_support'; definition='remove_theme_support($feature)'; description='Allows a theme to de-register its support of a certain feature 
Should be called in the theme&apos;s functions.php file. Generally would be used for child themes to override support from the parent theme. 
@see add_theme_support() '; file='/wp-includes/theme.php, line: 1889'; params='@param string $feature the feature being added  '; return='bool Whether feature was removed. '; since='3.0.0 '; type='function';}, 
	{name='remove_user_from_blog'; match='remove_user_from_blog'; definition='remove_user_from_blog($user_id, $blog_id=\'\', $reassign=\'\')'; description='Remove a user from a blog. 
Use the &apos;remove_user_from_blog&apos; action to fire an event when users are removed from a blog. 
Accepts an optional $reassign parameter, if you want to reassign the user&apos;s blog posts to another user upon removal. 
'; file='/wp-includes/ms-functions.php, line: 247'; params='@param int $user_id ID of the user you\'re removing.  
@param int $blog_id ID of the blog you\'re removing the user from.  
@param string $reassign Optional. A user to whom to reassign posts.  '; return='bool '; since='MU 1.0 '; type='function';}, 
	{name='request_filesystem_credentials'; match='request_filesystem_credentials'; definition='request_filesystem_credentials($form_post, $type=\'\', $error=false, $context=false, $extra_fields=null)'; description='Displays a form to the user to request for their FTP/SSH details in order to connect to the filesystem. All chosen/entered details are saved, Excluding the Password. 
Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467) to specify an alternate FTP/SSH port. 
Plugins may override this form by returning true|false via the request_filesystem_credentials filter. 
'; file='/wp-admin/includes/file.php, line: 883'; params='@param string $form_post the URL to post the form to  
@param string $type the chosen Filesystem method in use  
@param boolean $error if the current request has failed to connect  
@param string $context The directory which is needed access to, The write-test will be performed on this directory by get_filesystem_method()  
@param string $extra_fields Extra POST fields which should be checked for to be included in the post.  '; return='boolean False on failure. True on success. '; since='2.5.0 '; type='function';}, 
	{name='require_if_theme_supports'; match='require_if_theme_supports'; definition='require_if_theme_supports($feature, $include)'; description='Checks a theme&apos;s support for a given feature before loading the functions which implement it. 
'; file='/wp-includes/theme.php, line: 1956'; params='@param string $feature the feature being checked  
@param string $include the file containing the functions that implement the feature  '; since='2.9.0 '; type='function';}, 
	{name='require_wp_db'; match='require_wp_db'; definition='require_wp_db()'; description='Load the correct database class file. 
This function is used to load the database class file either at runtime or by wp-admin/setup-config.php. We must globalize $wpdb to ensure that it is defined globally by the inline code in wp-db.php. 
'; file='/wp-includes/load.php, line: 326'; since='2.5.0 '; type='function';}, 
	{name='reset_password'; match='reset_password'; definition='reset_password($user, $new_pass)'; description='Handles resetting the user&apos;s password. 

'; file='/wp-login.php, line: 275'; params='@param string $key Hash to validate sending user\'s password  '; uses='$wpdb WordPress Database object'; type='function';}, 
	{name='restore_current_blog'; match='restore_current_blog'; definition='restore_current_blog()'; description='Restore the current blog, after calling switch_to_blog() 
@see switch_to_blog() '; file='/wp-includes/ms-blogs.php, line: 524'; return='bool True on success, False if we&apos;re already on the current blog '; since='MU '; type='function';}, 
	{name='retrieve_password'; match='retrieve_password'; definition='retrieve_password()'; description='Handles sending password retrieval email to user. 

'; file='/wp-login.php, line: 165'; return='bool|WP_Error True: when finish. <code>WP_Error</code> on error '; uses='$wpdb WordPress Database object'; type='function';}, 
	{name='retrieve_widgets'; match='retrieve_widgets'; definition='retrieve_widgets()'; description=''; file='/wp-admin/widgets.php, line: 66'; type='function';}, 
	{name='revoke_super_admin'; match='revoke_super_admin'; definition='revoke_super_admin($user_id)'; description='Revokes super admin privileges. 
'; file='/wp-admin/includes/ms.php, line: 718'; params='@param int $user_id  '; since='3.0.0 '; type='function';}, 
	{name='rewind_posts'; match='rewind_posts'; definition='rewind_posts()'; description='Rewind the loop posts. 
@see <code>WP_Query::rewind_posts()</code> 
'; file='/wp-includes/query.php, line: 760'; return='null '; since='1.5.0 '; uses='$wp_query'; type='function';}, 
	{name='rich_edit_exists'; match='rich_edit_exists'; definition='rich_edit_exists()'; description='Determine if TinyMCE is available. 
Checks to see if the user has deleted the tinymce files to slim down there WordPress install. 
'; file='/wp-includes/general-template.php, line: 1717'; return='bool Whether TinyMCE exists. '; since='2.1.0 '; type='function';}, 
	{name='rsd_link'; match='rsd_link'; definition='rsd_link()'; description='Display the link to the Really Simple Discovery service endpoint. 
<code>2.0.0 </code> '; file='/wp-includes/general-template.php, line: 1679'; type='function';}, 
	{name='rss_enclosure'; match='rss_enclosure'; definition='rss_enclosure()'; description=''; file='/wp-includes/feed.php, line: 383'; type='function';}, 
	{name='safecss_filter_attr'; match='safecss_filter_attr'; definition='safecss_filter_attr($css, $deprecated=\'\')'; description='Inline CSS filter 
'; file='/wp-includes/kses.php, line: 1368'; since='2.8.1 '; type='function';}, 
	{name='sanitize_bookmark'; match='sanitize_bookmark'; definition='sanitize_bookmark($bookmark, $context=\'display\')'; description='Sanitizes all bookmark fields 
'; file='/wp-includes/bookmark.php, line: 271'; params='@param object array $bookmark Bookmark row  
@param string $context Optional, default is \'display\'. How to filter the fields  '; return='object|array Same type as $bookmark but with fields sanitized. '; since='2.3.0 '; type='function';}, 
	{name='sanitize_bookmark_field'; match='sanitize_bookmark_field'; definition='sanitize_bookmark_field($field, $value, $bookmark_id, $context)'; description='Sanitizes a bookmark field 
Sanitizes the bookmark fields based on what the field name is. If the field has a strict value set, then it will be tested for that, else a more generic filtering is applied. After the more strict filter is applied, if the $context is &apos;raw&apos; then the value is immediately return. 
Hooks exist for the more generic cases. With the &apos;edit&apos; context, the &apos;edit_$field&apos; filter will be called and passed the $value and $bookmark_id respectively. With the &apos;db&apos; context, the &apos;pre_$field&apos; filter is called and passed the value. The &apos;display&apos; context is the final context and has the $field has the filter name and is passed the $value, $bookmark_id, and $context respectively. 
'; file='/wp-includes/bookmark.php, line: 321'; params='@param string $field The bookmark field  
@param mixed $value The bookmark field value  
@param int $bookmark_id Bookmark ID  
@param string $context How to filter the field value. Either \'raw\', \'edit\', \'attribute\', \'js\', \'db\', or \'display\'  '; return='mixed The filtered value '; since='2.3.0 '; type='function';}, 
	{name='sanitize_category'; match='sanitize_category'; definition='sanitize_category($category, $context=\'display\')'; description='Sanitizes category data based on context. 

'; file='/wp-includes/category.php, line: 234'; params='@param object array $category Category data  
@param string $context Optional. Default is \'display\'.  '; return='object|array Same type as $category with sanitized data for safe use. '; since='2.3.0 '; uses='sanitize_term() See this function for what context are supported.'; type='function';}, 
	{name='sanitize_category_field'; match='sanitize_category_field'; definition='sanitize_category_field($field, $value, $cat_id, $context)'; description='Sanitizes data in single category key field. 

'; file='/wp-includes/category.php, line: 251'; params='@param string $field Category key to sanitize  
@param mixed $value Category value to sanitize  
@param int $cat_id Category ID  
@param string $context What filter to use, \'raw\', \'display\', etc.  '; return='mixed Same type as $value after $value has been sanitized. '; since='2.3.0 '; uses='sanitize_term_field() See function for more details.'; type='function';}, 
	{name='sanitize_comment_cookies'; match='sanitize_comment_cookies'; definition='sanitize_comment_cookies()'; description='Sanitizes the cookies sent to the user already. 
Will only do anything if the cookies have already been created for the user. Mostly used after cookies had been sent to use elsewhere. 
'; file='/wp-includes/comment.php, line: 581'; since='2.0.4 '; type='function';}, 
	{name='sanitize_email'; match='sanitize_email'; definition='sanitize_email($email)'; description='Strips out all characters that are not allowable in an email. 
'; file='/wp-includes/formatting.php, line: 1717'; params='@param string $email Email address to filter.  '; return='string Filtered email address. '; since='1.5.0 '; type='function';}, 
	{name='sanitize_file_name'; match='sanitize_file_name'; definition='sanitize_file_name($filename)'; description='Sanitizes a filename replacing whitespace with dashes 
Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line. Replaces spaces and consecutive dashes with a single dash. Trim period, dash and underscore from beginning and end of filename. 
'; file='/wp-includes/formatting.php, line: 682'; params='@param string $filename The filename to be sanitized  '; return='string The sanitized filename '; since='2.1.0 '; type='function';}, 
	{name='sanitize_html_class'; match='sanitize_html_class'; definition='sanitize_html_class($class, $fallback=\'\')'; description='Santizes a html classname to ensure it only contains valid characters 
Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty string then it will return the alternative value supplied. 
'; file='/wp-includes/formatting.php, line: 880'; params='@param string $class The classname to be sanitized  
@param string $fallback Optional. The value to return if the sanitization end\'s up as an empty string. Defaults to an empty string.  '; return='string The sanitized value '; since='2.8.0 '; type='function';}, 
	{name='sanitize_key'; match='sanitize_key'; definition='sanitize_key($key)'; description='Sanitize a string key. 
Keys are used as internal identifiers. Lowercase alphanumeric characters, dashes and underscores are allowed. 
'; file='/wp-includes/formatting.php, line: 770'; params='@param string $key String key  '; return='string Sanitized key '; since='3.0.0 '; type='function';}, 
	{name='sanitize_meta'; match='sanitize_meta'; definition='sanitize_meta($meta_key, $meta_value, $meta_type=null)'; description='Sanitize meta value 
'; file='/wp-includes/meta.php, line: 606'; params='@param string $meta_key Meta key  
@param mixed $meta_value Meta value to sanitize  
@param string $meta_type Type of meta  '; return='mixed Sanitized $meta_value '; since='3.1.3 '; type='function';}, 
	{name='sanitize_mime_type'; match='sanitize_mime_type'; definition='sanitize_mime_type($mime_type)'; description='Sanitize a mime type 
'; file='/wp-includes/formatting.php, line: 2921'; params='@param string $mime_type Mime type  '; return='string Sanitized mime type '; since='3.1.3 '; type='function';}, 
	{name='sanitize_option'; match='sanitize_option'; definition='sanitize_option($option, $value)'; description='Sanitises various option values based on the nature of the option. 
This is basically a switch statement which will pass $value through a number of functions depending on the $option. 
'; file='/wp-includes/formatting.php, line: 2418'; params='@param string $option The name of the option.  
@param string $value The unsanitised value.  '; return='string Sanitized value. '; since='2.0.5 '; type='function';}, 
	{name='sanitize_post'; match='sanitize_post'; definition='sanitize_post($post, $context=\'display\')'; description='Sanitize every post field. 
If the context is &apos;raw&apos;, then the post object or array will get minimal santization of the int fields. 

'; file='/wp-includes/post.php, line: 1626'; params='@param object array $post The Post Object or Array  
@param string $context Optional, default is \'display\'. How to sanitize post fields.  '; return='object|array The now sanitized Post Object or Array (will be the same type as $post) '; since='2.3.0 '; uses='sanitize_post_field() Used to sanitize the fields.'; type='function';}, 
	{name='sanitize_post_field'; match='sanitize_post_field'; definition='sanitize_post_field($field, $value, $post_id, $context)'; description='Sanitize post field based on context. 
Possible context values are: &apos;raw&apos;, &apos;edit&apos;, &apos;db&apos;, &apos;display&apos;, &apos;attribute&apos; and &apos;js&apos;. The &apos;display&apos; context is used by default. &apos;attribute&apos; and &apos;js&apos; contexts are treated like &apos;display&apos; when calling filters. 



'; file='/wp-includes/post.php, line: 1676'; params='@param string $field The Post Object field name.  
@param mixed $value The Post Object value.  
@param int $post_id Post ID.  
@param string $context How to sanitize post fields. Looks for \'raw\', \'edit\', \'db\', \'display\', \'attribute\' and \'js\'.  '; return='mixed Sanitized value. '; since='2.3.0 '; uses='apply_filters() Calls \'edit_$field\' and \'{$field_no_prefix}_edit_pre\' passing $value and $post_id if $context == \'edit\' and field name prefix == \'post_\'.
apply_filters() Calls \'edit_post_$field\' passing $value and $post_id if $context == \'db\'. 
apply_filters() Calls \'pre_$field\' passing $value if $context == \'db\' and field name prefix == \'post_\'. 
apply_filters() Calls \'{$field}_pre\' passing $value if $context == \'db\' and field name prefix != \'post_\'.
apply_filters() Calls \'$field\' passing $value, $post_id and $context if $context == anything other than \'raw\', \'edit\' and \'db\' and field name prefix == \'post_\'. 
apply_filters() Calls \'post_$field\' passing $value if $context == anything other than \'raw\', \'edit\' and \'db\' and field name prefix != \'post_\'.'; type='function';}, 
	{name='sanitize_sql_orderby'; match='sanitize_sql_orderby'; definition='sanitize_sql_orderby($orderby)'; description='Ensures a string is a valid SQL order by clause. 
Accepts one or more columns, with or without ASC/DESC, and also accepts RAND(). 
'; file='/wp-includes/formatting.php, line: 858'; params='@param string $orderby Order by string to be checked.  '; return='string|false Returns the order by clause if it is a match, false otherwise. '; since='2.5.1 '; type='function';}, 
	{name='sanitize_term'; match='sanitize_term'; definition='sanitize_term($term, $taxonomy, $context=\'display\')'; description=''; file='/wp-includes/taxonomy.php, line: 1515'; type='function';}, 
	{name='sanitize_term_field'; match='sanitize_term_field'; definition='sanitize_term_field($field, $value, $term_id, $taxonomy, $context)'; description=''; file='/wp-includes/taxonomy.php, line: 1572'; type='function';}, 
	{name='sanitize_text_field'; match='sanitize_text_field'; definition='sanitize_text_field($str)'; description='Sanitize a string from user input or from the db 
check for invalid UTF-8, Convert single &lt; characters to entity, strip all tags, remove line breaks, tabs and extra white space, strip octets. 
'; file='/wp-includes/formatting.php, line: 2852'; params='@param string $str  '; return='string '; since='2.9.0 '; type='function';}, 
	{name='sanitize_title'; match='sanitize_title'; definition='sanitize_title($title, $fallback_title=\'\', $context=\'save\')'; description='Sanitizes title or use fallback title. 
Specifically, HTML and PHP tags are stripped. Further actions can be added via the plugin API. If $title is empty and $fallback_title is set, the latter will be used. 
'; file='/wp-includes/formatting.php, line: 791'; params='@param string $title The string to be sanitized.  
@param string $fallback_title Optional. A title to use if $title is empty.  
@param string $context Optional. The operation for which the string is sanitized  '; return='string The sanitized string. '; since='1.0.0 '; type='function';}, 
	{name='sanitize_title_for_query'; match='sanitize_title_for_query'; definition='sanitize_title_for_query($title)'; description=''; file='/wp-includes/formatting.php, line: 805'; type='function';}, 
	{name='sanitize_title_with_dashes'; match='sanitize_title_with_dashes'; definition='sanitize_title_with_dashes($title)'; description='Sanitizes title, replacing whitespace with dashes. 
Limits the output to alphanumeric characters, underscore (_) and dash (-). Whitespace becomes a dash. 
'; file='/wp-includes/formatting.php, line: 820'; params='@param string $title The title to be sanitized.  '; return='string The sanitized title. '; since='1.2.0 '; type='function';}, 
	{name='sanitize_url'; match='sanitize_url'; definition='sanitize_url($url, $protocols=null)'; description='Performs esc_url() for database or redirect usage. 
@see esc_url_raw() '; file='/wp-includes/deprecated.php, line: 2067'; params='@param string $url The URL to be cleaned.  
@param array $protocols An array of acceptable protocols.  '; return='string The cleaned URL. '; since='2.3.1 '; type='function';}, 
	{name='sanitize_user'; match='sanitize_user'; definition='sanitize_user($username, $strict=false)'; description='Sanitize username stripping out unsafe characters. 
Removes tags, octets, entities, and if strict is enabled, will only keep alphanumeric, _, space, ., -, @. After sanitizing, it passes the username, raw username (the username in the parameter), and the value of $strict as parameters for the &apos;sanitize_user&apos; filter. 

'; file='/wp-includes/formatting.php, line: 741'; params='@param string $username The username to be sanitized.  
@param bool $strict If set limits $username to specific characters. Default false.  '; return='string The sanitized username, after passing through filters. '; since='2.0.0 '; uses='apply_filters() Calls \'sanitize_user\' hook on username, raw username, and $strict parameter.'; type='function';}, 
	{name='sanitize_user_field'; match='sanitize_user_field'; definition='sanitize_user_field($field, $value, $user_id, $context)'; description='Sanitize user field based on context. 
Possible context values are: &apos;raw&apos;, &apos;edit&apos;, &apos;db&apos;, &apos;display&apos;, &apos;attribute&apos; and &apos;js&apos;. The &apos;display&apos; context is used by default. &apos;attribute&apos; and &apos;js&apos; contexts are treated like &apos;display&apos; when calling filters. 



'; file='/wp-includes/user.php, line: 1206'; params='@param string $field The user Object field name.  
@param mixed $value The user Object value.  
@param int $user_id user ID.  
@param string $context How to sanitize user fields. Looks for \'raw\', \'edit\', \'db\', \'display\', \'attribute\' and \'js\'.  '; return='mixed Sanitized value. '; since='2.3.0 '; uses='apply_filters() Calls \'edit_$field\' and \'{$field_no_prefix}_edit_pre\' passing $value and $user_id if $context == \'edit\' and field name prefix == \'user_\'.
apply_filters() Calls \'edit_user_$field\' passing $value and $user_id if $context == \'db\'. 
apply_filters() Calls \'pre_$field\' passing $value if $context == \'db\' and field name prefix == \'user_\'. 
apply_filters() Calls \'{$field}_pre\' passing $value if $context == \'db\' and field name prefix != \'user_\'.
apply_filters() Calls \'$field\' passing $value, $user_id and $context if $context == anything other than \'raw\', \'edit\' and \'db\' and field name prefix == \'user_\'. 
apply_filters() Calls \'user_$field\' passing $value if $context == anything other than \'raw\', \'edit\' and \'db\' and field name prefix != \'user_\'.'; type='function';}, 
	{name='sanitize_user_object'; match='sanitize_user_object'; definition='sanitize_user_object($user, $context=\'display\')'; description='Sanitize every user field. 
If the context is &apos;raw&apos;, then the user object or array will get minimal santization of the int fields. 

'; file='/wp-includes/user.php, line: 1155'; params='@param object array $user The User Object or Array  
@param string $context Optional, default is \'display\'. How to sanitize user fields.  '; return='object|array The now sanitized User Object or Array (will be the same type as $user) '; since='2.3.0 '; uses='sanitize_user_field() Used to sanitize the fields.'; type='function';}, 
	{name='saveDomDocument'; match='saveDomDocument'; definition='saveDomDocument($doc, $filename)'; description='Saves the XML document into a file 
'; file='/wp-admin/includes/misc.php, line: 522'; params='@param DOMDocument $doc  
@param string $filename  '; since='2.8.0 '; type='function';}, 
	{name='save_mod_rewrite_rules'; match='save_mod_rewrite_rules'; definition='save_mod_rewrite_rules()'; description='Updates the htaccess file with the current rules if it is writable. 
Always writes to the file if it exists and is writable to ensure that we blank out old rules. 
'; file='/wp-admin/includes/misc.php, line: 122'; since='1.5.0 '; type='function';}, 
	{name='screen_icon'; match='screen_icon'; definition='screen_icon($screen=\'\')'; description=''; file='/wp-admin/includes/template.php, line: 1960'; type='function';}, 
	{name='screen_layout'; match='screen_layout'; definition='screen_layout($screen)'; description=''; file='/wp-admin/includes/template.php, line: 1861'; type='function';}, 
	{name='screen_meta'; match='screen_meta'; definition='screen_meta($screen)'; description=''; file='/wp-admin/includes/template.php, line: 1712'; type='function';}, 
	{name='screen_options'; match='screen_options'; definition='screen_options($screen)'; description=''; file='/wp-admin/includes/template.php, line: 1915'; type='function';}, 
	{name='script_concat_settings'; match='script_concat_settings'; definition='script_concat_settings()'; description=''; file='/wp-includes/script-loader.php, line: 772'; type='function';}, 
	{name='search_theme_directories'; match='search_theme_directories'; definition='search_theme_directories()'; description='Search all registered theme directories for complete and valid themes. 
'; file='/wp-includes/theme.php, line: 575'; return='array Valid themes found '; since='2.9.0 '; type='function';}, 
	{name='secret_salt_warning'; match='secret_salt_warning'; definition='secret_salt_warning()'; description=''; file='/wp-admin/includes/ms.php, line: 576'; type='function';}, 
	{name='seems_utf8'; match='seems_utf8'; definition='seems_utf8($str)'; description='Checks to see if a string is utf8 encoded. 
NOTE: This function checks for 5-Byte sequences, UTF8 has Bytes Sequences with a maximum length of 4. 
@author bmorel at ssi dot fr (modified) '; file='/wp-includes/formatting.php, line: 259'; params='@param string $str The string to be checked  '; return='bool True if $str fits a UTF-8 model, false otherwise. '; since='1.2.1 '; type='function';}, 
	{name='selected'; match='selected'; definition='selected($selected, $current=true, $echo=true)'; description='Outputs the html selected attribute. 
Compares the first two arguments and if identical marks as selected 
'; file='/wp-includes/general-template.php, line: 2281'; params='@param mixed $selected One of the values to compare  
@param mixed $current (true) The other value to compare if not just true  
@param bool $echo Whether to echo or just return the string  '; return='string html attribute or empty string '; since='1.0.0 '; type='function';}, 
	{name='self_admin_url'; match='self_admin_url'; definition='self_admin_url($path=\'\', $scheme=\'admin\')'; description=''; file='/wp-includes/link-template.php, line: 2278'; type='function';}, 
	{name='self_link'; match='self_link'; definition='self_link()'; description=''; file='/wp-includes/feed.php, line: 487'; type='function';}, 
	{name='send_confirmation_on_profile_email'; match='send_confirmation_on_profile_email'; definition='send_confirmation_on_profile_email()'; description=''; file='/wp-admin/includes/ms.php, line: 247'; type='function';}, 
	{name='send_frame_options_header'; match='send_frame_options_header'; definition='send_frame_options_header()'; description='Send a HTTP header to limit rendering of pages to same origin iframes. 
<code>3.1.3 none </code> '; file='/wp-includes/functions.php, line: 4548'; type='function';}, 
	{name='send_nosniff_header'; match='send_nosniff_header'; definition='send_nosniff_header()'; description='Send a HTTP header to disable content type sniffing in browsers which support it. 
<code> 3.0.0 none </code> '; file='/wp-includes/functions.php, line: 4446'; type='function';}, 
	{name='separate_comments'; match='separate_comments'; definition='separate_comments($comments)'; description='Separates an array of comments into an array keyed by comment_type. 
'; file='/wp-includes/comment.php, line: 703'; params='@param array $comments Array of comments  '; return='array Array of comments keyed by comment_type. '; since='2.7.0 '; type='function';}, 
	{name='set_current_screen'; match='set_current_screen'; definition='set_current_screen($id=\'\')'; description='Set the current screen object 

'; file='/wp-admin/includes/template.php, line: 2085'; params='@param string $id Screen id, optional.  '; since='3.0.0 '; uses='$current_screen'; type='function';}, 
	{name='set_post_format'; match='set_post_format'; definition='set_post_format($post, $format)'; description='Assign a format to a post 
'; file='/wp-includes/post.php, line: 534'; params='@param int object $post The post for which to assign a format  
@param string $format A format to assign. Use an empty string or array to remove all formats from the post.  '; return='mixed <code>WP_Error</code> on error. Array of affected term IDs on success. '; since='3.1.0 '; type='function';}, 
	{name='set_post_thumbnail'; match='set_post_thumbnail'; definition='set_post_thumbnail($post, $thumbnail_id)'; description='Sets a post thumbnail. 
'; file='/wp-includes/post.php, line: 5179'; params='@param int object $post Post ID or object where thumbnail should be attached.  
@param int $thumbnail_id Thumbnail to attach.  '; return='bool True on success, false on failure. '; since='3.1.0 '; type='function';}, 
	{name='set_post_thumbnail_size'; match='set_post_thumbnail_size'; definition='set_post_thumbnail_size($width=0, $height=0, $crop=false)'; description='Registers an image size for the post thumbnail '; file='/wp-includes/media.php, line: 189'; type='function';}, 
	{name='set_post_type'; match='set_post_type'; definition='set_post_type($post_id=0, $post_type=\'post\')'; description='Updates the post type for the post ID. 
The page or post cache will be cleaned for the post ID. 

'; file='/wp-includes/post.php, line: 1323'; params='@param int $post_id Post ID to change post type. Not actually optional.  
@param string $post_type Optional, default is post. Supported values are \'post\' or \'page\' to name a few.  '; return='int Amount of rows changed. Should be 1 for success and 0 for failure. '; since='2.5.0 '; uses='$wpdb'; type='function';}, 
	{name='set_query_var'; match='set_query_var'; definition='set_query_var($var, $value)'; description='Set query variable. 
@see <code>WP_Query::set()</code> 
'; file='/wp-includes/query.php, line: 72'; params='@param string $var Query variable key.  
@param mixed $value  '; return='null '; since='2.2.0 '; uses='$wp_query'; type='function';}, 
	{name='set_screen_options'; match='set_screen_options'; definition='set_screen_options()'; description='Saves option for number of rows when listing posts, pages, comments, etc. 
'; file='/wp-admin/includes/misc.php, line: 321'; since='2.8 '; type='function';}, 
	{name='set_site_transient'; match='set_site_transient'; definition='set_site_transient($transient, $value, $expiration=0)'; description=''; file='/wp-includes/functions.php, line: 3991'; type='function';}, 
	{name='set_theme_mod'; match='set_theme_mod'; definition='set_theme_mod($name, $value)'; description='Update theme modification value for the current theme. 
'; file='/wp-includes/theme.php, line: 1354'; params='@param string $name Theme modification name.  
@param string $value theme modification value.  '; since='2.1.0 '; type='function';}, 
	{name='set_transient'; match='set_transient'; definition='set_transient($transient, $value, $expiration=0)'; description=''; file='/wp-includes/functions.php, line: 789'; type='function';}, 
	{name='set_user_setting'; match='set_user_setting'; definition='set_user_setting($name, $value)'; description=''; file='/wp-includes/functions.php, line: 898'; type='function';}, 
	{name='settings_errors'; match='settings_errors'; definition='settings_errors($setting=\'\', $sanitize=FALSE, $hide_on_update=FALSE)'; description='Display settings errors registered by add_settings_error() 
Part of the Settings API. Outputs a for each error retrieved by get_settings_errors(). 
This is called automatically after a settings page based on the Settings API is submitted. Errors should be added during the validation callback function for a setting defined in register_setting() 
The $sanitize option is passed into get_settings_errors() and will re-run the setting sanitization on its current value. 
The $hide_on_update option will cause errors to only show when the settings page is first loaded. if the user has already saved new values it will be hidden to avoid repeating messages already shown in the default error reporting after submission. This is useful to show general errors like missing settings when the user arrives at the settings page. 
'; file='/wp-admin/includes/template.php, line: 1320'; params='@param string $setting Optional slug title of a specific setting who\'s errors you want.  
@param boolean $sanitize Whether to re-sanitize the setting value before returning errors.  
@param boolean $hide_on_update If set to true errors will not be shown if the settings page has already been submitted.  '; since='3.0.0 '; type='function';}, 
	{name='settings_fields'; match='settings_fields'; definition='settings_fields($option_group)'; description='Output nonce, action, and option_page fields for a settings page. 
'; file='/wp-admin/includes/plugin.php, line: 1720'; params='@param string $option_group A settings group name. This should match the group name used in register_setting().  '; since='2.7.0 '; type='function';}, 
	{name='setup_postdata'; match='setup_postdata'; definition='setup_postdata($post)'; description='Set up global post data. 
'; file='/wp-includes/query.php, line: 3541'; params='@param object $post Post data.  '; return='bool True when finished. '; since='1.5.0 '; uses='do_action_ref_array() Calls \'the_post\' '; type='function';}, 
	{name='setup_userdata'; match='setup_userdata'; definition='setup_userdata($for_user_id=\'\')'; description='Set up global user vars. 
Used by wp_set_current_user() for back compat. Might be deprecated in the future. 

'; file='/wp-includes/user.php, line: 920'; params='@param int $for_user_id Optional. User ID to set up global data.  '; since='2.0.4 '; type='function';}, 
	{name='shortcode_atts'; match='shortcode_atts'; definition='shortcode_atts($pairs, $atts)'; description='Combine user attributes with known attributes and fill in defaults when needed. 
The pairs should be considered to be all of the attributes which are supported by the caller and given as a list. The returned attributes will only contain the attributes in the $pairs list. 
If the $atts list has unsupported attributes, then they will be ignored and removed from the final returned list. 
'; file='/wp-includes/shortcodes.php, line: 264'; params='@param array $pairs Entire list of supported attributes and their defaults.  
@param array $atts User defined attributes in shortcode tag.  '; return='array Combined and filtered attribute list. '; since='2.5 '; type='function';}, 
	{name='shortcode_parse_atts'; match='shortcode_parse_atts'; definition='shortcode_parse_atts($text)'; description='Retrieve all attributes from the shortcodes tag. 
The attributes list has the attribute name as the key and the value of the attribute as the value in the key/value pair. This allows for easier retrieval of the attributes, since all attributes have to be known. 
'; file='/wp-includes/shortcodes.php, line: 225'; params='@param string $text  '; return='array List of attributes and their value. '; since='2.5 '; type='function';}, 
	{name='shortcode_unautop'; match='shortcode_unautop'; definition='shortcode_unautop($pee)'; description='Don&apos;t auto-p wrap shortcodes that stand alone 
Ensures that shortcodes are not wrapped in &lt; 
&gt;...&lt;&gt;. 
'; file='/wp-includes/formatting.php, line: 235'; params='@param string $pee The content.  '; return='string The filtered content. '; since='2.9.0 '; type='function';}, 
	{name='show_admin_bar'; match='show_admin_bar'; definition='show_admin_bar($show)'; description='Set the display status of the admin bar. 
This can be called immediately upon plugin load. It does not need to be called from a function hooked to the init action. 
'; file='/wp-includes/admin-bar.php, line: 399'; params='@param bool $show Whether to allow the admin bar to show.  '; return='void '; since='3.1.0 '; type='function';}, 
	{name='show_message'; match='show_message'; definition='show_message($message)'; description='{ '; file='/wp-admin/includes/misc.php, line: 267'; type='function';}, 
	{name='shutdown_action_hook'; match='shutdown_action_hook'; definition='shutdown_action_hook()'; description='Runs just before PHP shuts down execution. 
'; file='/wp-includes/load.php, line: 553'; since='1.2.0 '; type='function';}, 
	{name='signup_nonce_check'; match='signup_nonce_check'; definition='signup_nonce_check($result)'; description='Process the signup nonce created in signup_nonce_fields(). 

'; file='/wp-includes/ms-functions.php, line: 1777'; params='@param array $result  '; return='array '; since='MU '; uses='wp_create_nonce()'; type='function';}, 
	{name='signup_nonce_fields'; match='signup_nonce_fields'; definition='signup_nonce_fields()'; description='Add a nonce field to the signup page. 
'; file='/wp-includes/ms-functions.php, line: 1762'; since='MU '; uses='wp_nonce_field() '; type='function';}, 
	{name='signuppageheaders'; match='signuppageheaders'; definition='signuppageheaders()'; description=''; file='/wp-signup.php, line: 20'; type='function';}, 
	{name='single_cat_title'; match='single_cat_title'; definition='single_cat_title($prefix=\'\', $display=true)'; description='Display or retrieve page title for category archive. 
This is useful for category template file or files, because it is optimized for category page title and with less overhead than <code>wp_title()</code> . 
It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end. 
'; file='/wp-includes/general-template.php, line: 690'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='0.71 '; type='function';}, 
	{name='single_month_title'; match='single_month_title'; definition='single_month_title($prefix=\'\', $display=true)'; description='Display or retrieve page title for post archive based on date. 
Useful for when the template only needs to display the month and year, if either are available. Optimized for just this purpose, so if it is all that is needed, should be better than <code>wp_title()</code> . 
It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end. 
'; file='/wp-includes/general-template.php, line: 774'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='0.71 '; type='function';}, 
	{name='single_post_title'; match='single_post_title'; definition='single_post_title($prefix=\'\', $display=true)'; description='Display or retrieve page title for post. 
This is optimized for single.php template file for displaying the post title. 
It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end. 
'; file='/wp-includes/general-template.php, line: 635'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='0.71 '; type='function';}, 
	{name='single_tag_title'; match='single_tag_title'; definition='single_tag_title($prefix=\'\', $display=true)'; description='Display or retrieve page title for tag post archive. 
Useful for tag template files for displaying the tag page title. It has less overhead than <code>wp_title()</code> , because of its limited implementation. 
It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end. 
'; file='/wp-includes/general-template.php, line: 711'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='2.3.0 '; type='function';}, 
	{name='single_term_title'; match='single_term_title'; definition='single_term_title($prefix=\'\', $display=true)'; description='Display or retrieve page title for taxonomy term archive. 
Useful for taxonomy term template files for displaying the taxonomy term page title. It has less overhead than <code>wp_title()</code> , because of its limited implementation. 
It does not support placing the separator after the title, but by leaving the prefix parameter empty, you can set the title separator manually. The prefix does not automatically place a space between the prefix, so if there should be a space, the parameter value will need to have it at the end. 
'; file='/wp-includes/general-template.php, line: 732'; params='@param string $prefix Optional. What to display before the title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  '; return='string|null Title when retrieving, null when displaying or failure. '; since='3.1.0 '; type='function';}, 
	{name='site_admin_notice'; match='site_admin_notice'; definition='site_admin_notice()'; description=''; file='/wp-admin/includes/ms.php, line: 595'; type='function';}, 
	{name='site_url'; match='site_url'; definition='site_url()'; description=''; file='/wp-admin/load-styles.php, line: 73'; type='function';}, 
	{name='size_format'; match='size_format'; definition='size_format($bytes, $decimals=0)'; description='Convert number of bytes largest unit bytes will fit into. 
It is easier to read 1kB than 1024 bytes and 1MB than 1048576 bytes. Converts number of bytes to human readable number by taking the number of that unit that the bytes will go into it. Supports TB value. 
Please note that integers in PHP are limited to 32 bits, unless they are on 64 bit architecture, then they have 64 bit size. If you need to place the larger size then what PHP integer type will hold, then use a string. It will be converted to a double, which should always have 64 bit length. 
Technically the correct unit names for powers of 1024 are KiB, MiB etc. <code>2.3.0 int|string $bytes Number of bytes. Note max integer size for integers. int $decimals Precision of number of decimal places. Deprecated. bool|string False on failure. Number string on success. </code> '; file='/wp-includes/functions.php, line: 180'; type='function';}, 
	{name='smilies_init'; match='smilies_init'; definition='smilies_init()'; description='Convert smiley code to the icon graphic file equivalent. 
You can turn off smilies, by going to the write setting screen and unchecking the box, or by setting &apos;use_smilies&apos; option to false or removing the option. 
Plugins may override the default smiley list by setting the $wpsmiliestrans to an array, with the key the code the blogger types in and the value the image file. 
The $wp_smiliessearch global is for the regular expression and is set each time the function is called. 
The full list of smilies can be found in the function and won&apos;t be listed in the description. Probably should create a Codex page for it, so that it is available. 
'; file='/wp-includes/functions.php, line: 2985'; since='2.2.0 '; type='function';}, 
	{name='spawn_cron'; match='spawn_cron'; definition='spawn_cron($local_time=0)'; description='Send request to run cron through HTTP request that doesn&apos;t halt page loading. 
'; file='/wp-includes/cron.php, line: 195'; return='null Cron could not be spawned, because it is not needed to run. '; since='2.1.0 '; type='function';}, 
	{name='startElement'; match='startElement'; definition='startElement($parser, $tagName, $attrs)'; description='XML callback function for the start of a new XML tag. 


'; file='/wp-admin/link-parse-opml.php, line: 46'; params='@param mixed $parser XML Parser resource.  
@param string $tagName XML element name.  
@param array $attrs XML element attributes.  '; since='0.71 '; uses='$updated_timestamp Not used inside function. 
$all_links Not used inside function. 
$map Stores names of attributes to use. '; type='function';}, 
	{name='start_post_rel_link'; match='start_post_rel_link'; definition='start_post_rel_link($title=\'%title\', $in_same_cat=false, $excluded_categories=\'\')'; description='Display relational link for the first post. 
'; file='/wp-includes/link-template.php, line: 1340'; params='@param string $title Optional. Link title format.  
@param bool $in_same_cat Optional. Whether link should be in same category.  
@param string $excluded_categories Optional. Excluded categories IDs.  '; since='2.8.0 '; type='function';}, 
	{name='start_wp'; match='start_wp'; definition='start_wp()'; description='Sets up the WordPress Loop. 
'; file='/wp-includes/deprecated.php, line: 59'; since='1.0.1 '; type='function';}, 
	{name='status_header'; match='status_header'; definition='status_header($header)'; description='Set HTTP status header. 

'; file='/wp-includes/functions.php, line: 1663'; params='@param int $header HTTP status code  '; return='unknown '; since='2.0.0 '; uses='apply_filters() Calls \'status_header\' on status header string, HTTP HTTP code, HTTP code description, and protocol string as separate parameters.'; type='function';}, 
	{name='stick_post'; match='stick_post'; definition='stick_post($post_id)'; description='Make a post sticky. 
Sticky posts should be displayed at the top of the front page. 
'; file='/wp-includes/post.php, line: 1749'; params='@param int $post_id Post ID.  '; since='2.7.0 '; type='function';}, 
	{name='sticky_class'; match='sticky_class'; definition='sticky_class($post_id=null)'; description='Display &quot;sticky&quot; CSS class, if a post is sticky. 
'; file='/wp-includes/post-template.php, line: 578'; params='@param int $post_id An optional post ID.  '; since='2.7.0 '; type='function';}, 
	{name='strip_shortcodes'; match='strip_shortcodes'; definition='strip_shortcodes($content)'; description='Remove all shortcode tags from the given content. 

'; file='/wp-includes/shortcodes.php, line: 285'; params='@param string $content Content to remove shortcode tags.  '; return='string Content without shortcode tags. '; since='2.5 '; uses='$shortcode_tags'; type='function';}, 
	{name='stripslashes_deep'; match='stripslashes_deep'; definition='stripslashes_deep($value)'; description='Navigates through an array and removes slashes from the values. 
If an array is passed, the array_map() function causes a callback to pass the value back to the function. The slashes from this value will removed. 
'; file='/wp-includes/formatting.php, line: 1233'; params='@param array string $value The array or string to be stripped.  '; return='array|string Stripped array (or string in the callback). '; since='2.0.0 '; type='function';}, 
	{name='submit_button'; match='submit_button'; definition='submit_button($text=NULL, $type=\'primary\', $name=\'submit\', $wrap=true, $other_attributes=NULL)'; description='Echos a submit button, with provided text and appropriate class 
'; file='/wp-admin/includes/template.php, line: 2169'; params='@param string $text The text of the button (defaults to \'Save Changes\')  
@param string $type The type of button. One of: primary, secondary, delete  
@param string $name The HTML name of the submit button. Defaults to \"submit\". If no id attribute is given in $other_attributes below, $name will be used as the button\'s id.  
@param bool $wrap True if the output button should be wrapped in a paragraph tag, false otherwise. Defaults to true  
@param array string $other_attributes Other attributes that should be output with the button, mapping attributes to their values, such as array( \'tabindex\' => \'1\' ). These attributes will be ouput as attribute=\"value\", such as tabindex=\"1\". Defaults to no other attributes. Other attributes can also be provided as a string such as \'tabindex=\"1\"\', though the array format is typically cleaner.  '; since='3.1.0 '; type='function';}, 
	{name='switch_theme'; match='switch_theme'; definition='switch_theme($template, $stylesheet)'; description='Switches current theme to new template and stylesheet names. 

'; file='/wp-includes/theme.php, line: 1248'; params='@param string $template Template name  
@param string $stylesheet Stylesheet name.  '; since='2.5.0 '; uses='do_action() Calls \'switch_theme\' action on updated theme display name.'; type='function';}, 
	{name='switch_to_blog'; match='switch_to_blog'; definition='switch_to_blog($new_blog, $validate=false)'; description='Switch the current blog. 
This function is useful if you need to pull posts, or other information, from other blogs. You can switch back afterwards using restore_current_blog(). 
Things that aren&apos;t switched: autoloaded options. See #14992 plugins. See #14941 
@see restore_current_blog() '; file='/wp-includes/ms-blogs.php, line: 454'; params='@param int $new_blog The id of the blog you want to switch to. Default: current blog  
@param bool $validate Whether to check if $new_blog exists before proceeding  '; return='bool True on success, False if the validation failed '; since='MU '; type='function';}, 
	{name='sync_category_tag_slugs'; match='sync_category_tag_slugs'; definition='sync_category_tag_slugs($term, $taxonomy)'; description=''; file='/wp-admin/includes/ms.php, line: 487'; type='function';}, 
	{name='tag_description'; match='tag_description'; definition='tag_description($tag=0)'; description='Retrieve tag description. 
'; file='/wp-includes/category-template.php, line: 1042'; params='@param int $tag Optional. Tag ID. Will use global tag ID by default.  '; return='string Tag description, available. '; since='2.8 '; type='function';}, 
	{name='tag_escape'; match='tag_escape'; definition='tag_escape($tag_name)'; description='Escape a HTML tag name. 
'; file='/wp-includes/formatting.php, line: 2374'; params='@param string $tag_name  '; return='string '; since='2.5.0 '; type='function';}, 
	{name='tag_exists'; match='tag_exists'; definition='tag_exists($tag_name)'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 181'; type='function';}, 
	{name='taxonomy_exists'; match='taxonomy_exists'; definition='taxonomy_exists($taxonomy)'; description=''; file='/wp-includes/taxonomy.php, line: 210'; type='function';}, 
	{name='term_description'; match='term_description'; definition='term_description($term=0, $taxonomy=\'post_tag\')'; description='Retrieve term description. 
'; file='/wp-includes/category-template.php, line: 1054'; params='@param int $term Optional. Term ID. Will use global term ID by default.  '; return='string Term description, available. '; since='2.8 '; type='function';}, 
	{name='term_exists'; match='term_exists'; definition='term_exists($term, $taxonomy=\'\', $parent=0)'; description=''; file='/wp-includes/taxonomy.php, line: 1446'; type='function';}, 
	{name='the_ID'; match='the_ID'; definition='the_ID()'; description='Display the ID of the current item in the WordPress Loop. 
'; file='/wp-includes/post-template.php, line: 16'; since='0.71 '; type='function';}, 
	{name='the_attachment_link'; match='the_attachment_link'; definition='the_attachment_link($id=0, $fullsize=false, $deprecated=false, $permalink=false)'; description='Display an attachment page link using an image or icon. 
'; file='/wp-includes/post-template.php, line: 1128'; params='@param int $id Optional. Post ID.  
@param bool $fullsize Optional, default is false. Whether to use full size.  
@param bool $deprecated Deprecated. Not used.  
@param bool $permalink Optional, default is false. Whether to include permalink.  '; since='2.0.0 '; type='function';}, 
	{name='the_attachment_links'; match='the_attachment_links'; definition='the_attachment_links($id=false)'; description='{ '; file='/wp-admin/includes/template.php, line: 714'; type='function';}, 
	{name='the_author'; match='the_author'; definition='the_author($deprecated=\'\', $deprecated_echo=true)'; description='Display the name of the author of the current post. 
The behavior of this function is based off of old functionality predating get_the_author(). This function is not deprecated, but is designed to echo the value from get_the_author() and as an result of any old theme that might still use the old behavior will also pass the value from get_the_author(). 
The normal, expected behavior of this function is to echo the author and not return it. However, backwards compatiability has to be maintained. 
@see get_the_author() <code>string $deprecated Deprecated. string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it. string The author\'s display name, from get_the_author(). </code> '; file='/wp-includes/author-template.php, line: 51'; since='0.71 '; type='function';}, 
	{name='the_author_ID'; match='the_author_ID'; definition='the_author_ID()'; description='Display the ID of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1668'; since='0.71 '; type='function';}, 
	{name='the_author_aim'; match='the_author_aim'; definition='the_author_aim()'; description='Display the AIM address of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1596'; since='0.71 '; type='function';}, 
	{name='the_author_description'; match='the_author_description'; definition='the_author_description()'; description='Display the description of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1344'; since='1.0.0 '; type='function';}, 
	{name='the_author_email'; match='the_author_email'; definition='the_author_email()'; description='Display the email of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1484'; since='0.71 '; type='function';}, 
	{name='the_author_firstname'; match='the_author_firstname'; definition='the_author_firstname()'; description='Display the first name of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1400'; since='0.71 '; type='function';}, 
	{name='the_author_icq'; match='the_author_icq'; definition='the_author_icq()'; description='Display the ICQ number of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1512'; since='0.71 '; type='function';}, 
	{name='the_author_lastname'; match='the_author_lastname'; definition='the_author_lastname()'; description='Display the last name of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1428'; since='0.71 '; type='function';}, 
	{name='the_author_link'; match='the_author_link'; definition='the_author_link()'; description='Display either author&apos;s link or author&apos;s name. 
If the author has a home page set, echo an HTML link, otherwise just echo the author&apos;s name. 
<code>2.1 uses 65. </code> '; file='/wp-includes/author-template.php, line: 159'; type='function';}, 
	{name='the_author_login'; match='the_author_login'; definition='the_author_login()'; description='Display the login name of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1372'; since='0.71 '; type='function';}, 
	{name='the_author_meta'; match='the_author_meta'; definition='the_author_meta($field=\'\', $user_id=false)'; description='Retrieve the requested data of the author of the current post. <code>2.8.0 string $field selects the field of the users record. int $user_id Optional. User ID. string The author\'s field from the current author\'s DB object. </code> '; file='/wp-includes/author-template.php, line: 128'; type='function';}, 
	{name='the_author_msn'; match='the_author_msn'; definition='the_author_msn()'; description='Display the MSN address of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1568'; since='0.71 '; type='function';}, 
	{name='the_author_nickname'; match='the_author_nickname'; definition='the_author_nickname()'; description='Display the nickname of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1456'; since='0.71 '; type='function';}, 
	{name='the_author_posts'; match='the_author_posts'; definition='the_author_posts()'; description='Display the number of posts by the author of the current post. 
<code>0.71 uses 68. </code> '; file='/wp-includes/author-template.php, line: 183'; type='function';}, 
	{name='the_author_posts_link'; match='the_author_posts_link'; definition='the_author_posts_link($deprecated=\'\')'; description='Display an HTML link to the author page of the author of the current post. 
Does just echo get_author_posts_url() function, like the others do. The reason for this, is that another function is used to help in printing the link to the author&apos;s posts. 
<code>1.2.0 uses 69. uses 70. uses 71. string $deprecated Deprecated. </code> '; file='/wp-includes/author-template.php, line: 201'; type='function';}, 
	{name='the_author_url'; match='the_author_url'; definition='the_author_url()'; description='Display the URL to the home page of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1640'; since='0.71 '; type='function';}, 
	{name='the_author_yim'; match='the_author_yim'; definition='the_author_yim()'; description='Display the Yahoo! IM name of the author of the current post. 
@see the_author_meta() '; file='/wp-includes/deprecated.php, line: 1540'; since='0.71 '; type='function';}, 
	{name='the_category'; match='the_category'; definition='the_category($separator=\'\', $parents=\'\', $post_id=false)'; description='Display the category list for the post. 
'; file='/wp-includes/category-template.php, line: 250'; params='@param string $separator Optional, default is empty string. Separator for between the categories.  
@param string $parents Optional. How to display the parents.  
@param int $post_id Optional. Post ID to retrieve categories.  '; since='0.71 '; type='function';}, 
	{name='the_category_ID'; match='the_category_ID'; definition='the_category_ID($echo=true)'; description='Return or Print Category ID. 
@see get_the_category() '; file='/wp-includes/deprecated.php, line: 81'; params='@param bool $echo  '; return='null|int '; since='0.71 '; type='function';}, 
	{name='the_category_head'; match='the_category_head'; definition='the_category_head($before=\'\', $after=\'\')'; description='Print category with optional text before and after. 
@see get_the_category_by_ID() '; file='/wp-includes/deprecated.php, line: 105'; params='@param string $before  
@param string $after  '; since='0.71 '; type='function';}, 
	{name='the_category_rss'; match='the_category_rss'; definition='the_category_rss($type=null)'; description=''; file='/wp-includes/feed.php, line: 343'; type='function';}, 
	{name='the_comment'; match='the_comment'; definition='the_comment()'; description='Iterate comment index in the comment loop. 
@see <code>WP_Query::the_comment()</code> 
'; file='/wp-includes/query.php, line: 806'; return='object '; since='2.2.0 '; uses='$wp_query'; type='function';}, 
	{name='the_content'; match='the_content'; definition='the_content($more_link_text=null, $stripteaser=0)'; description='Display the post content. 
'; file='/wp-includes/post-template.php, line: 165'; params='@param string $more_link_text Optional. Content for when there is more text.  
@param string $stripteaser Optional. Teaser content before the more text.  '; since='0.71 '; type='function';}, 
	{name='the_content_feed'; match='the_content_feed'; definition='the_content_feed($feed_type=null)'; description=''; file='/wp-includes/feed.php, line: 163'; type='function';}, 
	{name='the_content_rss'; match='the_content_rss'; definition='the_content_rss($more_link_text=\'(more...)\', $stripteaser=0, $more_file=\'\', $cut=0, $encode_html=0)'; description=''; file='/wp-includes/deprecated.php, line: 1707'; type='function';}, 
	{name='the_date'; match='the_date'; definition='the_date($d=\'\', $before=\'\', $after=\'\', $echo=true)'; description='Display or Retrieve the date the current $post was written (once per date) 
Will only output the date if the current post&apos;s date is different from the previous one output. 
i.e. Only one date listing will show per day worth of posts shown in the loop, even if the function is called several times for each post. 
HTML output can be filtered with &apos;the_date&apos;. Date string output can be filtered with &apos;get_the_date&apos;. 
'; file='/wp-includes/general-template.php, line: 1348'; params='@param string $d Optional. PHP date format defaults to the date_format option if not specified.  
@param string $before Optional. Output before the date.  
@param string $after Optional. Output after the date.  
@param bool $echo Optional, default is display. Whether to echo the date or return it.  '; return='string|null Null if displaying, string if retrieving. '; since='0.71 '; uses='get_the_date() '; type='function';}, 
	{name='the_date_xml'; match='the_date_xml'; definition='the_date_xml()'; description='Outputs the date in iso8601 format for xml files. 
'; file='/wp-includes/general-template.php, line: 1323'; since='1.0.0 '; type='function';}, 
	{name='the_editor'; match='the_editor'; definition='the_editor($content, $id=\'content\', $prev_id=\'title\', $media_buttons=true, $tab_index=2, $extended=true)'; description='Display visual editor forms: TinyMCE, or HTML, or both. 
The amount of rows the text area will have for the content has to be between 3 and 100 or will default at 12. There is only one option used for all users, named &apos;default_post_edit_rows&apos;. 
If the user can not use the rich editor (TinyMCE), then the switch button will not be displayed. 
'; file='/wp-includes/general-template.php, line: 1789'; params='@param string $content Textarea content.  
@param string $id Optional, default is \'content\'. HTML ID attribute value.  
@param string $prev_id Optional, default is \'title\'. HTML ID name for switching back and forth between visual editors.  
@param bool $media_buttons Optional, default is true. Whether to display media buttons.  
@param int $tab_index Optional, default is 2. Tabindex for textarea element.  '; since='2.1.0 '; type='function';}, 
	{name='the_excerpt'; match='the_excerpt'; definition='the_excerpt()'; description='Display the post excerpt. 
'; file='/wp-includes/post-template.php, line: 249'; since='0.71 '; uses='apply_filters() Calls \'the_excerpt\' hook on post excerpt. '; type='function';}, 
	{name='the_excerpt_rss'; match='the_excerpt_rss'; definition='the_excerpt_rss()'; description=''; file='/wp-includes/feed.php, line: 175'; type='function';}, 
	{name='the_feed_link'; match='the_feed_link'; definition='the_feed_link($anchor, $feed=\'\')'; description='Display the permalink for the feed type. 
'; file='/wp-includes/link-template.php, line: 417'; params='@param string $anchor The link\'s anchor text.  
@param string $feed Optional, defaults to default feed. Feed type.  '; since='3.0.0 '; type='function';}, 
	{name='the_generator'; match='the_generator'; definition='the_generator($type)'; description='Display the generator XML or Comment for RSS, ATOM, etc. 
Returns the correct generator type for the requested output format. Allows for a plugin to filter generators overall the the_generator filter. 

'; file='/wp-includes/general-template.php, line: 2183'; params='@param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).  '; since='2.5.0 '; uses='apply_filters() Calls \'the_generator\' hook.'; type='function';}, 
	{name='the_guid'; match='the_guid'; definition='the_guid($id=0)'; description='Display the Post Global Unique Identifier (guid). 
The guid will appear to be a link, but should not be used as an link to the post. The reason you should not use it as a link, is because of moving the blog across domains. 
Url is escaped to make it xml safe 
'; file='/wp-includes/post-template.php, line: 135'; params='@param int $id Optional. Post ID.  '; since='1.5.0 '; type='function';}, 
	{name='the_media_upload_tabs'; match='the_media_upload_tabs'; definition='the_media_upload_tabs()'; description='{ '; file='/wp-admin/includes/media.php, line: 64'; type='function';}, 
	{name='the_meta'; match='the_meta'; definition='the_meta()'; description='Display list of post custom fields. '; file='/wp-includes/post-template.php, line: 735'; type='function';}, 
	{name='the_modified_author'; match='the_modified_author'; definition='the_modified_author()'; description='Display the name of the author who last edited the current post. 
@see get_the_author() '; file='/wp-includes/author-template.php, line: 86'; return='string The author&apos;s display name, from get_the_modified_author(). '; since='2.8 '; type='function';}, 
	{name='the_modified_date'; match='the_modified_date'; definition='the_modified_date($d=\'\', $before=\'\', $after=\'\', $echo=true)'; description='Display the date on which the post was last modified. 
'; file='/wp-includes/general-template.php, line: 1402'; params='@param string $d Optional. PHP date format defaults to the date_format option if not specified.  
@param string $before Optional. Output before the date.  
@param string $after Optional. Output after the date.  
@param bool $echo Optional, default is display. Whether to echo the date or return it.  '; return='string|null Null if displaying, string if retrieving. '; since='2.1.0 '; type='function';}, 
	{name='the_modified_time'; match='the_modified_time'; definition='the_modified_time($d=\'\')'; description='Display the time at which the post was last modified. 
'; file='/wp-includes/general-template.php, line: 1490'; params='@param string $d Optional Either \'G\', \'U\', or php date format defaults to the value specified in the time_format option.  '; since='2.0.0 '; type='function';}, 
	{name='the_permalink'; match='the_permalink'; definition='the_permalink()'; description='Display the permalink for the current post. 
'; file='/wp-includes/link-template.php, line: 15'; since='1.2.0 '; uses='apply_filters() Calls \'the_permalink\' filter on the permalink string. '; type='function';}, 
	{name='the_permalink_rss'; match='the_permalink_rss'; definition='the_permalink_rss()'; description=''; file='/wp-includes/feed.php, line: 188'; type='function';}, 
	{name='the_post'; match='the_post'; definition='the_post()'; description='Iterate the post index in the loop. 
@see <code>WP_Query::the_post()</code> '; file='/wp-includes/query.php, line: 773'; since='1.5.0 '; uses='$wp_query '; type='function';}, 
	{name='the_post_password'; match='the_post_password'; definition='the_post_password()'; description='Display the post password. 
The password is passed through <code>esc_attr()</code> to ensure that it is safe for placing in an html attribute. 
'; file='/wp-admin/includes/template.php, line: 1392'; since='2.7.0 '; uses='attr '; type='function';}, 
	{name='the_post_thumbnail'; match='the_post_thumbnail'; definition='the_post_thumbnail($size=\'post-thumbnail\', $attr=\'\')'; description='Display Post Thumbnail. 
'; file='/wp-includes/post-thumbnail-template.php, line: 46'; params='@param int $size Optional. Image size. Defaults to \'post-thumbnail\', which theme sets using set_post_thumbnail_size( $width, $height, $crop_flag );.  
@param string array $attr Optional. Query string or array of attributes.  '; since='2.9.0 '; type='function';}, 
	{name='the_search_query'; match='the_search_query'; definition='the_search_query()'; description='Display the contents of the search query variable. 
The search query string is passed through <code>esc_attr()</code> to ensure that it is safe for placing in an html attribute. 
'; file='/wp-includes/general-template.php, line: 1882'; since='2.1.0 '; uses='esc_attr() '; type='function';}, 
	{name='the_shortlink'; match='the_shortlink'; definition='the_shortlink($text=\'\', $title=\'\', $before=\'\', $after=\'\')'; description='Display the Short Link for a Post 
Must be called from inside &quot;The Loop&quot; 
Call like the_shortlink(__(&apos;Shortlinkage FTW&apos;)) 
'; file='/wp-includes/link-template.php, line: 2460'; params='@param string $text Optional The link text or HTML to be displayed. Defaults to \'This is the short link.\'  
@param string $title Optional The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.  
@param string $before Optional HTML to display before the link.  
@param string $before Optional HTML to display after the link.  '; since='3.0.0 '; type='function';}, 
	{name='the_tags'; match='the_tags'; definition='the_tags($before=null, $sep=\', $after=\'\')'; description='Retrieve the tags for a post. 
'; file='/wp-includes/category-template.php, line: 1028'; params='@param string $before Optional. Before list.  
@param string $sep Optional. Separate items using this.  
@param string $after Optional. After list.  '; return='string '; since='2.3.0 '; type='function';}, 
	{name='the_taxonomies'; match='the_taxonomies'; definition='the_taxonomies($args=array())'; description='Display the taxonomies of a post with available options. 
This function can be used within the loop to display the taxonomies for a post without specifying the Post ID. You can also use it outside the Loop to display the taxonomies for a specific post. 
The available defaults are: &apos;post&apos; : default is 0. The post ID to get taxonomies of. &apos;before&apos; : default is empty string. Display before taxonomies list. &apos;sep&apos; : default is empty string. Separate every taxonomy with value in this. &apos;after&apos; : default is empty string. Display this after the taxonomies list. &apos;template&apos; : The template to use for displaying the taxonomy terms. 

'; file='/wp-includes/taxonomy.php, line: 2944'; params='@param array $args Override the defaults.  '; since='2.5.0 '; uses='get_the_taxonomies()'; type='function';}, 
	{name='the_terms'; match='the_terms'; definition='the_terms($id=0, $taxonomy, $before=\'\', $sep=\', $after=\'\')'; description='Display the terms in a list. 
'; file='/wp-includes/category-template.php, line: 1144'; params='@param int $id Post ID.  
@param string $taxonomy Taxonomy name.  
@param string $before Optional. Before list.  
@param string $sep Optional. Separate items using this.  
@param string $after Optional. After list.  '; return='null|bool False on WordPress error. Returns null when displaying. '; since='2.5.0 '; type='function';}, 
	{name='the_time'; match='the_time'; definition='the_time($d=\'\')'; description='Display the time at which the post was written. 
'; file='/wp-includes/general-template.php, line: 1437'; params='@param string $d Either \'G\', \'U\', or php date format.  '; since='0.71 '; type='function';}, 
	{name='the_title'; match='the_title'; definition='the_title($before=\'\', $after=\'\', $echo=true)'; description='Display or retrieve the current post title with optional content. 
'; file='/wp-includes/post-template.php, line: 43'; params='@param string $before Optional. Content to prepend to the title.  
@param string $after Optional. Content to append to the title.  
@param bool $echo Optional, default to true.Whether to display or return.  '; return='null|string Null on no title. String if $echo parameter is false. '; since='0.71 '; type='function';}, 
	{name='the_title_attribute'; match='the_title_attribute'; definition='the_title_attribute($args=\'\')'; description='Sanitize the current title when retrieving or displaying. 
Works like <code>the_title()</code> , except the parameters can be in a string or an array. See the function for what can be override in the $args parameter. 
The title before it is displayed will have the tags stripped and <code>esc_attr()</code> before it is passed to the user or displayed. The default as with <code>the_title()</code> , is to display the title. 
'; file='/wp-includes/post-template.php, line: 72'; params='@param string array $args Optional. Override the defaults.  '; return='string|null Null on failure or display. String when echo is false. '; since='2.3.0 '; type='function';}, 
	{name='the_title_rss'; match='the_title_rss'; definition='the_title_rss()'; description=''; file='/wp-includes/feed.php, line: 128'; type='function';}, 
	{name='the_weekday'; match='the_weekday'; definition='the_weekday()'; description='Display the weekday on which the post was written. 
'; file='/wp-includes/general-template.php, line: 1540'; since='0.71 '; uses='$wp_locale 
$post '; type='function';}, 
	{name='the_weekday_date'; match='the_weekday_date'; definition='the_weekday_date($before=\'\', $after=\'\')'; description='Display the weekday on which the post was written. 
Will only output the weekday if the current post&apos;s weekday is different from the previous one output. 
'; file='/wp-includes/general-template.php, line: 1558'; params='@param string $before Optional Output before the date.  
@param string $after Optional Output after the date.  '; since='0.71 '; type='function';}, 
	{name='the_widget'; match='the_widget'; definition='the_widget($widget, $instance=array(), $args=array())'; description='Output an arbitrary widget as a template tag 
'; file='/wp-includes/widgets.php, line: 1193'; params='@param string $widget the widget\'s PHP class name (see default-widgets.php)  
@param array $instance the widget\'s instance settings  
@param array $args the widget\'s sidebar args  '; return='void '; since='2.8 '; type='function';}, 
	{name='theme_update_available'; match='theme_update_available'; definition='theme_update_available($theme)'; description='Check if there is an update for a theme available. 
Will display link, if there is an update available. 
'; file='/wp-admin/includes/theme.php, line: 226'; params='@param object $theme Theme data object.  '; return='bool False if no valid info was passed. '; since='2.7.0 '; type='function';}, 
	{name='themes_api'; match='themes_api'; definition='themes_api($action, $args=null)'; description='Retrieve theme installer pages from WordPress Themes API. 
It is possible for a theme to override the Themes API result with three filters. Assume this is for themes, which can extend on the Theme Info to offer more choices. This is very powerful and must be used with care, when overridding the filters. 
The first filter, &apos;themes_api_args&apos;, is for the args and gives the action as the second parameter. The hook for &apos;themes_api_args&apos; must ensure that an object is returned. 
The second filter, &apos;themes_api&apos;, is the result that would be returned. 
'; file='/wp-admin/includes/theme.php, line: 388'; params='@param string $action  
@param array object $args Optional. Arguments to serialize for the Theme Info API.  '; return='mixed '; since='2.8.0 '; type='function';}, 
	{name='timer_start'; match='timer_start'; definition='timer_start()'; description='PHP 4 standard microtime start capture. 
'; file='/wp-includes/load.php, line: 192'; return='bool Always returns true. '; since='0.71 '; type='function';}, 
	{name='timer_stop'; match='timer_stop'; definition='timer_stop($display=0, $precision=3)'; description='Return and/or display the time from the page start to when function is called. 
You can get the results and print them by doing: $nTimePageTookToExecute = timer_stop(); echo $nTimePageTookToExecute; 
Or instead, you can do: timer_stop(1); which will do what the above does. If you need the result, you can assign it to a variable, but most cases, you only need to echo it. 

'; file='/wp-includes/load.php, line: 223'; params='@param int $display Use \'0\' or null to not echo anything and 1 to echo the total time  
@param int $precision The amount of digits from the right of the decimal to display. Default is 3.  '; return='float The &quot;second.microsecond&quot; finished time calculation '; since='0.71 '; type='function';}, 
	{name='tinymce_include'; match='tinymce_include'; definition='tinymce_include()'; description='@see wp_tiny_mce() '; file='/wp-admin/includes/deprecated.php, line: 21'; since='2.1 '; type='function';}, 
	{name='touch_time'; match='touch_time'; definition='touch_time($edit=1, $for_post=1, $tab_index=0, $multi=0)'; description='{ '; file='/wp-admin/includes/template.php, line: 587'; type='function';}, 
	{name='trackback'; match='trackback'; definition='trackback($trackback_url, $title, $excerpt, $ID)'; description='Send a Trackback. 
Updates database when sending trackback to prevent duplicates. 

'; file='/wp-includes/comment.php, line: 1862'; params='@param string $trackback_url URL to send trackbacks.  
@param string $title Title of post.  
@param string $excerpt Excerpt of post.  
@param int $ID Post ID.  '; return='mixed Database query from update. '; since='0.71 '; uses='$wpdb'; type='function';}, 
	{name='trackback_rdf'; match='trackback_rdf'; definition='trackback_rdf($deprecated=\'\')'; description='Generates and displays the RDF for the trackback information of current post. 
Deprecated in 3.0.0, and restored in 3.0.1. 
'; file='/wp-includes/comment-template.php, line: 742'; params='@param int $deprecated Not used (Was $timezone = 0)  '; since='0.71 '; type='function';}, 
	{name='trackback_response'; match='trackback_response'; definition='trackback_response($error=0, $error_message=\'\')'; description='trackback_response() - Respond with error or success XML message 
'; file='/wp-trackback.php, line: 19'; params='@param int bool $error Whether there was an error  
@param string $error_message Error message if an error occurred  '; type='function';}, 
	{name='trackback_url'; match='trackback_url'; definition='trackback_url($deprecated_echo=true)'; description='Displays the current post&apos;s trackback URL. 

'; file='/wp-includes/comment-template.php, line: 724'; params='@param bool $deprecated_echo Remove backwards compat in 2.5  '; return='void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead. '; since='0.71 '; uses='get_trackback_url() Gets the trackback url for the current post'; type='function';}, 
	{name='trackback_url_list'; match='trackback_url_list'; definition='trackback_url_list($tb_list, $post_id)'; description='Do trackbacks for a list of URLs. 
'; file='/wp-includes/post.php, line: 3088'; params='@param string $tb_list Comma separated list of URLs  
@param int $post_id Post ID  '; since='1.0.0 '; type='function';}, 
	{name='trailingslashit'; match='trailingslashit'; definition='trailingslashit($string)'; description='Appends a trailing slash. 
Will remove trailing slash if it exists already before adding a trailing slash. This prevents double slashing a string or path. 
The primary use of this is for paths and thus should be used for paths. It is not restricted to paths and offers no specific path support. 

'; file='/wp-includes/formatting.php, line: 1185'; params='@param string $string What to add the trailing slash to.  '; return='string String with trailing slash added. '; since='1.2.0 '; uses='untrailingslashit() Unslashes string if it was slashed already.'; type='function';}, 
	{name='translate'; match='translate'; definition='translate($text, $domain=\'default\')'; description='Retrieves the translation of $text. If there is no translation, or the domain isn&apos;t loaded the original text is returned. 
@see __() Don&apos;t use translate() directly, use __() 
'; file='/wp-includes/l10n.php, line: 67'; params='@param string $text Text to translate.  
@param string $domain Domain to retrieve the translated text.  '; return='string Translated text '; since='2.2.0 '; uses='apply_filters() Calls \'gettext\' on domain translated text with the untranslated text as second parameter.'; type='function';}, 
	{name='translate_nooped_plural'; match='translate_nooped_plural'; definition='translate_nooped_plural($nooped_plural, $count, $domain=\'default\')'; description='Translate the result of _n_noop() or _nx_noop() 
'; file='/wp-includes/l10n.php, line: 298'; params='@param array $nooped_plural array with singular, plural and context keys, usually the result of _n_noop() or _nx_noop()  
@param int $count number of objects  
@param string $domain Optional. The domain identifier the text should be retrieved in  '; since='3.1 '; type='function';}, 
	{name='translate_smiley'; match='translate_smiley'; definition='translate_smiley($smiley)'; description='Convert one smiley code to the icon graphic file equivalent. 
Looks up one smiley code in the $wpsmiliestrans global array and returns an string for that smiley. 
'; file='/wp-includes/formatting.php, line: 1436'; params='@param string $smiley Smiley code to convert to image.  '; return='string Image string for smiley. '; since='2.8.0 '; type='function';}, 
	{name='translate_user_role'; match='translate_user_role'; definition='translate_user_role($name)'; description='Translates role name. Since the role names are in the database and not in the source there are dummy gettext calls to get them into the POT file and this function properly translates them back. 
The before_last_bar() call is needed, because older installs keep the roles using the old context format: &apos;Role name|User role&apos; and just skipping the content after the last bar is easier than fixing them in the DB. New installs won&apos;t suffer from that problem. '; file='/wp-includes/l10n.php, line: 513'; type='function';}, 
	{name='translate_with_context'; match='translate_with_context'; definition='translate_with_context($text, $domain=\'default\')'; description='Translates $text like translate(), but assumes that the text contains a context after its last vertical bar. 
@see _x() '; file='/wp-includes/deprecated.php, line: 1812'; params='@param string $text Text to translate  
@param string $domain Domain to retrieve the translated text  '; return='string Translated text '; since='2.5 '; uses='translate() '; type='function';}, 
	{name='translate_with_gettext_context'; match='translate_with_gettext_context'; definition='translate_with_gettext_context($text, $context, $domain=\'default\')'; description=''; file='/wp-includes/l10n.php, line: 80'; type='function';}, 
	{name='type_url_form_audio'; match='type_url_form_audio'; definition='type_url_form_audio()'; description='{ '; file='/wp-admin/includes/media.php, line: 2164'; type='function';}, 
	{name='type_url_form_file'; match='type_url_form_file'; definition='type_url_form_file()'; description='{ '; file='/wp-admin/includes/media.php, line: 2224'; type='function';}, 
	{name='type_url_form_image'; match='type_url_form_image'; definition='type_url_form_image()'; description='{ '; file='/wp-admin/includes/media.php, line: 2082'; type='function';}, 
	{name='type_url_form_video'; match='type_url_form_video'; definition='type_url_form_video()'; description='{ '; file='/wp-admin/includes/media.php, line: 2194'; type='function';}, 
	{name='undismiss_core_update'; match='undismiss_core_update'; definition='undismiss_core_update($version, $locale)'; description=''; file='/wp-admin/includes/update.php, line: 65'; type='function';}, 
	{name='uninstall_plugin'; match='uninstall_plugin'; definition='uninstall_plugin($plugin)'; description='Uninstall a single plugin. 
Calls the uninstall hook, if it is available. 
'; file='/wp-admin/includes/plugin.php, line: 813'; params='@param string $plugin Relative plugin path from Plugin Directory.  '; since='2.7.0 '; type='function';}, 
	{name='unload_textdomain'; match='unload_textdomain'; definition='unload_textdomain($domain)'; description='Unloads translations for a domain 
'; file='/wp-includes/l10n.php, line: 354'; params='@param string $domain Textdomain to be unloaded  '; return='bool Whether textdomain was unloaded '; since='3.0.0 '; type='function';}, 
	{name='unregister_default_headers'; match='unregister_default_headers'; definition='unregister_default_headers($header)'; description='Unregister default headers. 
This function must be called after register_default_headers() has already added the header you want to remove. 
@see register_default_headers() '; file='/wp-includes/theme.php, line: 1635'; params='@param string array $header The header string id (key of array) to remove, or an array thereof.  '; return='True on success, false on failure. '; since='3.0.0 '; type='function';}, 
	{name='unregister_nav_menu'; match='unregister_nav_menu'; definition='unregister_nav_menu($location)'; description='Unregisters a navigation menu for a theme. 
'; file='/wp-includes/nav-menu.php, line: 88'; params='@param array $location the menu location identifier '; return='bool True on success, false on failure. '; type='function';}, 
	{name='unregister_setting'; match='unregister_setting'; definition='unregister_setting($option_group, $option_name, $sanitize_callback=\'\')'; description='Unregister a setting 
'; file='/wp-admin/includes/plugin.php, line: 1621'; params='@param unknown_type $option_group  
@param unknown_type $option_name  
@param unknown_type $sanitize_callback  '; return='unknown '; since='2.7.0 '; type='function';}, 
	{name='unregister_sidebar'; match='unregister_sidebar'; definition='unregister_sidebar($name)'; description='Removes a sidebar from the list. 

'; file='/wp-includes/widgets.php, line: 576'; params='@param string $name The ID of the sidebar when it was added.  '; since='2.2.0 '; uses='$wp_registered_sidebars Stores the new sidebar in this array by sidebar ID.'; type='function';}, 
	{name='unregister_sidebar_widget'; match='unregister_sidebar_widget'; definition='unregister_sidebar_widget($id)'; description='Alias of <code>wp_unregister_sidebar_widget()</code> . 
@see wp_unregister_sidebar_widget() '; file='/wp-includes/deprecated.php, line: 2201'; params='@param int string $id Widget ID.  '; since='2.2.0 '; type='function';}, 
	{name='unregister_widget'; match='unregister_widget'; definition='unregister_widget($widget_class)'; description='Unregister a widget 
Unregisters a <code>WP_Widget</code> widget. Useful for unregistering default widgets. Run within a function hooked to the widgets_init action. 
@see <code>WP_Widget</code> <code>WP_Widget_Factory</code> 
'; file='/wp-includes/widgets.php, line: 448'; params='@param string $widget_class The name of a class that extends  '; since='2.8.0 '; type='function';}, 
	{name='unregister_widget_control'; match='unregister_widget_control'; definition='unregister_widget_control($id)'; description='Alias of <code>wp_unregister_widget_control()</code> . 
@see wp_unregister_widget_control() '; file='/wp-includes/deprecated.php, line: 2260'; params='@param int string $id Widget ID.  '; since='2.2.0 '; type='function';}, 
	{name='unstick_post'; match='unstick_post'; definition='unstick_post($post_id)'; description='Unstick a post. 
Sticky posts should be displayed at the top of the front page. 
'; file='/wp-includes/post.php, line: 1770'; params='@param int $post_id Post ID.  '; since='2.7.0 '; type='function';}, 
	{name='untrailingslashit'; match='untrailingslashit'; definition='untrailingslashit($string)'; description='Removes trailing slash if it exists. 
The primary use of this is for paths and thus should be used for paths. It is not restricted to paths and offers no specific path support. 
'; file='/wp-includes/formatting.php, line: 1200'; params='@param string $string What to remove the trailing slash from.  '; return='string String without the trailing slash. '; since='2.2.0 '; type='function';}, 
	{name='unzip_file'; match='unzip_file'; definition='unzip_file($file, $to)'; description='Unzip&apos;s a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction. Assumes that WP_Filesystem() has already been called and set up. Does not extract a root-level __MACOSX directory, if present. 
Attempts to increase the PHP Memory limit to 256M before uncompressing, However, The most memory required shouldn&apos;t be much larger than the Archive itself. 
'; file='/wp-admin/includes/file.php, line: 514'; params='@param string $file Full path and filename of zip archive  
@param string $to Full path on the filesystem to extract archive to  '; return='mixed <code>WP_Error</code> on failure, True on success '; since='2.5.0 '; type='function';}, 
	{name='update_archived'; match='update_archived'; definition='update_archived($id, $archived)'; description='Update the &apos;archived&apos; status of a particular blog. 
'; file='/wp-includes/ms-blogs.php, line: 603'; params='@param int $id The blog id  
@param string $archived The new status  '; return='string $archived '; since='MU '; type='function';}, 
	{name='update_attached_file'; match='update_attached_file'; definition='update_attached_file($attachment_id, $file)'; description='Update attachment file path based on attachment ID. 
Used to update the file path of the attachment, which uses post meta name &apos;_wp_attached_file&apos; to store the path of the attachment. 

'; file='/wp-includes/post.php, line: 195'; params='@param int $attachment_id Attachment ID  
@param string $file File path for the attachment  '; return='bool False on failure, true on success. '; since='2.1.0 '; uses='apply_filters() Calls \'update_attached_file\' on file path and attachment ID.'; type='function';}, 
	{name='update_blog_details'; match='update_blog_details'; definition='update_blog_details($blog_id, $details=array())'; description='Update the details for a blog. Updates the blogs table for a given blog id. 
'; file='/wp-includes/ms-blogs.php, line: 269'; params='@param int $blog_id Blog ID  
@param array $details Array of details keyed by blogs table field names.  '; return='bool True if update succeeds, false otherwise. '; since='MU '; type='function';}, 
	{name='update_blog_option'; match='update_blog_option'; definition='update_blog_option($id, $key, $value, $deprecated=null)'; description='Update an option for a particular blog. 
'; file='/wp-includes/ms-blogs.php, line: 422'; params='@param int $id The blog id  
@param string $key The option key  
@param mixed $value The option value  '; since='MU '; type='function';}, 
	{name='update_blog_public'; match='update_blog_public'; definition='update_blog_public($old_value, $value)'; description='Update this blog&apos;s &apos;public&apos; setting in the global blogs table. 
Public blogs have a setting of 1, private blogs are 0. 

'; file='/wp-includes/ms-functions.php, line: 1913'; params='@param int $old_value  
@param int $value The new public value  '; return='bool '; since='MU '; uses='update_blog_status()'; type='function';}, 
	{name='update_blog_status'; match='update_blog_status'; definition='update_blog_status($blog_id, $pref, $value, $deprecated=null)'; description='Update a blog details field. 
'; file='/wp-includes/ms-blogs.php, line: 618'; params='@param int $blog_id BLog ID  
@param string $pref A field name  
@param string $value Value for $pref  '; return='string $value '; since='MU '; type='function';}, 
	{name='update_category_cache'; match='update_category_cache'; definition='update_category_cache()'; description='Update the categories cache. 
This function does not appear to be used anymore or does not appear to be needed. It might be a legacy function left over from when there was a need for updating the category cache. 

'; file='/wp-includes/deprecated.php, line: 2599'; return='bool Always return True '; since='1.5.0 '; type='function';}, 
	{name='update_comment_cache'; match='update_comment_cache'; definition='update_comment_cache($comments)'; description=''; file='/wp-includes/comment.php, line: 1946'; type='function';}, 
	{name='update_comment_meta'; match='update_comment_meta'; definition='update_comment_meta($comment_id, $meta_key, $meta_value, $prev_value=\'\')'; description='Update comment meta field based on comment ID. 
Use the $prev_value parameter to differentiate between meta fields with the same key and comment ID. 
If the meta field for the comment does not exist, it will be added. 

'; file='/wp-includes/comment.php, line: 569'; params='@param int $comment_id Comment ID.  
@param string $meta_key Metadata key.  
@param mixed $meta_value Metadata value.  
@param mixed $prev_value Optional. Previous value to check before removing.  '; return='bool False on failure, true if success. '; since='2.9.0 '; uses='update_metadata '; type='function';}, 
	{name='update_gallery_tab'; match='update_gallery_tab'; definition='update_gallery_tab($tabs)'; description='{ '; file='/wp-admin/includes/media.php, line: 35'; type='function';}, 
	{name='update_home_siteurl'; match='update_home_siteurl'; definition='update_home_siteurl($old_value, $value)'; description='If siteurl or home changed, flush rewrite rules. 
'; file='/wp-admin/includes/misc.php, line: 202'; params='@param unknown_type $old_value  
@param unknown_type $value  '; since='2.1.0 '; type='function';}, 
	{name='update_meta'; match='update_meta'; definition='update_meta($meta_id, $meta_key, $meta_value)'; description='{ '; file='/wp-admin/includes/post.php, line: 787'; type='function';}, 
	{name='update_meta_cache'; match='update_meta_cache'; definition='update_meta_cache($meta_type, $object_ids)'; description='Update the metadata cache for the specified objects. 

'; file='/wp-includes/meta.php, line: 294'; params='@param string $meta_type Type of object metadata is for (e.g., comment, post, or user)  
@param int array $object_ids array or comma delimited list of object IDs to update cache for  '; return='mixed Metadata cache for the specified objects, or false on failure. '; since='2.9.0 '; uses='$wpdb WordPress database object for queries.'; type='function';}, 
	{name='update_metadata'; match='update_metadata'; definition='update_metadata($meta_type, $object_id, $meta_key, $meta_value, $prev_value=\'\')'; description='Update metadata for the specified object. If no value already exists for the specified object ID and metadata key, the metadata will be added. 

'; file='/wp-includes/meta.php, line: 99'; params='@param string $meta_type Type of object metadata is for (e.g., comment, post, or user)  
@param int $object_id ID of the object metadata is for  
@param string $meta_key Metadata key  
@param string $meta_value Metadata value  
@param string $prev_value Optional. If specified, only update existing metadata entries with the specified value. Otherwise, update all entries.  '; return='bool True on successful update, false on failure. '; since='2.9.0 '; uses='$wpdb WordPress database object for queries. 
do_action() Calls \'update_{$meta_type}_meta\' before updating metadata with meta_id of metadata entry to update, object ID, meta key, and meta value 
do_action() Calls \'updated_{$meta_type}_meta\' after updating metadata with meta_id of updated metadata entry, object ID, meta key, and meta value'; type='function';}, 
	{name='update_nag'; match='update_nag'; definition='update_nag()'; description=''; file='/wp-admin/includes/update.php, line: 118'; type='function';}, 
	{name='update_object_term_cache'; match='update_object_term_cache'; definition='update_object_term_cache($object_ids, $object_type)'; description=''; file='/wp-includes/taxonomy.php, line: 2596'; type='function';}, 
	{name='update_option'; match='update_option'; definition='update_option($option, $newvalue)'; description=''; file='/wp-includes/functions.php, line: 512'; type='function';}, 
	{name='update_option_new_admin_email'; match='update_option_new_admin_email'; definition='update_option_new_admin_email($old_value, $value)'; description=''; file='/wp-admin/includes/ms.php, line: 209'; type='function';}, 
	{name='update_page_cache'; match='update_page_cache'; definition='update_page_cache($pages)'; description=''; file='/wp-includes/post.php, line: 4369'; type='function';}, 
	{name='update_post_cache'; match='update_post_cache'; definition='update_post_cache($posts)'; description=''; file='/wp-includes/post.php, line: 4298'; type='function';}, 
	{name='update_post_caches'; match='update_post_caches'; definition='update_post_caches($posts, $post_type=\'post\', $update_term_cache=true, $update_meta_cache=true)'; description=''; file='/wp-includes/post.php, line: 4413'; type='function';}, 
	{name='update_post_meta'; match='update_post_meta'; definition='update_post_meta($post_id, $meta_key, $meta_value, $prev_value=\'\')'; description='Update post meta field based on post ID. 
Use the $prev_value parameter to differentiate between meta fields with the same key and post ID. 
If the meta field for the post does not exist, it will be added. 

'; file='/wp-includes/post.php, line: 1480'; params='@param int $post_id Post ID.  
@param string $meta_key Metadata key.  
@param mixed $meta_value Metadata value.  
@param mixed $prev_value Optional. Previous value to check before removing.  '; return='bool False on failure, true if success. '; since='1.5.0 '; uses='$wpdb '; type='function';}, 
	{name='update_post_thumbnail_cache'; match='update_post_thumbnail_cache'; definition='update_post_thumbnail_cache()'; description='Update cache for thumbnails in the current loop 
3.2 '; file='/wp-includes/post-thumbnail-template.php, line: 55'; type='function';}, 
	{name='update_postmeta_cache'; match='update_postmeta_cache'; definition='update_postmeta_cache($post_ids)'; description=''; file='/wp-includes/post.php, line: 4463'; type='function';}, 
	{name='update_posts_count'; match='update_posts_count'; definition='update_posts_count($deprecated=\'\')'; description='Update a blog&apos;s post count. 
WordPress MS stores a blog&apos;s post count as an option so as to avoid extraneous COUNTs when a blog&apos;s details are fetched with get_blog_details(). This function is called when posts are published to make sure the count stays current. 
'; file='/wp-includes/ms-functions.php, line: 1614'; since='MU '; type='function';}, 
	{name='update_recently_edited'; match='update_recently_edited'; definition='update_recently_edited($file)'; description='{ '; file='/wp-admin/includes/misc.php, line: 179'; type='function';}, 
	{name='update_right_now_message'; match='update_right_now_message'; definition='update_right_now_message()'; description=''; file='/wp-admin/includes/update.php, line: 142'; type='function';}, 
	{name='update_site_option'; match='update_site_option'; definition='update_site_option($option, $value)'; description=''; file='/wp-includes/functions.php, line: 3858'; type='function';}, 
	{name='update_term_cache'; match='update_term_cache'; definition='update_term_cache($terms, $taxonomy=\'\')'; description=''; file='/wp-includes/taxonomy.php, line: 2654'; type='function';}, 
	{name='update_user_caches'; match='update_user_caches'; definition='update_user_caches($user)'; description='Update all user caches 
'; file='/wp-includes/user.php, line: 1266'; params='@param object $user User object to be cached  '; since='3.0.0 '; type='function';}, 
	{name='update_user_meta'; match='update_user_meta'; definition='update_user_meta($user_id, $meta_key, $meta_value, $prev_value=\'\')'; description='Update user meta field based on user ID. 
Use the $prev_value parameter to differentiate between meta fields with the same key and user ID. 
If the meta field for the user does not exist, it will be added. 

'; file='/wp-includes/user.php, line: 817'; params='@param int $user_id Post ID.  
@param string $meta_key Metadata key.  
@param mixed $meta_value Metadata value.  
@param mixed $prev_value Optional. Previous value to check before removing.  '; return='bool False on failure, true if success. '; since='3.0.0 '; uses='update_metadata '; type='function';}, 
	{name='update_user_option'; match='update_user_option'; definition='update_user_option($user_id, $option_name, $newvalue, $global=false)'; description='Update user option with global blog capability. 
User options are just like user metadata except that they have support for global blog options. If the &apos;global&apos; parameter is false, which it is by default it will prepend the WordPress table prefix to the option name. 
Deletes the user option if $newvalue is empty. 

'; file='/wp-includes/user.php, line: 295'; params='@param int $user_id User ID  
@param string $option_name User option name.  
@param mixed $newvalue User option value.  
@param bool $global Optional. Whether option name is global or blog specific. Default false (blog specific).  '; return='unknown '; since='2.0.0 '; uses='$wpdb WordPress database object for queries'; type='function';}, 
	{name='update_user_status'; match='update_user_status'; definition='update_user_status($id, $pref, $value, $deprecated=null)'; description=''; file='/wp-admin/includes/ms.php, line: 438'; type='function';}, 
	{name='update_usermeta'; match='update_usermeta'; definition='update_usermeta($user_id, $meta_key, $meta_value)'; description='Update metadata of user. 
There is no need to serialize values, they will be serialized if it is needed. The metadata key can only be a string with underscores. All else will be removed. 
Will remove the metadata, if the meta value is empty. 
@see update_user_meta() '; file='/wp-includes/deprecated.php, line: 2379'; params='@param int $user_id User ID  
@param string $meta_key Metadata key.  
@param mixed $meta_value Metadata value.  '; return='bool True on successful update, false on failure. '; since='2.0.0 '; type='function';}, 
	{name='upload_is_file_too_big'; match='upload_is_file_too_big'; definition='upload_is_file_too_big($upload)'; description='Check whether an upload is too big. 
'; file='/wp-includes/ms-functions.php, line: 1746'; params='@param array $upload  '; return='mixed If the upload is under the size limit, $upload is returned. Otherwise returns an error message. '; since='MU '; type='function';}, 
	{name='upload_is_user_over_quota'; match='upload_is_user_over_quota'; definition='upload_is_user_over_quota($echo=true)'; description='Check whether a blog has used its allotted upload space. 
Used by get_dirsize() to get a directory&apos;s size when it contains other directories. 

'; file='/wp-includes/ms-functions.php, line: 1559'; params='@param bool $echo Optional. If $echo is set and the quota is exceeded, a warning message is echoed. Default is true.  '; return='int '; since='MU '; uses='get_dirsize()'; type='function';}, 
	{name='upload_size_limit_filter'; match='upload_size_limit_filter'; definition='upload_size_limit_filter($size)'; description=''; file='/wp-admin/includes/ms.php, line: 348'; return='int of upload size limit in bytes '; since='3.0.0 '; type='function';}, 
	{name='upload_space_setting'; match='upload_space_setting'; definition='upload_space_setting($id)'; description=''; file='/wp-admin/includes/ms.php, line: 424'; type='function';}, 
	{name='url_is_accessable_via_ssl'; match='url_is_accessable_via_ssl'; definition='url_is_accessable_via_ssl($url)'; description='Determines if the blog can be accessed over SSL. 
Determines if blog can be accessed over SSL by using cURL to access the site using the https in the siteurl. Requires cURL extension to work correctly. 
'; file='/wp-includes/functions.php, line: 3327'; params='@param string $url  '; return='bool Whether SSL access is available '; since='2.5.0 '; type='function';}, 
	{name='url_shorten'; match='url_shorten'; definition='url_shorten($url)'; description='Shorten an URL, to be used as link text 
'; file='/wp-admin/includes/misc.php, line: 223'; params='@param string $url  '; return='string '; since='1.2.1 '; type='function';}, 
	{name='urlencode_deep'; match='urlencode_deep'; definition='urlencode_deep($value)'; description='Navigates through an array and encodes the values to be used in a URL. 
Uses a callback to pass the value of the array back to the function as a string. 
'; file='/wp-includes/formatting.php, line: 1259'; params='@param array string $value The array or string to be encoded.  '; return='array|string $value The encoded array (or string from the callback). '; since='2.2.0 '; type='function';}, 
	{name='use_codepress'; match='use_codepress'; definition='use_codepress()'; description='Determine whether to use CodePress. 
'; file='/wp-admin/includes/deprecated.php, line: 195'; since='2.8 '; type='function';}, 
	{name='use_ssl_preference'; match='use_ssl_preference'; definition='use_ssl_preference($user)'; description='Optional SSL preference that can be turned on by hooking to the &apos;personal_options&apos; action. 
'; file='/wp-admin/user-edit.php, line: 63'; params='@param object $user User data object  '; since='2.7.0 '; type='function';}, 
	{name='user_admin_url'; match='user_admin_url'; definition='user_admin_url($path=\'\', $scheme=\'admin\')'; description=''; file='/wp-includes/link-template.php, line: 2259'; type='function';}, 
	{name='user_can'; match='user_can'; definition='user_can($user, $capability)'; description='Whether a particular user has capability or role. 
'; file='/wp-includes/capabilities.php, line: 1110'; params='@param int object $user User ID or object.  
@param string $capability Capability or role name.  '; return='bool '; since='3.1.0 '; type='function';}, 
	{name='user_can_access_admin_page'; match='user_can_access_admin_page'; definition='user_can_access_admin_page()'; description=''; file='/wp-admin/includes/plugin.php, line: 1512'; type='function';}, 
	{name='user_can_create_draft'; match='user_can_create_draft'; definition='user_can_create_draft($user_id, $blog_id=1, $category_id=\'None\')'; description='Whether user can create a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 227'; params='@param int $user_id  
@param int $blog_id Not Used  
@param int $category_id Not Used  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_can_create_post'; match='user_can_create_post'; definition='user_can_create_post($user_id, $blog_id=1, $category_id=\'None\')'; description='Whether user can create a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 207'; params='@param int $user_id  
@param int $blog_id Not Used  
@param int $category_id Not Used  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_can_delete_post'; match='user_can_delete_post'; definition='user_can_delete_post($user_id, $post_id, $blog_id=1)'; description='Whether user can delete a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 276'; params='@param int $user_id  
@param int $post_id  
@param int $blog_id Not Used  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_can_delete_post_comments'; match='user_can_delete_post_comments'; definition='user_can_delete_post_comments($user_id, $post_id, $blog_id=1)'; description='Whether user can delete a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 356'; params='@param int $user_id  
@param int $post_id  
@param int $blog_id Not Used  '; return='bool returns true if $user_id can delete $post_id&apos;s comments '; since='1.5 '; type='function';}, 
	{name='user_can_edit_post'; match='user_can_edit_post'; definition='user_can_edit_post($user_id, $post_id, $blog_id=1)'; description='Whether user can edit a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 247'; params='@param int $user_id  
@param int $post_id  
@param int $blog_id Not Used  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_can_edit_post_comments'; match='user_can_edit_post_comments'; definition='user_can_edit_post_comments($user_id, $post_id, $blog_id=1)'; description='Whether user can delete a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 336'; params='@param int $user_id  
@param int $post_id  
@param int $blog_id Not Used  '; return='bool returns true if $user_id can edit $post_id&apos;s comments '; since='1.5 '; type='function';}, 
	{name='user_can_edit_post_date'; match='user_can_edit_post_date'; definition='user_can_edit_post_date($user_id, $post_id, $blog_id=1)'; description='Whether user can delete a post. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 316'; params='@param int $user_id  
@param int $post_id  
@param int $blog_id Not Used  '; return='bool returns true if $user_id can edit $post_id&apos;s date '; since='1.5 '; type='function';}, 
	{name='user_can_edit_user'; match='user_can_edit_user'; definition='user_can_edit_user($user_id, $other_user)'; description='Can user can edit other user. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 375'; params='@param int $user_id  
@param int $other_user  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_can_richedit'; match='user_can_richedit'; definition='user_can_richedit()'; description='Whether the user should have a WYSIWIG editor. 
Checks that the user requires a WYSIWIG editor and that the editor is supported in the users browser. 
'; file='/wp-includes/general-template.php, line: 1734'; return='bool '; since='2.0.0 '; type='function';}, 
	{name='user_can_set_post_date'; match='user_can_set_post_date'; definition='user_can_set_post_date($user_id, $blog_id=1, $category_id=\'None\')'; description='Whether user can set new posts&apos; dates. 
@see current_user_can() '; file='/wp-includes/deprecated.php, line: 296'; params='@param int $user_id  
@param int $blog_id Not Used  
@param int $category_id Not Used  '; return='bool '; since='1.5 '; type='function';}, 
	{name='user_pass_ok'; match='user_pass_ok'; definition='user_pass_ok($user_login, $user_pass)'; description='Check that the user login name and password is correct. 

'; file='/wp-includes/user.php, line: 205'; params='@param string $user_login User name.  
@param string $user_pass User password.  '; return='bool False if does not authenticate, true if username and password authenticates. '; since='0.71 '; type='function';}, 
	{name='user_trailingslashit'; match='user_trailingslashit'; definition='user_trailingslashit($string, $type_of_url=\'\')'; description='Retrieve trailing slash string, if blog set for adding trailing slashes. 
Conditionally adds a trailing slash if the permalink structure has a trailing slash, strips the trailing slash if not. The string is passed through the &apos;user_trailingslashit&apos; filter. Will remove trailing slash from string, if blog is not set to have them. 

'; file='/wp-includes/link-template.php, line: 34'; params='@param string $string URL with or without a trailing slash.  
@param string $type_of_url The type of URL being considered (e.g. single, category, etc) for use in the filter.  '; return='string '; since='2.2.0 '; uses='$wp_rewrite'; type='function';}, 
	{name='username_exists'; match='username_exists'; definition='username_exists($username)'; description='Checks whether the given username exists. 
'; file='/wp-includes/user.php, line: 1298'; params='@param string $username Username.  '; return='null|int The user&apos;s ID on success, and null on failure. '; since='2.0.0 '; type='function';}, 
	{name='users_can_register_signup_filter'; match='users_can_register_signup_filter'; definition='users_can_register_signup_filter()'; description='Check whether users can self-register, based on Network settings. 
'; file='/wp-includes/ms-functions.php, line: 1970'; return='bool '; since='MU '; type='function';}, 
	{name='utf8_uri_encode'; match='utf8_uri_encode'; definition='utf8_uri_encode($utf8_string, $length=0)'; description='Encode the Unicode values to be used in the URI. 
'; file='/wp-includes/formatting.php, line: 481'; params='@param string $utf8_string  
@param int $length Max length of the string  '; return='string String with Unicode encoded for URI. '; since='1.5.0 '; type='function';}, 
	{name='valid_unicode'; match='valid_unicode'; definition='valid_unicode($i)'; description='Helper function to determine if a Unicode value is valid. 
'; file='/wp-includes/kses.php, line: 1171'; params='@param int $i Unicode value  '; return='bool true if the value was a valid Unicode number '; type='function';}, 
	{name='validate_active_plugins'; match='validate_active_plugins'; definition='validate_active_plugins()'; description='Validate active plugins 
Validate all active plugins, deactivates invalid and returns an array of deactivated ones. 
'; file='/wp-admin/includes/plugin.php, line: 735'; return='array invalid plugins, plugin as key, error as value '; since='2.5.0 '; type='function';}, 
	{name='validate_current_theme'; match='validate_current_theme'; definition='validate_current_theme()'; description='Checks that current theme files &apos;index.php&apos; and &apos;style.css&apos; exists. 
Does not check the default theme, which is the fallback and should always exist. Will switch theme to the fallback theme if current theme does not validate. You can use the &apos;validate_current_theme&apos; filter to return FALSE to disable this functionality. 
@see WP_DEFAULT_THEME '; file='/wp-includes/theme.php, line: 1279'; return='bool '; since='1.5.0 '; type='function';}, 
	{name='validate_email'; match='validate_email'; definition='validate_email($email, $check_domain=true)'; description='@see is_email() '; file='/wp-includes/ms-deprecated.php, line: 136'; since='MU '; type='function';}, 
	{name='validate_file'; match='validate_file'; definition='validate_file($file, $allowed_files=\'\')'; description='File validates against allowed set of defined rules. 
A return value of &apos;1&apos; means that the $file contains either &apos;..&apos; or &apos;./&apos;. A return value of &apos;2&apos; means that the $file contains &apos;:&apos; after the first character. A return value of &apos;3&apos; means that the file is not in the allowed files list. 
'; file='/wp-includes/functions.php, line: 3589'; params='@param string $file File path.  
@param array $allowed_files List of allowed files.  '; return='int 0 means nothing is wrong, greater than 0 means something was wrong. '; since='1.2.0 '; type='function';}, 
	{name='validate_file_to_edit'; match='validate_file_to_edit'; definition='validate_file_to_edit($file, $allowed_files=\'\')'; description='Make sure that the file that was requested to edit, is allowed to be edited 
Function will die if if you are not allowed to edit the file 
'; file='/wp-admin/includes/file.php, line: 194'; params='@param string $file file the users is attempting to edit  
@param array $allowed_files Array of allowed files to edit, $file must match an entry exactly  '; return='null '; since='1.5.0 '; uses='wp_die 
validate_file '; type='function';}, 
	{name='validate_plugin'; match='validate_plugin'; definition='validate_plugin($plugin)'; description='Validate the plugin path. 
Checks that the file exists and <code>is valid file</code> . 
'; file='/wp-admin/includes/plugin.php, line: 774'; params='@param string $plugin Plugin Path  '; return='WP_Error|int 0 on success, <code>WP_Error</code> on failure. '; since='2.5.0 '; type='function';}, 
	{name='validate_username'; match='validate_username'; definition='validate_username($username)'; description='Checks whether an username is valid. 

'; file='/wp-includes/user.php, line: 1331'; params='@param string $username Username.  '; return='bool Whether username given is valid '; since='2.0.1 '; uses='apply_filters() Calls \'validate_username\' hook on $valid check and $username as parameters'; type='function';}, 
	{name='wa_posts_where_include_drafts_filter'; match='wa_posts_where_include_drafts_filter'; definition='wa_posts_where_include_drafts_filter($where)'; description='Filter to add more post statuses. 
'; file='/wp-app.php, line: 72'; params='@param string $where SQL statement to filter.  '; return='string Filtered SQL statement with added post_status for where clause. '; since='2.2.0 '; type='function';}, 
	{name='walk_category_dropdown_tree'; match='walk_category_dropdown_tree'; definition='walk_category_dropdown_tree()'; description='Retrieve HTML dropdown (select) content for category list. 
@see <code>Walker_CategoryDropdown::walk()</code> for parameters and return description. '; file='/wp-includes/category-template.php, line: 755'; since='2.1.0 '; uses=' to create HTML dropdown content. '; type='function';}, 
	{name='walk_category_tree'; match='walk_category_tree'; definition='walk_category_tree()'; description='Retrieve HTML list content for category list. 
@see <code>Walker_Category::walk()</code> for parameters and return description. '; file='/wp-includes/category-template.php, line: 737'; since='2.1.0 '; uses=' to create HTML list content. '; type='function';}, 
	{name='walk_nav_menu_tree'; match='walk_nav_menu_tree'; definition='walk_nav_menu_tree($items, $depth, $r)'; description='Retrieve the HTML list content for nav menu items. 
@see <code>Walker::walk()</code> for parameters and return description. '; file='/wp-includes/nav-menu-template.php, line: 469'; since='3.0.0 '; uses=' to create HTML list content. '; type='function';}, 
	{name='walk_page_dropdown_tree'; match='walk_page_dropdown_tree'; definition='walk_page_dropdown_tree()'; description='Retrieve HTML dropdown (select) content for page list. 
@see <code>Walker_PageDropdown::walk()</code> for parameters and return description. '; file='/wp-includes/post-template.php, line: 953'; since='2.1.0 '; uses=' to create HTML dropdown content. '; type='function';}, 
	{name='walk_page_tree'; match='walk_page_tree'; definition='walk_page_tree($pages, $depth, $current_page, $r)'; description='Retrieve HTML list content for page list. 
@see <code>Walker_Page::walk()</code> for parameters and return description. '; file='/wp-includes/post-template.php, line: 936'; since='2.1.0 '; uses=' to create HTML list content. '; type='function';}, 
	{name='warn'; match='warn'; definition='warn($msg)'; description=''; file='/wp-includes/js/tinymce/plugins/spellchecker/includes/general.php, line: 84'; type='function';}, 
	{name='weblog_ping'; match='weblog_ping'; definition='weblog_ping($server=\'\', $path=\'\')'; description='Send a pingback. 

'; file='/wp-includes/comment.php, line: 1896'; params='@param string $server Host of blog to connect to.  
@param string $path Path to send the ping.  '; since='1.2.0 '; uses='$wp_version 
'; type='function';}, 
	{name='welcome_user_msg_filter'; match='welcome_user_msg_filter'; definition='welcome_user_msg_filter($text)'; description='Ensure that the welcome message is not empty. Currently unused. 
'; file='/wp-includes/ms-functions.php, line: 1987'; params='@param string $text  '; return='string '; since='MU '; type='function';}, 
	{name='win_is_writable'; match='win_is_writable'; definition='win_is_writable($path)'; description='Workaround for Windows bug in is_writable() function 
'; file='/wp-admin/includes/misc.php, line: 538'; params='@param string $path  '; return='bool '; since='2.8.0 '; type='function';}, 
	{name='wlwmanifest_link'; match='wlwmanifest_link'; definition='wlwmanifest_link()'; description='Display the link to the Windows Live Writer manifest file. 
<code>2.3.1 </code> '; file='/wp-includes/general-template.php, line: 1689'; type='function';}, 
	{name='wp'; match='wp'; definition='wp($query_vars=\'\')'; description='Set up the WordPress query. 
'; file='/wp-includes/functions.php, line: 1565'; params='@param string $query_vars Default  '; since='2.0.0 '; type='function';}, 
	{name='wp_add_post_tags'; match='wp_add_post_tags'; definition='wp_add_post_tags($post_id=0, $tags=\'\')'; description=''; file='/wp-includes/post.php, line: 2872'; type='function';}, 
	{name='wp_admin_bar_appearance_menu'; match='wp_admin_bar_appearance_menu'; definition='wp_admin_bar_appearance_menu($wp_admin_bar)'; description='Add &quot;Appearance&quot; menu with widget and nav menu submenu. 
'; file='/wp-includes/admin-bar.php, line: 294'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_comments_menu'; match='wp_admin_bar_comments_menu'; definition='wp_admin_bar_comments_menu($wp_admin_bar)'; description='Add edit comments link with awaiting moderation count bubble. 
'; file='/wp-includes/admin-bar.php, line: 278'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_dashboard_view_site_menu'; match='wp_admin_bar_dashboard_view_site_menu'; definition='wp_admin_bar_dashboard_view_site_menu($wp_admin_bar)'; description='Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu. 
'; file='/wp-includes/admin-bar.php, line: 101'; since='3.2.0 '; type='function';}, 
	{name='wp_admin_bar_edit_menu'; match='wp_admin_bar_edit_menu'; definition='wp_admin_bar_edit_menu($wp_admin_bar)'; description='Provide an edit link for posts and terms. 
'; file='/wp-includes/admin-bar.php, line: 176'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_header'; match='wp_admin_bar_header'; definition='wp_admin_bar_header()'; description='Style and scripts for the admin bar. 
'; file='/wp-includes/admin-bar.php, line: 370'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_my_account_menu'; match='wp_admin_bar_my_account_menu'; definition='wp_admin_bar_my_account_menu($wp_admin_bar)'; description='Add the &quot;My Account&quot; menu and all submenus. 
'; file='/wp-includes/admin-bar.php, line: 78'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_my_sites_menu'; match='wp_admin_bar_my_sites_menu'; definition='wp_admin_bar_my_sites_menu($wp_admin_bar)'; description='Add the &quot;My Sites/[Site Name]&quot; menu and all submenus. 
'; file='/wp-includes/admin-bar.php, line: 119'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_new_content_menu'; match='wp_admin_bar_new_content_menu'; definition='wp_admin_bar_new_content_menu($wp_admin_bar)'; description='Add &quot;Add New&quot; menu. 
'; file='/wp-includes/admin-bar.php, line: 239'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_render'; match='wp_admin_bar_render'; definition='wp_admin_bar_render()'; description='Render the admin bar to the page based on the $wp_admin_bar-&gt;menu member var. This is called very late on the footer actions so that it will render after anything else being added to the footer. 
It includes the action &quot;admin_bar_menu&quot; which should be used to hook in and add new menus to the admin bar. That way you can be sure that you are adding at most optimal point, right before the admin bar is rendered. This also gives you access to the $post global, among others. 
'; file='/wp-includes/admin-bar.php, line: 52'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_shortlink_menu'; match='wp_admin_bar_shortlink_menu'; definition='wp_admin_bar_shortlink_menu($wp_admin_bar)'; description='Provide a shortlink. 
'; file='/wp-includes/admin-bar.php, line: 154'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_bar_updates_menu'; match='wp_admin_bar_updates_menu'; definition='wp_admin_bar_updates_menu($wp_admin_bar)'; description='Provide an update link if theme/plugin/core updates are available. 
'; file='/wp-includes/admin-bar.php, line: 325'; since='3.1.0 '; type='function';}, 
	{name='wp_admin_css'; match='wp_admin_css'; definition='wp_admin_css($file=\'wp-admin\', $force_echo=false)'; description=''; file='/wp-includes/general-template.php, line: 2125'; type='function';}, 
	{name='wp_admin_css_color'; match='wp_admin_css_color'; definition='wp_admin_css_color($key, $name, $url, $colors=array())'; description='Registers an admin colour scheme css file. 
Allows a plugin to register a new admin colour scheme. For example: wp_admin_css_color(&apos;classic&apos;, __(&apos;Classic&apos;), admin_url(&quot;css/colors-classic.css&quot;), array(&apos;#07273E&apos;, &apos;#14568A&apos;, &apos;#D54E21&apos;, &apos;#2683AE&apos;)); 
'; file='/wp-includes/general-template.php, line: 2062'; params='@param string $key The unique key for this theme.  
@param string $name The name of the theme.  
@param string $url The url of the css file containing the colour scheme.  
@param array $colors Optional An array of CSS color definitions which are used to give the user a feel for the theme.  '; since='2.5.0 '; type='function';}, 
	{name='wp_admin_css_uri'; match='wp_admin_css_uri'; definition='wp_admin_css_uri($file=\'wp-admin\')'; description='Display the URL of a WordPress admin CSS file. 
@see <code>WP_Styles::_css_href</code> and its style_loader_src filter. '; file='/wp-includes/general-template.php, line: 2092'; params='@param string $file file relative to wp-admin/ without its \".css\" extension.  '; since='2.3.0 '; type='function';}, 
	{name='wp_allow_comment'; match='wp_allow_comment'; definition='wp_allow_comment($commentdata)'; description='Validates whether this comment is allowed to be made. 

'; file='/wp-includes/comment.php, line: 615'; params='@param array $commentdata Contains information on the comment  '; return='mixed Signifies the approval status (0|1|&apos;spam&apos;) '; since='2.0.0 '; uses='$wpdb 
apply_filters() Calls \'pre_comment_approved\' hook on the type of comment 
apply_filters() Calls \'comment_duplicate_trigger\' hook on commentdata. 
do_action() Calls \'check_comment_flood\' hook on $comment_author_IP, $comment_author_email, and $comment_date_gmt'; type='function';}, 
	{name='wp_array_slice_assoc'; match='wp_array_slice_assoc'; definition='wp_array_slice_assoc($array, $keys)'; description='Extract a slice of an array, given a list of keys 
'; file='/wp-includes/functions.php, line: 3124'; params='@param array $array The original array  
@param array $keys The list of keys  '; return='array The array slice '; since='3.1.0 '; type='function';}, 
	{name='wp_attachment_is_image'; match='wp_attachment_is_image'; definition='wp_attachment_is_image($post_id=0)'; description='Check if the attachment is an image. 
'; file='/wp-includes/post.php, line: 3983'; params='@param int $post_id Attachment ID  '; return='bool '; since='2.1.0 '; type='function';}, 
	{name='wp_authenticate'; match='wp_authenticate'; definition='wp_authenticate($username, $password)'; description='Checks a user&apos;s login information and logs them in if it checks out. 
'; file='/wp-includes/pluggable.php, line: 527'; params='@param string $username User\'s username  
@param string $password User\'s password  '; return='WP_Error|WP_User <code>WP_User</code> object if login successful, otherwise <code>WP_Error</code> object. '; since='2.5.0 '; type='function';}, 
	{name='wp_authenticate_cookie'; match='wp_authenticate_cookie'; definition='wp_authenticate_cookie($user, $username, $password)'; description='Authenticate the user using the WordPress auth cookie. '; file='/wp-includes/user.php, line: 121'; type='function';}, 
	{name='wp_authenticate_username_password'; match='wp_authenticate_username_password'; definition='wp_authenticate_username_password($user, $username, $password)'; description=''; file='/wp-includes/user.php, line: 73'; type='function';}, 
	{name='wp_basename'; match='wp_basename'; definition='wp_basename($path, $suffix=\'\')'; description='i18n friendly version of basename() 
'; file='/wp-includes/formatting.php, line: 2887'; params='@param string $path A path.  
@param string $suffix If the filename ends in suffix this will also be cut off.  '; return='string '; since='3.1.0 '; type='function';}, 
	{name='wp_blacklist_check'; match='wp_blacklist_check'; definition='wp_blacklist_check($author, $email, $url, $comment, $user_ip, $user_agent)'; description='Does comment contain blacklisted characters or words. 

'; file='/wp-includes/comment.php, line: 837'; params='@param string $author The author of the comment  
@param string $email The email of the comment  
@param string $url The url used in the comment  
@param string $comment The comment content  
@param string $user_ip The comment author IP address  
@param string $user_agent The author\'s browser user agent  '; return='bool True if comment contains blacklisted content, false if comment does not '; since='1.5.0 '; uses='do_action() Calls \'wp_blacklist_check\' hook for all parameters.'; type='function';}, 
	{name='wp_cache_add'; match='wp_cache_add'; definition='wp_cache_add($key, $data, $flag=\'\', $expire=0)'; description='Adds data to the cache, if the cache key doesn&apos;t aleady exist. 
@see <code>WP_Object_Cache::add()</code> '; file='/wp-includes/cache.php, line: 24'; params='@param int string $key The cache ID to use for retrieval later  
@param mixed $data The data to add to the cache store  
@param string $flag The group to add the cache to  
@param int $expire When the cache data should be expired  '; return='unknown '; since='2.0.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_cache_add_global_groups'; match='wp_cache_add_global_groups'; definition='wp_cache_add_global_groups($groups)'; description='Adds a group or set of groups to the list of global groups. 
'; file='/wp-includes/cache.php, line: 151'; params='@param string array $groups A group or an array of groups to add  '; since='2.6.0 '; type='function';}, 
	{name='wp_cache_add_non_persistent_groups'; match='wp_cache_add_non_persistent_groups'; definition='wp_cache_add_non_persistent_groups($groups)'; description='Adds a group or set of groups to the list of non-persistent groups. 
'; file='/wp-includes/cache.php, line: 164'; params='@param string array $groups A group or an array of groups to add  '; since='2.6.0 '; type='function';}, 
	{name='wp_cache_close'; match='wp_cache_close'; definition='wp_cache_close()'; description='Closes the cache. 
This function has ceased to do anything since WordPress 2.5. The functionality was removed along with the rest of the persistant cache. This does not mean that plugins can&apos;t implement this function when they need to make sure that the cache is cleaned up after WordPress no longer needs it. 
'; file='/wp-includes/cache.php, line: 42'; return='bool Always returns True '; since='2.0.0 '; type='function';}, 
	{name='wp_cache_delete'; match='wp_cache_delete'; definition='wp_cache_delete($id, $flag=\'\')'; description='Removes the cache contents matching ID and flag. 
@see <code>WP_Object_Cache::delete()</code> '; file='/wp-includes/cache.php, line: 57'; params='@param int string $id What the contents in the cache are called  
@param string $flag Where the cache contents are grouped  '; return='bool True on successful removal, false on failure '; since='2.0.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_cache_flush'; match='wp_cache_flush'; definition='wp_cache_flush()'; description='Removes all cache items. 
@see <code>WP_Object_Cache::flush()</code> '; file='/wp-includes/cache.php, line: 72'; return='bool Always returns true '; since='2.0.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_cache_get'; match='wp_cache_get'; definition='wp_cache_get($id, $flag=\'\')'; description='Retrieves the cache contents from the cache by ID and flag. 
@see <code>WP_Object_Cache::get()</code> '; file='/wp-includes/cache.php, line: 90'; params='@param int string $id What the contents in the cache are called  
@param string $flag Where the cache contents are grouped  '; return='bool|mixed False on failure to retrieve contents or the cache contents on success '; since='2.0.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_cache_init'; match='wp_cache_init'; definition='wp_cache_init()'; description='Sets up Object Cache Global and assigns it. 
'; file='/wp-includes/cache.php, line: 102'; since='2.0.0 '; type='function';}, 
	{name='wp_cache_replace'; match='wp_cache_replace'; definition='wp_cache_replace($key, $data, $flag=\'\', $expire=0)'; description='Replaces the contents of the cache with new data. 
@see <code>WP_Object_Cache::replace()</code> '; file='/wp-includes/cache.php, line: 119'; params='@param int string $key What to call the contents in the cache  
@param mixed $data The contents to store in the cache  
@param string $flag Where to group the cache contents  
@param int $expire When to expire the cache contents  '; return='bool False if cache ID and group already exists, true on success '; since='2.0.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_cache_reset'; match='wp_cache_reset'; definition='wp_cache_reset()'; description='Reset internal cache keys and structures. If the cache backend uses global blog or site IDs as part of its cache keys, this function instructs the backend to reset those keys and perform any cleanup since blog or site IDs have changed since cache init. 
'; file='/wp-includes/cache.php, line: 175'; since='2.6.0 '; type='function';}, 
	{name='wp_cache_set'; match='wp_cache_set'; definition='wp_cache_set($key, $data, $flag=\'\', $expire=0)'; description='Saves the data to the cache. 
@see <code>WP_Object_Cache::set()</code> '; file='/wp-includes/cache.php, line: 138'; params='@param int string $key What to call the contents in the cache  
@param mixed $data The contents to store in the cache  
@param string $flag Where to group the cache contents  
@param int $expire When to expire the cache contents  '; return='bool False if cache ID and group already exists, true on success '; since='2.0 '; uses='$wp_object_cache Object Cache Class '; type='function';}, 
	{name='wp_category_checklist'; match='wp_category_checklist'; definition='wp_category_checklist($post_id=0, $descendants_and_self=0, $selected_cats=false, $popular_cats=false, $walker=null, $checked_ontop=true)'; description='{ '; file='/wp-admin/includes/template.php, line: 64'; type='function';}, 
	{name='wp_check_filetype'; match='wp_check_filetype'; definition='wp_check_filetype($filename, $mimes=null)'; description='Retrieve the file type from the file name. 
You can optionally define the mime array, if needed. 
'; file='/wp-includes/functions.php, line: 2454'; params='@param string $filename File name or path.  
@param array $mimes Optional. Key is the file extension with value as the mime type.  '; return='array Values with extension first and mime type. '; since='2.0.4 '; type='function';}, 
	{name='wp_check_filetype_and_ext'; match='wp_check_filetype_and_ext'; definition='wp_check_filetype_and_ext($file, $filename, $mimes=null)'; description='Attempt to determine the real file type of a file. If unable to, the file name extension will be used to determine type. 
If it&apos;s determined that the extension does not match the file&apos;s real type, then the &quot;proper_filename&quot; value will be set with a proper filename and extension. 
Currently this function only supports validating images known to getimagesize(). 
'; file='/wp-includes/functions.php, line: 2488'; params='@param string $file Full path to the image.  
@param string $filename The filename of the image (may differ from $file due to $file being in a tmp directory)  
@param array $mimes Optional. Key is the file extension with value as the mime type.  '; return='array Values for the extension, MIME, and either a corrected filename or false if original $filename is valid '; since='3.0.0 '; type='function';}, 
	{name='wp_check_for_changed_slugs'; match='wp_check_for_changed_slugs'; definition='wp_check_for_changed_slugs($post_id, $post, $post_before)'; description='Checked for changed slugs for published post objects and save the old slug. 
The function is used when a post object of any type is updated, by comparing the current and previous post objects. 
If the slug was changed and not already part of the old slugs then it will be added to the post meta field (&apos;_wp_old_slug&apos;) for storing old slugs for that post. 
The most logically usage of this function is redirecting changed post objects, so that those that linked to an changed post will be redirected to the new post. 
'; file='/wp-includes/post.php, line: 4106'; params='@param int $post_id Post ID.  
@param object $post The Post Object  
@param object $post_before The Previous Post Object  '; return='int Same as $post_id '; since='2.1.0 '; type='function';}, 
	{name='wp_check_invalid_utf8'; match='wp_check_invalid_utf8'; definition='wp_check_invalid_utf8($string, $strip=false)'; description='Checks for invalid UTF8 in a string. 
'; file='/wp-includes/formatting.php, line: 433'; params='@param string $string The text which is to be checked.  
@param boolean $strip Optional. Whether to attempt to strip out invalid UTF8. Default is false.  '; return='string The checked text. '; since='2.8 '; type='function';}, 
	{name='wp_check_password'; match='wp_check_password'; definition='wp_check_password($password, $hash, $user_id=\'\')'; description='Checks the plaintext password against the encrypted Password. 
Maintains compatibility between old version and the new cookie authentication protocol using PHPass library. The $hash parameter is the encrypted password and the function compares the plain text password when encypted similarly against the already encrypted password to see if they match. 
For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm. 

'; file='/wp-includes/pluggable.php, line: 1517'; params='@param string $password Plaintext user\'s password  
@param string $hash Hash of the user\'s password to check against.  '; return='bool False, if the $password does not match the hashed password '; since='2.5 '; type='function';}, 
	{name='wp_check_php_mysql_versions'; match='wp_check_php_mysql_versions'; definition='wp_check_php_mysql_versions()'; description='Check for the required PHP version, and the MySQL extension or a database drop-in. 
Dies if requirements are not met. 
This function must be able to work without a complete environment set up. In wp-load.php, for example, WP_CONTENT_DIR is defined and version.php is included before this function is called. 
'; file='/wp-includes/load.php, line: 106'; since='3.0.0 '; type='function';}, 
	{name='wp_check_post_hierarchy_for_loops'; match='wp_check_post_hierarchy_for_loops'; definition='wp_check_post_hierarchy_for_loops($post_parent, $post_ID)'; description='Checks the given subset of the post hierarchy for hierarchy loops. Prevents loops from forming and breaks those that it finds. 
Attached to the wp_insert_post_parent filter. 

'; file='/wp-includes/post.php, line: 5090'; params='@param int $post_parent ID of the parent for the post we\'re checking. int $post_ID ID of the post we\'re checking. '; return='int The new post_parent for the post. '; since='3.1.0 '; uses='wp_find_hierarchy_loop()'; type='function';}, 
	{name='wp_check_post_lock'; match='wp_check_post_lock'; definition='wp_check_post_lock($post_id)'; description='Check to see if the post is currently being edited by another user. 
'; file='/wp-admin/includes/post.php, line: 1254'; params='@param int $post_id ID of the post to check for editing  '; return='bool|int False: not locked or locked by current user. Int: user ID of user with lock. '; since='2.5.0 '; type='function';}, 
	{name='wp_check_term_hierarchy_for_loops'; match='wp_check_term_hierarchy_for_loops'; definition='wp_check_term_hierarchy_for_loops($parent, $term_id, $taxonomy)'; description='Checks the given subset of the term hierarchy for hierarchy loops. Prevents loops from forming and breaks those that it finds. 
Attached to the wp_update_term_parent filter. 

'; file='/wp-includes/taxonomy.php, line: 3167'; params='@param int $parent term_id of the parent for the term we\'re checking.  
@param int $term_id The term we\'re checking.  
@param string $taxonomy The taxonomy of the term we\'re checking. '; return='int The new parent for the term. '; since='3.1.0 '; uses='wp_find_hierarchy_loop()'; type='function';}, 
	{name='wp_clear_auth_cookie'; match='wp_clear_auth_cookie'; definition='wp_clear_auth_cookie()'; description='Removes all of the cookies associated with authentication. 
'; file='/wp-includes/pluggable.php, line: 751'; since='2.5 '; type='function';}, 
	{name='wp_clear_scheduled_hook'; match='wp_clear_scheduled_hook'; definition='wp_clear_scheduled_hook($hook, $args=array())'; description='Unschedule all cron jobs attached to a specific hook. 
'; file='/wp-includes/cron.php, line: 155'; params='@param string $hook Action hook, the execution of which will be unscheduled.  
@param array $args Optional. Arguments that were to be pass to the hook\'s callback function.  '; since='2.1.0 '; type='function';}, 
	{name='wp_clone'; match='wp_clone'; definition='wp_clone($object)'; description='Copy an object. 

'; file='/wp-includes/load.php, line: 568'; params='@param object $object The object to clone  '; return='object The cloned object '; since='2.7.0 '; type='function';}, 
	{name='wp_comment_form_unfiltered_html_nonce'; match='wp_comment_form_unfiltered_html_nonce'; definition='wp_comment_form_unfiltered_html_nonce()'; description='Displays form token for unfiltered comments. 
Will only display nonce token if the current user has permissions for unfiltered html. Won&apos;t display the token for other users. 
The function was backported to 2.0.10 and was added to versions 2.1.3 and above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0. 
Backported to 2.0.10. 
'; file='/wp-includes/comment-template.php, line: 812'; since='2.1.3 '; uses='$post Gets the ID of the current post for the token '; type='function';}, 
	{name='wp_comment_reply'; match='wp_comment_reply'; definition='wp_comment_reply($position=\'1\', $checkbox=false, $mode=\'single\', $table_row=true)'; description='{ '; file='/wp-admin/includes/template.php, line: 325'; type='function';}, 
	{name='wp_comment_trashnotice'; match='wp_comment_trashnotice'; definition='wp_comment_trashnotice()'; description='Output &apos;undo move to trash&apos; text for comments 
'; file='/wp-admin/includes/template.php, line: 403'; since='2.9.0 '; type='function';}, 
	{name='wp_constrain_dimensions'; match='wp_constrain_dimensions'; definition='wp_constrain_dimensions($current_width, $current_height, $max_width=0, $max_height=0)'; description='Calculates the new dimentions for a downsampled image. 
If either width or height are empty, no constraint is applied on that dimension. 
'; file='/wp-includes/media.php, line: 276'; params='@param int $current_width Current width of the image.  
@param int $current_height Current height of the image.  
@param int $max_width Optional. Maximum wanted width.  
@param int $max_height Optional. Maximum wanted height.  '; return='array First item is the width, the second item is the height. '; since='2.5.0 '; type='function';}, 
	{name='wp_convert_bytes_to_hr'; match='wp_convert_bytes_to_hr'; definition='wp_convert_bytes_to_hr($bytes)'; description='{ '; file='/wp-admin/includes/template.php, line: 809'; type='function';}, 
	{name='wp_convert_hr_to_bytes'; match='wp_convert_hr_to_bytes'; definition='wp_convert_hr_to_bytes($size)'; description='{ '; file='/wp-admin/includes/template.php, line: 789'; type='function';}, 
	{name='wp_convert_widget_settings'; match='wp_convert_widget_settings'; definition='wp_convert_widget_settings($base_name, $option_name, $settings)'; description='Convert the widget settings from single to multi-widget format. 
'; file='/wp-includes/widgets.php, line: 1132'; return='array '; since='2.8.0 '; type='function';}, 
	{name='wp_count_attachments'; match='wp_count_attachments'; definition='wp_count_attachments($mime_type=\'\')'; description='Count number of attachments for the mime type(s). 
If you set the optional mime_type parameter, then an array will still be returned, but will only have the item you are looking for. It does not give you the number of attachments that are children of a post. You can get that by counting the number of children that post has. 
'; file='/wp-includes/post.php, line: 1856'; params='@param string array $mime_type Optional. Array or comma-separated list of MIME patterns.  '; return='array Number of posts for each mime type. '; since='2.5.0 '; type='function';}, 
	{name='wp_count_comments'; match='wp_count_comments'; definition='wp_count_comments($post_id=0)'; description='Retrieve total comments for blog or single post. 
The properties of the returned object contain the &apos;moderated&apos;, &apos;approved&apos;, and spam comments for either the entire blog or single post. Those properties contain the amount of comments that match the status. The &apos;total_comments&apos; property contains the integer of total comments. 
The comment stats are cached and then retrieved, if they already exist in the cache. 
'; file='/wp-includes/comment.php, line: 885'; params='@param int $post_id Optional. Post ID.  '; return='object Comment stats. '; since='2.5.0 '; type='function';}, 
	{name='wp_count_posts'; match='wp_count_posts'; definition='wp_count_posts($type=\'post\', $perm=\'\')'; description='Count number of posts of a post type and is user has permissions to view. 
This function provides an efficient method of finding the amount of post&apos;s type a blog has. Another method is to count the amount of items in get_posts(), but that method has a lot of overhead with doing so. Therefore, when developing for 2.5+, use this function instead. 
The $perm parameter checks for &apos;readable&apos; value and if the user can read private posts, it will display that for the user that is signed in. 
'; file='/wp-includes/post.php, line: 1806'; since='2.5.0 <code>string $type Optional. Post type to retrieve count string $perm Optional. \'readable\' or empty. object Number of posts for each status </code> '; type='function';}, 
	{name='wp_count_terms'; match='wp_count_terms'; definition='wp_count_terms($taxonomy, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 1629'; type='function';}, 
	{name='wp_create_categories'; match='wp_create_categories'; definition='wp_create_categories($categories, $post_id=\'\')'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 66'; type='function';}, 
	{name='wp_create_category'; match='wp_create_category'; definition='wp_create_category($cat_name, $parent=0)'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 50'; type='function';}, 
	{name='wp_create_nav_menu'; match='wp_create_nav_menu'; definition='wp_create_nav_menu($menu_name)'; description='Create a Navigation Menu. 
'; file='/wp-includes/nav-menu.php, line: 165'; params='@param string $menu_name Menu Name  '; return='mixed Menu object on success|WP_Error on failure '; since='3.0.0 '; type='function';}, 
	{name='wp_create_nonce'; match='wp_create_nonce'; definition='wp_create_nonce($action=-1)'; description='Creates a random, one time use token. 
'; file='/wp-includes/pluggable.php, line: 1335'; params='@param string int $action Scalar value to add context to the nonce.  '; return='string The one use form token '; since='2.0.3 '; type='function';}, 
	{name='wp_create_post_autosave'; match='wp_create_post_autosave'; definition='wp_create_post_autosave($post_id)'; description=''; file='/wp-admin/includes/post.php, line: 1333'; type='function';}, 
	{name='wp_create_tag'; match='wp_create_tag'; definition='wp_create_tag($tag_name)'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 193'; type='function';}, 
	{name='wp_create_term'; match='wp_create_term'; definition='wp_create_term($tag_name, $taxonomy=\'post_tag\')'; description='{ '; file='/wp-admin/includes/taxonomy.php, line: 247'; type='function';}, 
	{name='wp_create_user'; match='wp_create_user'; definition='wp_create_user($username, $password, $email=\'\')'; description='A simpler way of inserting an user into the database. 
Creates a new user with just the username, password, and email. For a more detail creation of a user, use wp_insert_user() to specify more infomation. 
@see wp_insert_user() More complete way to create a new user '; file='/wp-includes/user.php, line: 1593'; params='@param string $username The user\'s username.  
@param string $password The user\'s password.  
@param string $email The user\'s email (optional).  '; return='int The new user&apos;s ID. '; since='2.0.0 '; type='function';}, 
	{name='wp_credits'; match='wp_credits'; definition='wp_credits()'; description=''; file='/wp-admin/credits.php, line: 47'; type='function';}, 
	{name='wp_cron'; match='wp_cron'; definition='wp_cron()'; description='Run scheduled callbacks or spawn cron for all scheduled events. 
'; file='/wp-includes/cron.php, line: 256'; return='null When doesn&apos;t need to run Cron. '; since='2.1.0 '; type='function';}, 
	{name='wp_dashboard_quick_press_output'; match='wp_dashboard_quick_press_output'; definition='wp_dashboard_quick_press_output()'; description='Output the QuickPress dashboard widget. 
@see wp_dashboard_quick_press() '; file='/wp-admin/includes/deprecated.php, line: 700'; since='3.0.0 '; type='function';}, 
	{name='wp_debug_mode'; match='wp_debug_mode'; definition='wp_debug_mode()'; description='Sets PHP error handling and handles WordPress debug mode. 
Uses three constants: WP_DEBUG, WP_DEBUG_DISPLAY, and WP_DEBUG_LOG. All three can be defined in wp-config.php. Example: define( &apos;WP_DEBUG&apos;, true ); 
WP_DEBUG_DISPLAY and WP_DEBUG_LOG perform no function unless WP_DEBUG is true. WP_DEBUG defaults to false. 
When WP_DEBUG is true, all PHP notices are reported. WordPress will also display notices, including one when a deprecated WordPress function, function argument, or file is used. Deprecated code may be removed from a later version. 
It is strongly recommended that plugin and theme developers use WP_DEBUG in their development environments. 
When WP_DEBUG_DISPLAY is true, WordPress will force errors to be displayed. WP_DEBUG_DISPLAY defaults to true. Defining it as false prevents WordPress from changing the global configuration setting. (Defining WP_DEBUG_DISPLAY as false will never force errors to be hidden.) 
When WP_DEBUG_LOG is true, errors will be logged to wp-content/debug.log. WP_DEBUG_LOG defaults to false. 
'; file='/wp-includes/load.php, line: 262'; since='3.0.0 '; type='function';}, 
	{name='wp_default_editor'; match='wp_default_editor'; definition='wp_default_editor()'; description='Find out which editor should be displayed by default. 
Works out which of the two editors to display as the current editor for a user. 
'; file='/wp-includes/general-template.php, line: 1762'; return='string Either &apos;tinymce&apos;, or &apos;html&apos;, or &apos;test&apos; '; since='2.5.0 '; type='function';}, 
	{name='wp_default_scripts'; match='wp_default_scripts'; definition='wp_default_scripts($scripts)'; description='BackPress: WordPress Dependencies Class BackPress: WordPress Scripts Class BackPress: WordPress Scripts Functions BackPress: WordPress Styles Class BackPress: WordPress Styles Functions Set up WordPress scripts to load by default for Administration Screen. 
Localizes a few of the scripts. $scripts-&gt;add_data( &apos;script-handle&apos;, &apos;group&apos;, 1 ); queues the script for the footer 
'; file='/wp-includes/script-loader.php, line: 49'; params='@param object $scripts  object.  '; since='2.6.0 '; type='function';}, 
	{name='wp_default_styles'; match='wp_default_styles'; definition='wp_default_styles($styles)'; description='Assign default styles to $styles object. 
Nothing is returned, because the $styles parameter is passed by reference. Meaning that whatever object is passed will be updated without having to reassign the variable that was passed back to the same value. This saves memory. 
Adding default styles is not the only task, it also assigns the base_url property, the default version, and text direction for the object. 
'; file='/wp-includes/script-loader.php, line: 467'; params='@param object $styles  '; since='2.6.0 '; type='function';}, 
	{name='wp_defer_comment_counting'; match='wp_defer_comment_counting'; definition='wp_defer_comment_counting($defer=null)'; description='Whether to defer comment counting. 
When setting $defer to true, all post comment counts will not be updated until $defer is set to false. When $defer is set to false, then all previously deferred updated post comment counts will then be automatically updated without having to call wp_update_comment_count() after. 
'; file='/wp-includes/comment.php, line: 1496'; params='@param bool $defer  '; return='unknown '; since='2.5.0 bool $_defer '; type='function';}, 
	{name='wp_defer_term_counting'; match='wp_defer_term_counting'; definition='wp_defer_term_counting($defer=null)'; description='Enable or disable term counting. 
'; file='/wp-includes/taxonomy.php, line: 2369'; params='@param bool $defer Optional. Enable if true, disable if false.  '; return='bool Whether term counting is enabled or disabled. '; since='2.5.0 '; type='function';}, 
	{name='wp_delete_attachment'; match='wp_delete_attachment'; definition='wp_delete_attachment($post_id, $force_delete=false)'; description='Trashes or deletes an attachment. 
When an attachment is permanently deleted, the file will also be removed. Deletion removes all post meta fields, taxonomy, comments, etc. associated with the attachment (except the main post). 
The attachment is moved to the trash instead of permanently deleted unless trash for media is disabled, item is already in the trash, or $force_delete is true. 

'; file='/wp-includes/post.php, line: 3763'; params='@param int $post_id Attachment ID.  
@param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.  '; return='mixed False on failure. Post data on success. '; since='2.0.0 '; uses='$wpdb 
do_action() Calls \'delete_attachment\' hook on Attachment ID.'; type='function';}, 
	{name='wp_delete_category'; match='wp_delete_category'; definition='wp_delete_category($cat_ID)'; description='Deletes one existing category. 

'; file='/wp-includes/taxonomy.php, line: 1790'; params='@param int $cat_ID  '; return='mixed Returns true if completes delete action; false if term doesnt exist; Zero on attempted deletion of default Category; <code>WP_Error</code> object is also a possibility. '; since='2.0.0 '; uses='wp_delete_term()'; type='function';}, 
	{name='wp_delete_comment'; match='wp_delete_comment'; definition='wp_delete_comment($comment_id, $force_delete=false)'; description='Trashes or deletes a comment. 
The comment is moved to trash instead of permanently deleted unless trash is disabled, item is already in the trash, or $force_delete is true. 
The post comment count will be updated if the comment was approved and has a post ID available. 

'; file='/wp-includes/comment.php, line: 947'; params='@param int $comment_id Comment ID  
@param bool $force_delete Whether to bypass trash and force deletion. Default is false.  '; return='bool False if delete comment query failure, true on success. '; since='2.0.0 '; uses='$wpdb 
do_action() Calls \'delete_comment\' hook on comment ID 
do_action() Calls \'deleted_comment\' hook on comment ID after deletion, on success 
do_action() Calls \'wp_set_comment_status\' hook on comment ID with \'delete\' set for the second parameter 
wp_transition_comment_status() Passes new and old comment status along with $comment object'; type='function';}, 
	{name='wp_delete_link'; match='wp_delete_link'; definition='wp_delete_link($link_id)'; description='Delete link specified from database 
'; file='/wp-admin/includes/bookmark.php, line: 79'; params='@param int $link_id ID of the link to delete  '; return='bool True '; since='2.0.0 '; type='function';}, 
	{name='wp_delete_nav_menu'; match='wp_delete_nav_menu'; definition='wp_delete_nav_menu($menu)'; description='Delete a Navigation Menu. 
'; file='/wp-includes/nav-menu.php, line: 177'; params='@param string $menu name|id|slug  '; return='mixed Menu object on success|WP_Error on failure '; since='3.0.0 '; type='function';}, 
	{name='wp_delete_object_term_relationships'; match='wp_delete_object_term_relationships'; definition='wp_delete_object_term_relationships($object_id, $taxonomies)'; description=''; file='/wp-includes/taxonomy.php, line: 1659'; type='function';}, 
	{name='wp_delete_post'; match='wp_delete_post'; definition='wp_delete_post($postid=0, $force_delete=false)'; description='Trashes or deletes a post or page. 
When the post and page is permanently deleted, everything that is tied to it is deleted also. This includes comments, post meta fields, and terms associated with the post. 
The post or page is moved to trash instead of permanently deleted unless trash is disabled, item is already in the trash, or $force_delete is true. 

'; file='/wp-includes/post.php, line: 1974'; params='@param int $postid Post ID.  
@param bool $force_delete Whether to bypass trash and force deletion. Defaults to false.  '; return='mixed False on failure '; since='1.0.0 '; uses='do_action() on \'delete_post\' before deletion unless post type is \'attachment\'. 
do_action() on \'deleted_post\' after deletion unless post type is \'attachment\'. 
wp_delete_attachment() if post type is \'attachment\'. 
wp_trash_post() if item should be trashed.'; type='function';}, 
	{name='wp_delete_post_revision'; match='wp_delete_post_revision'; definition='wp_delete_post_revision($revision_id)'; description=''; file='/wp-includes/post.php, line: 4988'; type='function';}, 
	{name='wp_delete_term'; match='wp_delete_term'; definition='wp_delete_term($term, $taxonomy, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 1702'; type='function';}, 
	{name='wp_delete_user'; match='wp_delete_user'; definition='wp_delete_user($id, $reassign=\'novalue\')'; description='Remove user and optionally reassign posts and links to another user. 
If the $reassign parameter is not assigned to an User ID, then all posts will be deleted of that user. The action &apos;delete_user&apos; that is passed the User ID being deleted will be run after the posts are either reassigned or deleted. The user meta will also be deleted that are for that User ID. 
'; file='/wp-admin/includes/user.php, line: 272'; params='@param int $id User ID.  
@param int $reassign Optional. Reassign posts and links to new User ID.  '; return='bool True when finished. '; since='2.0.0 '; type='function';}, 
	{name='wp_dequeue_script'; match='wp_dequeue_script'; definition='wp_dequeue_script($handle)'; description='Remove an enqueued script. 
@see <code>WP_Scripts::dequeue()</code> For parameter information. '; file='/wp-includes/functions.wp-scripts.php, line: 116'; since='<code>WP</code> 3.1 '; type='function';}, 
	{name='wp_dequeue_style'; match='wp_dequeue_style'; definition='wp_dequeue_style($handle)'; description='Remove an enqueued style. 
@see <code>WP_Styles::dequeue()</code> For parameter information. '; file='/wp-includes/functions.wp-styles.php, line: 114'; since='<code>WP</code> 3.1 '; type='function';}, 
	{name='wp_deregister_script'; match='wp_deregister_script'; definition='wp_deregister_script($handle)'; description='Remove a registered script. 
@see <code>WP_Scripts::remove()</code> For parameter information. '; file='/wp-includes/functions.wp-scripts.php, line: 80'; since='r16 '; type='function';}, 
	{name='wp_deregister_style'; match='wp_deregister_style'; definition='wp_deregister_style($handle)'; description='Remove a registered CSS file. 
@see <code>WP_Styles::remove()</code> For additional information. 
'; file='/wp-includes/functions.wp-styles.php, line: 69'; params='@param string $handle Name of the stylesheet.  '; since='r79 '; type='function';}, 
	{name='wp_die'; match='wp_die'; definition='wp_die($message, $title=\'\', $args=array())'; description='Kill WordPress execution and display HTML message with error message. 
This function complements the die() PHP function. The difference is that HTML will be displayed to the user. It is recommended to use this function only, when the execution should not continue any further. It is not recommended to call this function very often and try to handle as many errors as possible siliently. 
'; file='/wp-includes/functions.php, line: 2755'; params='@param string $message Error message.  
@param string $title Error title.  
@param string array $args Optional arguements to control behaviour.  '; since='2.0.4 '; type='function';}, 
	{name='wp_doc_link_parse'; match='wp_doc_link_parse'; definition='wp_doc_link_parse($content)'; description=''; file='/wp-admin/includes/misc.php, line: 279'; type='function';}, 
	{name='wp_dropdown_categories'; match='wp_dropdown_categories'; definition='wp_dropdown_categories($args=\'\')'; description='Display or retrieve the HTML dropdown list of categories. 
The list of arguments is below: &apos;show_option_all&apos; (string) - Text to display for showing all categories. &apos;show_option_none&apos; (string) - Text to display for showing no categories. &apos;orderby&apos; (string) default is &apos;ID&apos; - What column to use for ordering the categories. &apos;order&apos; (string) default is &apos;ASC&apos; - What direction to order categories. &apos;show_last_update&apos; (bool|int) default is 0 - See <code>get_categories()</code> &apos;show_count&apos; (bool|int) default is 0 - Whether to show how many posts are in the category. &apos;hide_empty&apos; (bool|int) default is 1 - Whether to hide categories that don&apos;t have any posts attached to them. &apos;child_of&apos; (int) default is 0 - See <code>get_categories()</code> . &apos;exclude&apos; (string) - See <code>get_categories()</code> . &apos;echo&apos; (bool|int) default is 1 - Whether to display or retrieve content. &apos;depth&apos; (int) - The max depth. &apos;tab_index&apos; (int) - Tab index for select element. &apos;name&apos; (string) - The name attribute value for select element. &apos;id&apos; (string) - The ID attribute value for select element. Defaults to name if omitted. &apos;class&apos; (string) - The class attribute value for select element. &apos;selected&apos; (int) - Which category ID is selected. &apos;taxonomy&apos; (string) - The name of the taxonomy to retrieve. Defaults to category. 
The &apos;hierarchical&apos; argument, which is disabled by default, will override the depth argument, unless it is true. When the argument is false, it will display all of the categories. When it is enabled it will use the value in the &apos;depth&apos; argument. 
'; file='/wp-includes/category-template.php, line: 301'; params='@param string array $args Optional. Override default arguments.  '; return='string HTML content only if &apos;echo&apos; argument is 0. '; since='2.1.0 '; type='function';}, 
	{name='wp_dropdown_cats'; match='wp_dropdown_cats'; definition='wp_dropdown_cats($currentcat=0, $currentparent=0, $parent=0, $level=0, $categories=0)'; description='{ '; file='/wp-admin/includes/deprecated.php, line: 106'; type='function';}, 
	{name='wp_dropdown_pages'; match='wp_dropdown_pages'; definition='wp_dropdown_pages($args=\'\')'; description='Retrieve or display list of pages as a dropdown (select list). 
'; file='/wp-includes/post-template.php, line: 762'; params='@param array string $args Optional. Override default arguments.  '; return='string HTML content, if not displaying. '; since='2.1.0 '; type='function';}, 
	{name='wp_dropdown_roles'; match='wp_dropdown_roles'; definition='wp_dropdown_roles($selected=false)'; description='Print out &lt;option&gt; html elements for role selectors 
'; file='/wp-admin/includes/template.php, line: 765'; params='@param string $selected slug for the role that should be already selected  '; since='2.1.0 '; type='function';}, 
	{name='wp_dropdown_users'; match='wp_dropdown_users'; definition='wp_dropdown_users($args=\'\')'; description='Create dropdown HTML content of users. 
The content can either be displayed, which it is by default or retrieved by setting the &apos;echo&apos; argument. The &apos;include&apos; and &apos;exclude&apos; arguments do not need to be used; all users will be displayed in that case. Only one can be used, either &apos;include&apos; or &apos;exclude&apos;, but not both. 
The available arguments are as follows: show_option_all - Text to show all and whether HTML option exists. show_option_none - Text for show none and whether HTML option exists. hide_if_only_one_author - Don&apos;t create the dropdown if there is only one user. orderby - SQL order by clause for what order the users appear. Default is &apos;display_name&apos;. order - Default is &apos;ASC&apos;. Can also be &apos;DESC&apos;. include - User IDs to include. exclude - User IDs to exclude. multi - Default is &apos;false&apos;. Whether to skip the ID attribute on the &apos;select&apos; element. A &apos;true&apos; value is overridden when id argument is set. show - Default is &apos;display_name&apos;. User table column to display. If the selected item is empty then the user_login will be displayed in parentheses echo - Default is &apos;1&apos;. Whether to display or retrieve content. selected - Which User ID is selected. include_selected - Always include the selected user ID in the dropdown. Default is false. name - Default is &apos;user&apos;. Name attribute of select element. id - Default is the value of the &apos;name&apos; parameter. ID attribute of select element. class - Class attribute of select element. blog_id - ID of blog (Multisite only). Defaults to ID of current blog. who - Which users to query. Currently only &apos;authors&apos; is supported. Default is all users. 

'; file='/wp-includes/user.php, line: 979'; params='@param string array $args Optional. Override defaults.  '; return='string|null Null on display. String of HTML content on retrieve. '; since='2.3.0 '; uses='$wpdb WordPress database object for queries'; type='function';}, 
	{name='wp_edit_attachments_query'; match='wp_edit_attachments_query'; definition='wp_edit_attachments_query($q=false)'; description='{ '; file='/wp-admin/includes/post.php, line: 1018'; type='function';}, 
	{name='wp_edit_posts_query'; match='wp_edit_posts_query'; definition='wp_edit_posts_query($q=false)'; description='Run the wp query to fetch the posts for listing on the edit posts page 
'; file='/wp-admin/includes/post.php, line: 923'; params='@param array bool $q Array of query variables to use to build the query or false to use $_GET superglobal.  '; return='array '; since='2.5.0 '; type='function';}, 
	{name='wp_embed_defaults'; match='wp_embed_defaults'; definition='wp_embed_defaults()'; description='Create default array of embed parameters. 
'; file='/wp-includes/media.php, line: 1322'; return='array Default embed parameters. '; since='2.9.0 '; type='function';}, 
	{name='wp_embed_handler_googlevideo'; match='wp_embed_handler_googlevideo'; definition='wp_embed_handler_googlevideo($matches, $attr, $url, $rawattr)'; description='The Google Video embed handler callback. Google Video does not support oEmbed. 
@see <code>WP_Embed::register_handler()</code> <code>WP_Embed::shortcode()</code> '; file='/wp-includes/media.php, line: 1429'; params='@param array $matches The regex matches from the provided regex when calling  
@param array $attr Embed attributes.  
@param string $url The original URL that was matched by the regex.  
@param array $rawattr The original unmodified attributes.  '; return='string The embed HTML. '; type='function';}, 
	{name='wp_embed_register_handler'; match='wp_embed_register_handler'; definition='wp_embed_register_handler($id, $regex, $callback, $priority=10)'; description='Register an embed handler. This function should probably only be used for sites that do not support oEmbed. 
@see <code>WP_Embed::register_handler()</code> '; file='/wp-includes/media.php, line: 1299'; since='2.9.0 '; type='function';}, 
	{name='wp_embed_unregister_handler'; match='wp_embed_unregister_handler'; definition='wp_embed_unregister_handler($id, $priority=10)'; description='Unregister a previously registered embed handler. 
@see <code>WP_Embed::unregister_handler()</code> '; file='/wp-includes/media.php, line: 1310'; since='2.9.0 '; type='function';}, 
	{name='wp_enqueue_script'; match='wp_enqueue_script'; definition='wp_enqueue_script($handle, $src=false, $deps=array(), $ver=false, $in_footer=false)'; description='Enqueues script. 
Registers the script if src provided (does NOT overwrite) and enqueues. 
@see wp_register_script() For parameter information. '; file='/wp-includes/functions.wp-scripts.php, line: 96'; since='r16 '; type='function';}, 
	{name='wp_enqueue_scripts'; match='wp_enqueue_scripts'; definition='wp_enqueue_scripts()'; description='Wrapper for do_action(&apos;wp_enqueue_scripts&apos;) 
Allows plugins to queue scripts for the front end using wp_enqueue_script(). Runs first in wp_head() where all is_home(), is_page(), etc. functions are available. 
'; file='/wp-includes/script-loader.php, line: 737'; since='2.8 '; type='function';}, 
	{name='wp_enqueue_style'; match='wp_enqueue_style'; definition='wp_enqueue_style($handle, $src=false, $deps=array(), $ver=false, $media=\'all\')'; description='Enqueue a CSS style file. 
Registers the style if src provided (does NOT overwrite) and enqueues. 
@see <code>WP_Styles::add()</code> , <code>WP_Styles::enqueue()</code> 
'; file='/wp-includes/functions.wp-styles.php, line: 96'; params='@param string $handle Name of the stylesheet.  
@param string bool $src Path to the stylesheet from the root directory of WordPress. Example: \'/css/mystyle.css\'.  
@param array $deps Array of handles (names) of any stylesheet that this stylesheet depends on. (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies.  
@param string bool $ver String specifying the stylesheet version number, if it has one. This parameter is used to ensure that the correct version is sent to the client regardless of caching, and so should be included if a version number is available and makes sense for the stylesheet.  
@param string $media The media for which this stylesheet has been defined.  '; since='r79 '; type='function';}, 
	{name='wp_expand_dimensions'; match='wp_expand_dimensions'; definition='wp_expand_dimensions($example_width, $example_height, $max_width, $max_height)'; description='Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height. 

'; file='/wp-includes/media.php, line: 1357'; params='@param int $example_width The width of an example embed.  
@param int $example_height The height of an example embed.  
@param int $max_width The maximum allowed width.  
@param int $max_height The maximum allowed height.  '; return='array The maximum possible width and height based on the example ratio. '; since='2.9.0 '; uses='wp_constrain_dimensions() This function passes the widths and the heights.'; type='function';}, 
	{name='wp_explain_nonce'; match='wp_explain_nonce'; definition='wp_explain_nonce($action)'; description=''; file='/wp-includes/functions.php, line: 2641'; type='function';}, 
	{name='wp_ext2type'; match='wp_ext2type'; definition='wp_ext2type($ext)'; description=''; file='/wp-includes/functions.php, line: 2427'; type='function';}, 
	{name='wp_favicon_request'; match='wp_favicon_request'; definition='wp_favicon_request()'; description='Don&apos;t load all of WordPress when handling a favicon.ico request. Instead, send the headers for a zero-length favicon and bail. 
'; file='/wp-includes/load.php, line: 124'; since='3.0.0 '; type='function';}, 
	{name='wp_filter_comment'; match='wp_filter_comment'; definition='wp_filter_comment($commentdata)'; description='Filters and sanitizes comment data. 
Sets the comment data &apos;filtered&apos; field to true when finished. This can be checked as to whether the comment should be filtered and to keep from filtering the same comment more than once. 

'; file='/wp-includes/comment.php, line: 1269'; params='@param array $commentdata Contains information on the comment.  '; return='array Parsed comment information. '; since='2.0.0 '; uses='apply_filters() Calls \'pre_user_id\' hook on comment author\'s user ID 
apply_filters() Calls \'pre_comment_user_agent\' hook on comment author\'s user agent 
apply_filters() Calls \'pre_comment_author_name\' hook on comment author\'s name 
apply_filters() Calls \'pre_comment_content\' hook on the comment\'s content 
apply_filters() Calls \'pre_comment_user_ip\' hook on comment author\'s IP 
apply_filters() Calls \'pre_comment_author_url\' hook on comment author\'s URL 
apply_filters() Calls \'pre_comment_author_email\' hook on comment author\'s email address'; type='function';}, 
	{name='wp_filter_kses'; match='wp_filter_kses'; definition='wp_filter_kses($data)'; description='Sanitize content with allowed HTML Kses rules. 
'; file='/wp-includes/kses.php, line: 1226'; params='@param string $data Content to filter, expected to be escaped with slashes  '; return='string Filtered content '; since='1.0.0 $allowedtags '; type='function';}, 
	{name='wp_filter_nohtml_kses'; match='wp_filter_nohtml_kses'; definition='wp_filter_nohtml_kses($data)'; description='Strips all of the HTML in the content. 
'; file='/wp-includes/kses.php, line: 1287'; params='@param string $data Content to strip all HTML from  '; return='string Filtered content without any HTML '; since='2.1.0 '; type='function';}, 
	{name='wp_filter_object_list'; match='wp_filter_object_list'; definition='wp_filter_object_list($list, $args=array(), $operator=\'and\', $field=false)'; description='Filters a list of objects, based on a set of key =&gt; value arguments 
'; file='/wp-includes/functions.php, line: 3145'; params='@param array $list An array of objects to filter  
@param array $args An array of key => value arguments to match against each object  
@param string $operator The logical operation to perform. \'or\' means only one element from the array needs to match; \'and\' means all elements must match. The default is \'and\'.  
@param bool string $field A field from the object to place instead of the entire object  '; return='array A list of objects or object fields '; since='3.0.0 '; type='function';}, 
	{name='wp_filter_post_kses'; match='wp_filter_post_kses'; definition='wp_filter_post_kses($data)'; description='Sanitize content for allowed HTML tags for post content. 
Post content refers to the page contents of the &apos;post&apos; type and not $_POST data from forms. 
'; file='/wp-includes/kses.php, line: 1257'; params='@param string $data Post content to filter, expected to be escaped with slashes  '; return='string Filtered post content with allowed HTML tags and attributes intact. '; since='2.0.0 $allowedposttags '; type='function';}, 
	{name='wp_find_hierarchy_loop'; match='wp_find_hierarchy_loop'; definition='wp_find_hierarchy_loop($callback, $start, $start_parent, $callback_args=array())'; description='Finds hierarchy loops using a callback function that maps object IDs to parent IDs. 

'; file='/wp-includes/functions.php, line: 4486'; params='@param callback $callback function that accepts ( ID, $callback_args ) and outputs parent_ID  
@param int $start The ID to start the loop check at  
@param int $start_parent the parent_ID of $start to use instead of calling $callback( $start ). Use null to always use $callback  
@param array $callback_args optional additional arguments to send to $callback  '; return='array IDs of all members of loop '; since='3.1.0 '; type='function';}, 
	{name='wp_find_hierarchy_loop_tortoise_hare'; match='wp_find_hierarchy_loop_tortoise_hare'; definition='wp_find_hierarchy_loop_tortoise_hare($callback, $start, $override=array(), $callback_args=array(), $_return_loop=false)'; description='Uses the &quot;The Tortoise and the Hare&quot; algorithm to detect loops. 
For every step of the algorithm, the hare takes two steps and the tortoise one. If the hare ever laps the tortoise, there must be a loop. 

'; file='/wp-includes/functions.php, line: 4513'; params='@param callback $callback function that accupts ( ID, callback_arg, ... ) and outputs parent_ID  
@param int $start The ID to start the loop check at  
@param array $override an array of ( ID => parent_ID, ... ) to use instead of $callback  
@param array $callback_args optional additional arguments to send to $callback  
@param bool $_return_loop Return loop members or just detect presence of loop? Only set to true if you already know the given $start is part of a loop (otherwise the returned array might include branches)  '; return='mixed scalar ID of some arbitrary member of the loop, or array of IDs of all members of loop if $_return_loop '; since='3.1.0 '; type='function';}, 
	{name='wp_fix_server_vars'; match='wp_fix_server_vars'; definition='wp_fix_server_vars()'; description='Fix $_SERVER variables for various setups. 
'; file='/wp-includes/load.php, line: 41'; since='3.0.0 '; type='function';}, 
	{name='wp_footer'; match='wp_footer'; definition='wp_footer()'; description='Fire the wp_footer action 
'; file='/wp-includes/general-template.php, line: 1587'; since='1.5.1 '; uses='do_action() Calls \'wp_footer\' hook. '; type='function';}, 
	{name='wp_fullscreen_html'; match='wp_fullscreen_html'; definition='wp_fullscreen_html()'; description=''; file='/wp-admin/includes/post.php, line: 1773'; type='function';}, 
	{name='wp_generate_auth_cookie'; match='wp_generate_auth_cookie'; definition='wp_generate_auth_cookie($user_id, $expiration, $scheme=\'auth\')'; description='Generate authentication cookie contents. 

'; file='/wp-includes/pluggable.php, line: 635'; params='@param int $user_id User ID  
@param int $expiration Cookie expiration in seconds  
@param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in  '; return='string Authentication cookie contents '; since='2.5 '; uses='apply_filters() Calls \'auth_cookie\' hook on $cookie contents, User ID and expiration of cookie.'; type='function';}, 
	{name='wp_generate_password'; match='wp_generate_password'; definition='wp_generate_password($length=12, $special_chars=true, $extra_special_chars=false)'; description='Generates a random password drawn from the defined set of characters. 
'; file='/wp-includes/pluggable.php, line: 1558'; params='@param int $length The length of password to generate  
@param bool $special_chars Whether to include standard special characters. Default true.  
@param bool $extra_special_chars Whether to include other special characters. Used when generating secret keys and salts. Default false.  '; return='string The random password '; since='2.5 '; type='function';}, 
	{name='wp_generate_tag_cloud'; match='wp_generate_tag_cloud'; definition='wp_generate_tag_cloud($tags, $args=\'\')'; description='Generates a tag cloud (heatmap) from provided data. 
The text size is set by the &apos;smallest&apos; and &apos;largest&apos; arguments, which will use the &apos;unit&apos; argument value for the CSS text size unit. The &apos;format&apos; argument can be &apos;flat&apos; (default), &apos;list&apos;, or &apos;array&apos;. The flat value for the &apos;format&apos; argument will separate tags with spaces. The list value for the &apos;format&apos; argument will format the tags in a UL HTML list. The array value for the &apos;format&apos; argument will return in PHP array type format. 
The &apos;tag_cloud_sort&apos; filter allows you to override the sorting. Passed to the filter: $tags array and $args array, has to return the $tags array after sorting it. 
The &apos;orderby&apos; argument will accept &apos;name&apos; or &apos;count&apos; and defaults to &apos;name&apos;. The &apos;order&apos; is the direction to sort, defaults to &apos;ASC&apos; and can be &apos;DESC&apos; or &apos;RAND&apos;. 
The &apos;number&apos; argument is how many tags to return. By default, the limit will be to return the entire tag cloud list. 
The &apos;topic_count_text_callback&apos; argument is a function, which given the count of the posts with that tag returns a text for the tooltip of the tag link. 
'; file='/wp-includes/category-template.php, line: 613'; params='@param array $tags List of tags.  
@param string array $args Optional, override default arguments.  '; return='string '; since='2.3.0 '; type='function';}, 
	{name='wp_generator'; match='wp_generator'; definition='wp_generator()'; description='Display the XHTML generator that is generated on the wp_head hook. 
'; file='/wp-includes/general-template.php, line: 2168'; since='2.5.0 '; type='function';}, 
	{name='wp_get_active_and_valid_plugins'; match='wp_get_active_and_valid_plugins'; definition='wp_get_active_and_valid_plugins()'; description='Returns array of plugin files to be included in global scope. 
The default directory is wp-content/plugins. To change the default directory manually, define WP_PLUGIN_DIR and WP_PLUGIN_URL in wp-config.php. 
'; file='/wp-includes/load.php, line: 477'; return='array Files to include '; since='3.0.0 '; type='function';}, 
	{name='wp_get_active_network_plugins'; match='wp_get_active_network_plugins'; definition='wp_get_active_network_plugins()'; description='Returns array of network plugin files to be included in global scope. 
The default directory is wp-content/plugins. To change the default directory manually, define WP_PLUGIN_DIR and WP_PLUGIN_URL in wp-config.php. 
'; file='/wp-includes/ms-load.php, line: 39'; return='array Files to include '; since='3.1.0 '; type='function';}, 
	{name='wp_get_archives'; match='wp_get_archives'; definition='wp_get_archives($args=\'\')'; description='Display archive links based on type and format. 
The &apos;type&apos; argument offers a few choices and by default will display monthly archive links. The other options for values are &apos;daily&apos;, &apos;weekly&apos;, &apos;monthly&apos;, &apos;yearly&apos;, &apos;postbypost&apos; or &apos;alpha&apos;. Both &apos;postbypost&apos; and &apos;alpha&apos; display the same archive link list, the difference between the two is that &apos;alpha&apos; will order by post title and &apos;postbypost&apos; will order by post date. 
The date archives will logically display dates with links to the archive post page. The &apos;postbypost&apos; and &apos;alpha&apos; values for &apos;type&apos; argument will display the post titles. 
The &apos;limit&apos; argument will only display a limited amount of links, specified by the &apos;limit&apos; integer value. By default, there is no limit. The &apos;show_post_count&apos; argument will show how many posts are within the archive. By default, the &apos;show_post_count&apos; argument is set to false. 
For the &apos;format&apos;, &apos;before&apos;, and &apos;after&apos; arguments, see <code>get_archives_link()</code> . The values of these arguments have to do with that function. 
'; file='/wp-includes/general-template.php, line: 877'; params='@param string array $args Optional. Override defaults.  '; since='1.2.0 '; type='function';}, 
	{name='wp_get_associated_nav_menu_items'; match='wp_get_associated_nav_menu_items'; definition='wp_get_associated_nav_menu_items($object_id=0, $object_type=\'post_type\')'; description='Get the menu items associated with a particular object. 
'; file='/wp-includes/nav-menu.php, line: 676'; params='@param int $object_id The ID of the original object.  
@param string $object_type The type of object, such as \"taxonomy\" or \"post_type.\"  '; return='array The array of menu item IDs; empty array if none; '; since='3.0.0 '; type='function';}, 
	{name='wp_get_attachment_image'; match='wp_get_attachment_image'; definition='wp_get_attachment_image($attachment_id, $size=\'thumbnail\', $icon=false, $attr=\'\')'; description='Get an HTML img element representing an image attachment 
While $size will accept an array, it is better to register a size with add_image_size() so that a cropped version is generated. It&apos;s much more efficient than having to find the closest-sized image and then having the browser scale down the image. 
@see add_image_size() '; file='/wp-includes/media.php, line: 637'; params='@param int $attachment_id Image attachment ID.  
@param string $size Optional, default is \'thumbnail\'.  
@param bool $icon Optional, default is false. Whether it is an icon.  '; return='string HTML img element or empty string on failure. '; since='2.5.0 '; uses='apply_filters() Calls \'wp_get_attachment_image_attributes\' hook on attributes array 
wp_get_attachment_image_src() Gets attachment file URL and dimensions '; type='function';}, 
	{name='wp_get_attachment_image_src'; match='wp_get_attachment_image_src'; definition='wp_get_attachment_image_src($attachment_id, $size=\'thumbnail\', $icon=false)'; description='Retrieve an image to represent an attachment. 
A mime icon for files, thumbnail or intermediate size for images. 
'; file='/wp-includes/media.php, line: 601'; params='@param int $attachment_id Image attachment ID.  
@param string $size Optional, default is \'thumbnail\'.  
@param bool $icon Optional, default is false. Whether it is an icon.  '; return='bool|array Returns an array (url, width, height), or false, if no image is available. '; since='2.5.0 '; type='function';}, 
	{name='wp_get_attachment_link'; match='wp_get_attachment_link'; definition='wp_get_attachment_link($id=0, $size=\'thumbnail\', $permalink=false, $icon=false, $text=false)'; description='Retrieve an attachment page link using an image or icon, if possible. 

'; file='/wp-includes/post-template.php, line: 1151'; params='@param int $id Optional. Post ID.  
@param string $size Optional, default is \'thumbnail\'. Size of image, either array or string.  
@param bool $permalink Optional, default is false. Whether to add permalink to image.  
@param bool $icon Optional, default is false. Whether to include icon.  
@param string $text Optional, default is false. If string, then will be link text.  '; return='string HTML content. '; since='2.5.0 '; uses='apply_filters() Calls \'wp_get_attachment_link\' filter on HTML content with same parameters as function.'; type='function';}, 
	{name='wp_get_attachment_metadata'; match='wp_get_attachment_metadata'; definition='wp_get_attachment_metadata($post_id=0, $unfiltered=false)'; description='Retrieve attachment meta field for attachment ID. 
'; file='/wp-includes/post.php, line: 3858'; params='@param int $post_id Attachment ID  
@param bool $unfiltered Optional, default is false. If true, filters are not run.  '; return='string|bool Attachment meta field. False on failure. '; since='2.1.0 '; type='function';}, 
	{name='wp_get_attachment_thumb_file'; match='wp_get_attachment_thumb_file'; definition='wp_get_attachment_thumb_file($post_id=0)'; description='Retrieve thumbnail for an attachment. 
'; file='/wp-includes/post.php, line: 3934'; params='@param int $post_id Attachment ID.  '; return='mixed False on failure. Thumbnail file path on success. '; since='2.1.0 '; type='function';}, 
	{name='wp_get_attachment_thumb_url'; match='wp_get_attachment_thumb_url'; definition='wp_get_attachment_thumb_url($post_id=0)'; description='Retrieve URL for an attachment thumbnail. 
'; file='/wp-includes/post.php, line: 3956'; params='@param int $post_id Attachment ID  '; return='string|bool False on failure. Thumbnail URL on success. '; since='2.1.0 '; type='function';}, 
	{name='wp_get_attachment_url'; match='wp_get_attachment_url'; definition='wp_get_attachment_url($post_id=0)'; description='Retrieve the URL for an attachment. 
'; file='/wp-includes/post.php, line: 3898'; params='@param int $post_id Attachment ID.  '; return='string '; since='2.1.0 '; type='function';}, 
	{name='wp_get_comment_status'; match='wp_get_comment_status'; definition='wp_get_comment_status($comment_id)'; description='The status of a comment by ID. 
'; file='/wp-includes/comment.php, line: 1112'; params='@param int $comment_id Comment ID  '; return='string|bool Status might be &apos;trash&apos;, &apos;approved&apos;, &apos;unapproved&apos;, &apos;spam&apos;. False on failure. '; since='1.0.0 '; type='function';}, 
	{name='wp_get_current_commenter'; match='wp_get_current_commenter'; definition='wp_get_current_commenter()'; description='Get current commenter&apos;s name, email, and URL. 
Expects cookies content to already be sanitized. User of this function might wish to recheck the returned array for validity. 
@see sanitize_comment_cookies() Use to sanitize cookies '; file='/wp-includes/comment.php, line: 1185'; return='array Comment author, email, url respectively. '; since='2.0.4 '; type='function';}, 
	{name='wp_get_current_user'; match='wp_get_current_user'; definition='wp_get_current_user()'; description='Retrieve the current user object. 
'; file='/wp-includes/pluggable.php, line: 51'; return='<code>WP_User</code> Current user <code>WP_User</code> object '; since='2.0.3 '; type='function';}, 
	{name='wp_get_http'; match='wp_get_http'; definition='wp_get_http($url, $file_path=false, $red=1)'; description='Perform a HTTP HEAD or GET request. 
If $file_path is a writable filename, this will do a GET request and write the file to that path. 
'; file='/wp-includes/functions.php, line: 1284'; params='@param string $url URL to fetch.  
@param string bool $file_path Optional. File path to write request to.  
@param int $red (private) The number of Redirects followed, Upon 5 being hit, returns false.  '; return='bool|string False on failure and string of headers if HEAD request. '; since='2.5.0 '; type='function';}, 
	{name='wp_get_http_headers'; match='wp_get_http_headers'; definition='wp_get_http_headers($url, $deprecated=false)'; description='Retrieve HTTP Headers from URL. 
'; file='/wp-includes/functions.php, line: 1335'; params='@param string $url  
@param bool $deprecated Not Used.  '; return='bool|string False on failure, headers on success. '; since='1.5.1 '; type='function';}, 
	{name='wp_get_link_cats'; match='wp_get_link_cats'; definition='wp_get_link_cats($link_id=0)'; description='Retrieves the link categories associated with the link specified. 
'; file='/wp-admin/includes/bookmark.php, line: 103'; params='@param int $link_id Link ID to look up  '; return='array The requested link&apos;s categories '; since='2.1.0 '; type='function';}, 
	{name='wp_get_links'; match='wp_get_links'; definition='wp_get_links($args=\'\')'; description='Gets the links associated with category. 
@see get_links() for argument information that can be used in $args @see wp_list_bookmarks() '; file='/wp-includes/deprecated.php, line: 894'; params='@param string $args a query string  '; return='null|string '; since='1.0.1 '; type='function';}, 
	{name='wp_get_linksbyname'; match='wp_get_linksbyname'; definition='wp_get_linksbyname($category, $args=\'\')'; description='Gets the links associated with the named category. 
@see wp_list_bookmarks() '; file='/wp-includes/deprecated.php, line: 432'; params='@param string $category The category to use.  
@param string $args  '; return='bool|null '; since='1.0.1 '; type='function';}, 
	{name='wp_get_mu_plugins'; match='wp_get_mu_plugins'; definition='wp_get_mu_plugins()'; description='Returns array of must-use plugin files to be included in global scope. 
The default directory is wp-content/mu-plugins. To change the default directory manually, define WPMU_PLUGIN_DIR and WPMU_PLUGIN_URL in wp-config.php. 
'; file='/wp-includes/load.php, line: 450'; return='array Files to include '; since='3.0.0 '; type='function';}, 
	{name='wp_get_nav_menu_items'; match='wp_get_nav_menu_items'; definition='wp_get_nav_menu_items($menu, $args=array())'; description='Returns all menu items of a navigation menu. 
'; file='/wp-includes/nav-menu.php, line: 470'; params='@param string $menu menu name, id, or slug  
@param string $args  '; return='mixed $items array of menu items, else false. '; since='3.0.0 '; type='function';}, 
	{name='wp_get_nav_menu_object'; match='wp_get_nav_menu_object'; definition='wp_get_nav_menu_object($menu)'; description='Returns a navigation menu object. 

'; file='/wp-includes/nav-menu.php, line: 21'; params='@param string $menu Menu id, slug or name  '; return='mixed false if $menu param isn&apos;t supplied or term does not exist, menu object if successful. '; since='3.0.0 '; uses='get_term 
get_term_by'; type='function';}, 
	{name='wp_get_nav_menu_to_edit'; match='wp_get_nav_menu_to_edit'; definition='wp_get_nav_menu_to_edit($menu_id=0)'; description='Returns the menu formatted to edit. 
'; file='/wp-admin/includes/nav-menu.php, line: 1085'; params='@param string $menu_id The ID of the menu to format.  '; return='string|WP_Error $output The menu formatted to edit or error object on failure. '; since='3.0.0 '; type='function';}, 
	{name='wp_get_nav_menus'; match='wp_get_nav_menus'; definition='wp_get_nav_menus($args=array())'; description='Returns all navigation menu objects. 
'; file='/wp-includes/nav-menu.php, line: 409'; params='@param array $args Array of arguments passed on to get_terms().  '; return='array menu objects '; since='3.0.0 '; type='function';}, 
	{name='wp_get_nocache_headers'; match='wp_get_nocache_headers'; definition='wp_get_nocache_headers()'; description='Gets the header information to prevent caching. 
The several different headers cover the different ways cache prevention is handled by different browsers 
'; file='/wp-includes/functions.php, line: 1690'; return='array The associative array of header names and field values. '; since='2.8.0 '; uses='apply_filters() '; type='function';}, 
	{name='wp_get_object_terms'; match='wp_get_object_terms'; definition='wp_get_object_terms($object_ids, $taxonomies, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 1826'; type='function';}, 
	{name='wp_get_original_referer'; match='wp_get_original_referer'; definition='wp_get_original_referer()'; description=''; file='/wp-includes/functions.php, line: 2062'; type='function';}, 
	{name='wp_get_post_autosave'; match='wp_get_post_autosave'; definition='wp_get_post_autosave($post_id)'; description=''; file='/wp-includes/post.php, line: 4785'; type='function';}, 
	{name='wp_get_post_categories'; match='wp_get_post_categories'; definition='wp_get_post_categories($post_id=0, $args=array())'; description='Retrieve the list of categories for a post. 
Compatibility layer for themes and plugins. Also an easy layer of abstraction away from the complexity of the taxonomy layer. 

'; file='/wp-includes/post.php, line: 2237'; params='@param int $post_id Optional. The Post ID.  
@param array $args Optional. Overwrite the defaults.  '; return='array '; since='2.1.0 '; uses='wp_get_object_terms() Retrieves the categories. Args details can be found here.'; type='function';}, 
	{name='wp_get_post_cats'; match='wp_get_post_cats'; definition='wp_get_post_cats($blogid=\'1\', $post_ID=0)'; description='@see wp_get_post_categories() '; file='/wp-includes/deprecated.php, line: 746'; params='@param int $blogid Not Used  
@param int $post_ID  '; return='unknown '; since='1.0.1 '; type='function';}, 
	{name='wp_get_post_parent_id'; match='wp_get_post_parent_id'; definition='wp_get_post_parent_id($post_ID)'; description='Returns the post&apos;s parent&apos;s post_ID 
'; file='/wp-includes/post.php, line: 5069'; params='@param int $post_id  '; return='int|bool false on error '; since='3.1.0 '; type='function';}, 
	{name='wp_get_post_revision'; match='wp_get_post_revision'; definition='wp_get_post_revision($post, $output=OBJECT, $filter=\'raw\')'; description=''; file='/wp-includes/post.php, line: 4907'; type='function';}, 
	{name='wp_get_post_revisions'; match='wp_get_post_revisions'; definition='wp_get_post_revisions($post_id=0, $args=null)'; description=''; file='/wp-includes/post.php, line: 5014'; type='function';}, 
	{name='wp_get_post_tags'; match='wp_get_post_tags'; definition='wp_get_post_tags($post_id=0, $args=array())'; description=''; file='/wp-includes/post.php, line: 2264'; type='function';}, 
	{name='wp_get_post_terms'; match='wp_get_post_terms'; definition='wp_get_post_terms($post_id=0, $taxonomy=\'post_tag\', $args=array())'; description=''; file='/wp-includes/post.php, line: 2286'; type='function';}, 
	{name='wp_get_recent_posts'; match='wp_get_recent_posts'; definition='wp_get_recent_posts($args=array(), $output=ARRAY_A)'; description='Retrieve number of recent posts. 

'; file='/wp-includes/post.php, line: 2309'; params='@param string $deprecated Deprecated.  
@param array $args Optional. Overrides defaults.  
@param string $output Optional.  '; return='unknown. '; since='1.0.0 '; uses='wp_parse_args() 
get_posts()'; type='function';}, 
	{name='wp_get_referer'; match='wp_get_referer'; definition='wp_get_referer()'; description=''; file='/wp-includes/functions.php, line: 2041'; type='function';}, 
	{name='wp_get_schedule'; match='wp_get_schedule'; definition='wp_get_schedule($hook, $args=array())'; description='Retrieve Cron schedule for hook with arguments. 
'; file='/wp-includes/cron.php, line: 330'; params='@param string $hook Action hook to execute when cron is run.  
@param array $args Optional. Arguments to pass to the hook\'s callback function.  '; return='string|bool False, if no schedule. Schedule on success. '; since='2.1.0 '; type='function';}, 
	{name='wp_get_schedules'; match='wp_get_schedules'; definition='wp_get_schedules()'; description='Retrieve supported and filtered Cron recurrences. 
The supported recurrences are &apos;hourly&apos; and &apos;daily&apos;. A plugin may add more by hooking into the &apos;cron_schedules&apos; filter. The filter accepts an array of arrays. The outer array has a key that is the name of the schedule or for example &apos;weekly&apos;. The value is an array with two keys, one is &apos;interval&apos; and the other is &apos;display&apos;. 
The &apos;interval&apos; is a number in seconds of when the cron job should run. So for &apos;hourly&apos;, the time is 3600 or 60&lowast;60. For weekly, the value would be 60&lowast;60&lowast;24&lowast;7 or 604800. The value of &apos;interval&apos; would then be 604800. 
The &apos;display&apos; is the description. For the &apos;weekly&apos; key, the &apos;display&apos; would be __(&apos;Once Weekly&apos;) . 
For your plugin, you will be passed an array. you can easily add your schedule by doing the following. // filter parameter variable name is &apos;array&apos; $array[&apos;weekly&apos;] = array( &apos;interval&apos; =&gt; 604800, &apos;display&apos; =&gt; __(&apos;Once Weekly&apos;) ); 
'; file='/wp-includes/cron.php, line: 312'; return='array '; since='2.1.0 '; type='function';}, 
	{name='wp_get_shortlink'; match='wp_get_shortlink'; definition='wp_get_shortlink($id=0, $context=\'post\', $allow_slugs=true)'; description='Return a shortlink for a post, page, attachment, or blog. 
This function exists to provide a shortlink tag that all themes and plugins can target. A plugin must hook in to provide the actual shortlinks. Default shortlink support is limited to providing ?p= style links for posts. Plugins can short circuit this function via the pre_get_shortlink filter or filter the output via the get_shortlink filter. 
'; file='/wp-includes/link-template.php, line: 2380'; params='@param int $id A post or blog id. Default is 0, which means the current post or blog.  
@param string $context Whether the id is a \'blog\' id, \'post\' id, or \'media\' id. If \'post\', the post_type of the post is consulted. If \'query\', the current query is consulted to determine the id and context. Default is \'post\'.  
@param bool $allow_slugs Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this.  '; return='string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks are not enabled. '; since='3.0.0. '; type='function';}, 
	{name='wp_get_sidebars_widgets'; match='wp_get_sidebars_widgets'; definition='wp_get_sidebars_widgets($deprecated=true)'; description='Retrieve full list of sidebars and their widgets. 
Will upgrade sidebar widget list, if needed. Will also save updated list, if needed. 

'; file='/wp-includes/widgets.php, line: 996'; params='@param bool $deprecated Not used (deprecated).  '; return='array Upgraded list of widgets to version 3 array format when called from the admin. '; since='2.2.0 '; type='function';}, 
	{name='wp_get_single_post'; match='wp_get_single_post'; definition='wp_get_single_post($postid=0, $mode=OBJECT)'; description='Retrieve a single post, based on post ID. 
Has categories in &apos;post_category&apos; property or key. Has tags in &apos;tags_input&apos; property or key. 
'; file='/wp-includes/post.php, line: 2354'; params='@param int $postid Post ID.  
@param string $mode How to return result, either OBJECT, ARRAY_N, or ARRAY_A.  '; return='object|array Post object or array holding post contents and information '; since='1.0.0 '; type='function';}, 
	{name='wp_get_term_taxonomy_parent_id'; match='wp_get_term_taxonomy_parent_id'; definition='wp_get_term_taxonomy_parent_id($term_id, $taxonomy)'; description='Returns the term&apos;s parent&apos;s term_ID 
'; file='/wp-includes/taxonomy.php, line: 3145'; params='@param int $term_id  
@param string $taxonomy  '; return='int|bool false on error '; since='3.1.0 '; type='function';}, 
	{name='wp_get_widget_defaults'; match='wp_get_widget_defaults'; definition='wp_get_widget_defaults()'; description='Retrieve default registered sidebars list. 

'; file='/wp-includes/widgets.php, line: 1114'; return='array '; since='2.2.0 '; type='function';}, 
	{name='wp_guess_url'; match='wp_guess_url'; definition='wp_guess_url()'; description=''; file='/wp-admin/load-styles.php, line: 83'; type='function';}, 
	{name='wp_handle_sideload'; match='wp_handle_sideload'; definition='wp_handle_sideload($file, $overrides=false)'; description='Handle sideloads, which is the process of retriving a media item from another server instead of a traditional media upload. This process involves sanitizing the filename, checking extensions for mime type, and moving the file to the appropriate directory within the uploads directory. 
'; file='/wp-admin/includes/file.php, line: 362'; params='@param array $file an array similar to that of a PHP $_FILES POST array  
@param array $overrides Optional. An associative array of names=>values to override default variables with extract( $overrides, EXTR_OVERWRITE ).  '; return='array On success, returns an associative array of file attributes. On failure, returns $overrides[&apos;upload_error_handler&apos;](&amp;$file, $message ) or array( &apos;error&apos;=&gt;$message ). '; since='2.6.0 '; uses='wp_handle_upload_error 
apply_filters 
wp_check_filetype_and_ext 
current_user_can 
wp_upload_dir 
wp_unique_filename '; type='function';}, 
	{name='wp_handle_upload'; match='wp_handle_upload'; definition='wp_handle_upload($file, $overrides=false, $time=null)'; description='Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type, and moving the file to the appropriate directory within the uploads directory. 
'; file='/wp-admin/includes/file.php, line: 230'; params='@param array $file Reference to a single element of $_FILES. Call the function once for each uploaded file.  
@param array $overrides Optional. An associative array of names=>values to override default variables with extract( $overrides, EXTR_OVERWRITE ).  '; return='array On success, returns an associative array of file attributes. On failure, returns $overrides[&apos;upload_error_handler&apos;](&amp;$file, $message ) or array( &apos;error&apos;=&gt;$message ). '; since='2.0 '; uses='wp_handle_upload_error 
apply_filters 
is_multisite 
wp_check_filetype_and_ext 
current_user_can 
wp_upload_dir 
wp_unique_filename 
delete_transient '; type='function';}, 
	{name='wp_hash'; match='wp_hash'; definition='wp_hash($data, $scheme=\'auth\')'; description='Get hash of given string. 

'; file='/wp-includes/pluggable.php, line: 1462'; params='@param string $data Plain text to hash  '; return='string Hash of $data '; since='2.0.3 '; uses='wp_salt() Get WordPress salt'; type='function';}, 
	{name='wp_hash_password'; match='wp_hash_password'; definition='wp_hash_password($password)'; description='Create a hash (encrypt) of a plain text password. 
For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm. 

'; file='/wp-includes/pluggable.php, line: 1483'; params='@param string $password Plain text user password to hash  '; return='string The hash string of the password '; since='2.5 '; type='function';}, 
	{name='wp_head'; match='wp_head'; definition='wp_head()'; description='Fire the wp_head action 
'; file='/wp-includes/general-template.php, line: 1577'; since='1.2.0 '; uses='do_action() Calls \'wp_head\' hook. '; type='function';}, 
	{name='wp_html_excerpt'; match='wp_html_excerpt'; definition='wp_html_excerpt($str, $count)'; description='Safely extracts not more than the first $count characters from html string. 
UTF-8, tags and entities safe prefix extraction. Entities inside will &lowast;NOT&lowast; be counted as one character. For example &amp; will be counted as 4, &lt; as 3, etc. 
'; file='/wp-includes/formatting.php, line: 2726'; params='@param integer $str String to get the excerpt from.  
@param integer $count Maximum number of characters to take.  '; return='string The excerpt. '; since='2.5.0 '; type='function';}, 
	{name='wp_htmledit_pre'; match='wp_htmledit_pre'; definition='wp_htmledit_pre($output)'; description='Formats text for the HTML editor. 
Unless $output is empty it will pass through htmlspecialchars before the &apos;htmledit_pre&apos; filter is applied. 
'; file='/wp-includes/formatting.php, line: 2174'; params='@param string $output The text to be formatted.  '; return='string Formatted text after filter applied. '; since='2.5.0 '; type='function';}, 
	{name='wp_http_supports'; match='wp_http_supports'; definition='wp_http_supports($capabilities=array(), $url=null)'; description='Determines if there is an HTTP Transport that can process this request. 
'; file='/wp-includes/http.php, line: 204'; params='@param array $capabilities Array of capabilities to test or a wp_remote_request() $args array.  
@param string $url Optional. If given, will check if the URL requires SSL and adds that requirement to the capabilities array. '; return='bool '; since='3.2.0 '; type='function';}, 
	{name='wp_iframe'; match='wp_iframe'; definition='wp_iframe($content_func)'; description='{ '; file='/wp-admin/includes/media.php, line: 310'; type='function';}, 
	{name='wp_imagecreatetruecolor'; match='wp_imagecreatetruecolor'; definition='wp_imagecreatetruecolor($width, $height)'; description='Create new GD image resource with transparency support 
'; file='/wp-includes/media.php, line: 1005'; params='@param int $width Image width  
@param int $height Image height  '; return='image resource '; since='2.9.0 '; type='function';}, 
	{name='wp_import_upload_form'; match='wp_import_upload_form'; definition='wp_import_upload_form($action)'; description='Outputs the form used by the importers to accept the data to be imported 
'; file='/wp-admin/includes/template.php, line: 838'; params='@param string $action The action attribute for the form.  '; since='2.0.0 '; type='function';}, 
	{name='wp_initial_nav_menu_meta_boxes'; match='wp_initial_nav_menu_meta_boxes'; definition='wp_initial_nav_menu_meta_boxes()'; description='Limit the amount of meta boxes to just links, pages and cats for first time users. 
'; file='/wp-admin/includes/nav-menu.php, line: 408'; since='3.0.0 '; type='function';}, 
	{name='wp_insert_attachment'; match='wp_insert_attachment'; definition='wp_insert_attachment($object, $file=false, $parent=0)'; description='Insert an attachment. 
If you set the &apos;ID&apos; in the $object parameter, it will mean that you are updating and attempt to update the attachment. You can also set the attachment name or title by setting the key &apos;post_name&apos; or &apos;post_title&apos;. 
You can set the dates for the attachment manually by setting the &apos;post_date&apos; and &apos;post_date_gmt&apos; keys&apos; values. 
By default, the comments will use the default settings for whether the comments are allowed. You can close them manually or keep them open by setting the value for the &apos;comment_status&apos; key. 
The $object parameter can have the following: &apos;post_status&apos; - Default is &apos;draft&apos;. Can not be overridden, set the same as parent post. &apos;post_type&apos; - Default is &apos;post&apos;, will be set to attachment. Can not override. &apos;post_author&apos; - Default is current user ID. The ID of the user, who added the attachment. &apos;ping_status&apos; - Default is the value in default ping status option. Whether the attachment can accept pings. &apos;post_parent&apos; - Default is 0. Can use $parent parameter or set this for the post it belongs to, if any. &apos;menu_order&apos; - Default is 0. The order it is displayed. &apos;to_ping&apos; - Whether to ping. &apos;pinged&apos; - Default is empty string. &apos;post_password&apos; - Default is empty string. The password to access the attachment. &apos;guid&apos; - Global Unique ID for referencing the attachment. &apos;post_content_filtered&apos; - Attachment post content filtered. &apos;post_excerpt&apos; - Attachment excerpt. 

'; file='/wp-includes/post.php, line: 3605'; params='@param string array $object Arguments to override defaults.  
@param string $file Optional filename.  
@param int $parent Parent post ID.  '; return='int Attachment ID. '; since='2.0.0 '; uses='$wpdb 
$user_ID 
do_action() Calls \'edit_attachment\' on $post_ID if this is an update. 
do_action() Calls \'add_attachment\' on $post_ID if this is not an update.'; type='function';}, 
	{name='wp_insert_category'; match='wp_insert_category'; definition='wp_insert_category($catarr, $wp_error=false)'; description='Updates an existing Category or creates a new Category. 
'; file='/wp-admin/includes/taxonomy.php, line: 91'; params='@param mixed $catarr See defaults below. Set \'cat_ID\' to a non-zero value to update an existing category. The \'taxonomy\' key was added in 3.0.0.  
@param bool $wp_error Optional, since 2.5.0. Set this to true if the caller handles  '; return='int|object The ID number of the new or updated Category on success. Zero or a <code>WP_Error</code> on failure, depending on param $wp_error. '; since='2.0.0 '; type='function';}, 
	{name='wp_insert_comment'; match='wp_insert_comment'; definition='wp_insert_comment($commentdata)'; description='Inserts a comment to the database. 
The available comment data key names are &apos;comment_author_IP&apos;, &apos;comment_date&apos;, &apos;comment_date_gmt&apos;, &apos;comment_parent&apos;, &apos;comment_approved&apos;, and &apos;user_id&apos;. 

'; file='/wp-includes/comment.php, line: 1215'; params='@param array $commentdata Contains information on the comment.  '; return='int The new comment&apos;s ID. '; since='2.0.0 '; uses='$wpdb'; type='function';}, 
	{name='wp_insert_link'; match='wp_insert_link'; definition='wp_insert_link($linkdata, $wp_error=false)'; description='This function inserts/updates links into/in the database. 
'; file='/wp-admin/includes/bookmark.php, line: 131'; params='@param array $linkdata Elements that make up the link to insert.  
@param bool $wp_error Optional. If true return  '; return='int|WP_Error Value 0 or <code>WP_Error</code> on failure. The link ID on success. '; since='2.0.0 '; type='function';}, 
	{name='wp_insert_post'; match='wp_insert_post'; definition='wp_insert_post($postarr, $wp_error=false)'; description='Insert a post. 
If the $postarr parameter has &apos;ID&apos; set to a value, then post will be updated. 
You can set the post date manually, but setting the values for &apos;post_date&apos; and &apos;post_date_gmt&apos; keys. You can close the comments or open the comments by setting the value for &apos;comment_status&apos; key. 
The defaults for the parameter $postarr are: &apos;post_status&apos; - Default is &apos;draft&apos;. &apos;post_type&apos; - Default is &apos;post&apos;. &apos;post_author&apos; - Default is current user ID ($user_ID). The ID of the user who added the post. &apos;ping_status&apos; - Default is the value in &apos;default_ping_status&apos; option. Whether the attachment can accept pings. &apos;post_parent&apos; - Default is 0. Set this for the post it belongs to, if any. &apos;menu_order&apos; - Default is 0. The order it is displayed. &apos;to_ping&apos; - Whether to ping. &apos;pinged&apos; - Default is empty string. &apos;post_password&apos; - Default is empty string. The password to access the attachment. &apos;guid&apos; - Global Unique ID for referencing the attachment. &apos;post_content_filtered&apos; - Post content filtered. &apos;post_excerpt&apos; - Post excerpt. 

'; file='/wp-includes/post.php, line: 2423'; params='@param array $postarr Elements that make up post to insert.  
@param bool $wp_error Optional. Allow return of  '; return='int|WP_Error The value 0 or <code>WP_Error</code> on failure. The post ID on success. '; since='1.0.0 '; uses='$wpdb 
$wp_rewrite 
$user_ID 
do_action() Calls \'pre_post_update\' on post ID if this is an update. 
do_action() Calls \'edit_post\' action on post ID and post data if this is an update. 
do_action() Calls \'save_post\' and \'wp_insert_post\' on post id and post data just before returning. 
apply_filters() Calls \'wp_insert_post_data\' passing $data, $postarr prior to database update or insert. 
wp_transition_post_status()'; type='function';}, 
	{name='wp_insert_term'; match='wp_insert_term'; definition='wp_insert_term($term, $taxonomy, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 1968'; type='function';}, 
	{name='wp_insert_user'; match='wp_insert_user'; definition='wp_insert_user($userdata)'; description='Insert an user into the database. 
Can update a current user or insert a new user based on whether the user&apos;s ID is present. 
Can be used to update the user&apos;s info (see below), set the user&apos;s role, and set the user&apos;s preference on whether they want the rich editor on. 
Most of the $userdata array fields have filters associated with the values. The exceptions are &apos;rich_editing&apos;, &apos;role&apos;, &apos;jabber&apos;, &apos;aim&apos;, &apos;yim&apos;, &apos;user_registered&apos;, and &apos;ID&apos;. The filters have the prefix &apos;pre_user_&apos; followed by the field name. An example using &apos;description&apos; would have the filter called, &apos;pre_user_description&apos; that can be hooked into. 
The $userdata array can contain the following fields: &apos;ID&apos; - An integer that will be used for updating an existing user. &apos;user_pass&apos; - A string that contains the plain text password for the user. &apos;user_login&apos; - A string that contains the user&apos;s username for logging in. &apos;user_nicename&apos; - A string that contains a nicer looking name for the user. The default is the user&apos;s username. &apos;user_url&apos; - A string containing the user&apos;s URL for the user&apos;s web site. &apos;user_email&apos; - A string containing the user&apos;s email address. &apos;display_name&apos; - A string that will be shown on the site. Defaults to user&apos;s username. It is likely that you will want to change this, for appearance. &apos;nickname&apos; - The user&apos;s nickname, defaults to the user&apos;s username. &apos;first_name&apos; - The user&apos;s first name. &apos;last_name&apos; - The user&apos;s last name. &apos;description&apos; - A string containing content about the user. &apos;rich_editing&apos; - A string for whether to enable the rich editor. False if not empty. &apos;user_registered&apos; - The date the user registered. Format is &apos;Y-m-d H:i:s&apos;. &apos;role&apos; - A string used to set the user&apos;s role. &apos;jabber&apos; - User&apos;s Jabber account. &apos;aim&apos; - User&apos;s AOL IM account. &apos;yim&apos; - User&apos;s Yahoo IM account. 

'; file='/wp-includes/user.php, line: 1383'; params='@param array $userdata An array of user data.  '; return='int|WP_Error The newly created user&apos;s ID or a <code>WP_Error</code> object if the user could not be created. '; since='2.0.0 '; uses='$wpdb WordPress database layer. 
apply_filters() Calls filters for most of the $userdata fields with the prefix \'pre_user\'. See note above. 
do_action() Calls \'profile_update\' hook when updating giving the user\'s ID 
do_action() Calls \'user_register\' hook when creating a new user giving the user\'s ID'; type='function';}, 
	{name='wp_is_post_autosave'; match='wp_is_post_autosave'; definition='wp_is_post_autosave($post)'; description=''; file='/wp-includes/post.php, line: 4849'; type='function';}, 
	{name='wp_is_post_revision'; match='wp_is_post_revision'; definition='wp_is_post_revision($post)'; description=''; file='/wp-includes/post.php, line: 4833'; type='function';}, 
	{name='wp_iso_descrambler'; match='wp_iso_descrambler'; definition='wp_iso_descrambler($string)'; description='Convert to ASCII from email subjects. 
'; file='/wp-includes/formatting.php, line: 1564'; params='@param string $string Subject line  '; return='string Converted string to ASCII '; since='1.2.0 wp_mail() handles charsets in email subjects '; type='function';}, 
	{name='wp_just_in_time_script_localization'; match='wp_just_in_time_script_localization'; definition='wp_just_in_time_script_localization()'; description='Load localized data on print rather than initialization. 
These localizations require information that may not be loaded even by init. 
'; file='/wp-includes/script-loader.php, line: 559'; since='2.5.0 '; type='function';}, 
	{name='wp_kses'; match='wp_kses'; definition='wp_kses($string, $allowed_html, $allowed_protocols=array())'; description='Filters content and keeps only allowable HTML elements. 
This function makes sure that only the allowed HTML element names, attribute names and attribute values plus only sane HTML entities will occur in $string. You have to remove any slashes from PHP&apos;s magic quotes before you call this function. 
The default allowed protocols are &apos;http&apos;, &apos;https&apos;, &apos;ftp&apos;, &apos;mailto&apos;, &apos;news&apos;, &apos;irc&apos;, &apos;gopher&apos;, &apos;nntp&apos;, &apos;feed&apos;, &apos;telnet, &apos;mms&apos;, &apos;rtsp&apos; and &apos;svn&apos;. This covers all common link protocols, except for &apos;javascript&apos; which should not be allowed for untrusted users. 
'; file='/wp-includes/kses.php, line: 502'; params='@param string $string Content to filter through kses  
@param array $allowed_html List of allowed HTML elements  
@param array $allowed_protocols Optional. Allowed protocol in links.  '; return='string Filtered content with only allowed HTML elements '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_array_lc'; match='wp_kses_array_lc'; definition='wp_kses_array_lc($inarray)'; description='Goes through an array and changes the keys to all lower case. 
'; file='/wp-includes/kses.php, line: 978'; params='@param array $inarray Unfiltered array  '; return='array Fixed array with all lowercase keys '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_attr'; match='wp_kses_attr'; definition='wp_kses_attr($element, $attr, $allowed_html, $allowed_protocols)'; description='Removes all attributes, if none are allowed for this element. 
If some are allowed it calls wp_kses_hair() to split them further, and then it builds up new HTML code from the data that kses_hair() returns. It also removes &quot;&lt;&quot; and &quot;&gt;&quot; characters, if there are any left. One more thing it does is to check if the tag has a closing XHTML slash, and if it does, it puts one in the returned code as well. 
'; file='/wp-includes/kses.php, line: 649'; params='@param string $element HTML element/tag  
@param string $attr HTML attributes from HTML element to closing HTML element tag  
@param array $allowed_html Allowed HTML elements  
@param array $allowed_protocols Allowed protocols to keep  '; return='string Sanitized HTML element '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_bad_protocol'; match='wp_kses_bad_protocol'; definition='wp_kses_bad_protocol($string, $allowed_protocols)'; description='Sanitize string from bad protocols. 
This function removes all non-allowed protocols from the beginning of $string. It ignores whitespace and the case of the letters, and it does understand HTML entities. It does its work in a while loop, so it won&apos;t be fooled by a string like &quot;javascript:javascript:alert(57)&quot;. 
'; file='/wp-includes/kses.php, line: 927'; params='@param string $string Content to filter bad protocols from  
@param array $allowed_protocols Allowed protocols to keep  '; return='string Filtered content '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_bad_protocol_once'; match='wp_kses_bad_protocol_once'; definition='wp_kses_bad_protocol_once($string, $allowed_protocols)'; description='Sanitizes content from bad protocols and other characters. 
This function searches for URL protocols at the beginning of $string, while handling whitespace and HTML entities. 
'; file='/wp-includes/kses.php, line: 1033'; params='@param string $string Content to check for bad protocols  
@param string $allowed_protocols Allowed protocols  '; return='string Sanitized content '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_bad_protocol_once2'; match='wp_kses_bad_protocol_once2'; definition='wp_kses_bad_protocol_once2($string, $allowed_protocols)'; description='Callback for wp_kses_bad_protocol_once() regular expression. 
This function processes URL protocols, checks to see if they&apos;re in the white-list or not, and returns different data depending on the answer. 
private '; file='/wp-includes/kses.php, line: 1054'; params='@param string $string URI scheme to check against the whitelist  
@param string $allowed_protocols Allowed protocols  '; return='string Sanitized content '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_check_attr_val'; match='wp_kses_check_attr_val'; definition='wp_kses_check_attr_val($value, $vless, $checkname, $checkvalue)'; description='Performs different checks for attribute values. 
The currently implemented checks are &quot;maxlen&quot;, &quot;minlen&quot;, &quot;maxval&quot;, &quot;minval&quot; and &quot;valueless&quot; with even more checks to come soon. 
'; file='/wp-includes/kses.php, line: 855'; params='@param string $value Attribute value  
@param string $vless Whether the value is valueless. Use \'y\' or \'n\'  
@param string $checkname What $checkvalue is checking for.  
@param mixed $checkvalue What constraint the value should pass  '; return='bool Whether check passes '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_data'; match='wp_kses_data'; definition='wp_kses_data($data)'; description='Sanitize content with allowed HTML Kses rules. 
'; file='/wp-includes/kses.php, line: 1240'; params='@param string $data Content to filter, expected to not be escaped  '; return='string Filtered content '; since='2.9.0 $allowedtags '; type='function';}, 
	{name='wp_kses_decode_entities'; match='wp_kses_decode_entities'; definition='wp_kses_decode_entities($string)'; description='Convert all entities to their character counterparts. 
This function decodes numeric HTML entities (&amp;#65; and &amp;#x41;). It doesn&apos;t do anything with other entities like , but we don&apos;t need them in the URL protocol whitelisting system anyway. 
'; file='/wp-includes/kses.php, line: 1190'; params='@param string $string Content to change entities  '; return='string Content after decoded entities '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_hair'; match='wp_kses_hair'; definition='wp_kses_hair($attr, $allowed_protocols)'; description='Builds an attribute list from string containing attributes. 
This function does a lot of work. It parses an attribute list into an array with attribute data, and tries to do the right thing even if it gets weird input. It will add quotes around attribute values that don&apos;t have any quotes or apostrophes around them, to make it easier to produce HTML code that will conform to W3C&apos;s HTML specification. It will also remove bad URL protocols from attribute values. It also reduces duplicate attributes by using the attribute defined first (foo=&apos;bar&apos; foo=&apos;baz&apos; will result in foo=&apos;bar&apos;). 
'; file='/wp-includes/kses.php, line: 729'; params='@param string $attr Attribute list from HTML element to closing HTML element tag  
@param array $allowed_protocols Allowed protocols to keep  '; return='array List of attributes after parsing '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_hook'; match='wp_kses_hook'; definition='wp_kses_hook($string, $allowed_html, $allowed_protocols)'; description='You add any kses hooks here. 
There is currently only one kses WordPress hook and it is called here. All parameters are passed to the hooks and expected to receive a string. 
'; file='/wp-includes/kses.php, line: 525'; params='@param string $string Content to filter through kses  
@param array $allowed_html List of allowed HTML elements  
@param array $allowed_protocols Allowed protocol in links  '; return='string Filtered content through &apos;pre_kses&apos; hook '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_html_error'; match='wp_kses_html_error'; definition='wp_kses_html_error($string)'; description='Handles parsing errors in wp_kses_hair(). 
The general plan is to remove everything to and including some whitespace, but it deals with quotes and apostrophes as well. 
'; file='/wp-includes/kses.php, line: 1017'; params='@param string $string  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_js_entities'; match='wp_kses_js_entities'; definition='wp_kses_js_entities($string)'; description='Removes the HTML JavaScript entities found in early versions of Netscape 4. 
'; file='/wp-includes/kses.php, line: 1002'; params='@param string $string  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_named_entities'; match='wp_kses_named_entities'; definition='wp_kses_named_entities($matches)'; description='Callback for wp_kses_normalize_entities() regular expression. 
This function only accepts valid named entity references, which are finite, case-sensitive, and highly scrutinized by HTML and XML validators. 
'; file='/wp-includes/kses.php, line: 1109'; params='@param array $matches preg_replace_callback() matches array  '; return='string Correctly encoded entity '; since='3.0.0 '; type='function';}, 
	{name='wp_kses_no_null'; match='wp_kses_no_null'; definition='wp_kses_no_null($string)'; description='Removes any NULL characters in $string. 
'; file='/wp-includes/kses.php, line: 947'; params='@param string $string  '; return='string '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_normalize_entities'; match='wp_kses_normalize_entities'; definition='wp_kses_normalize_entities($string)'; description='Converts and fixes HTML entities. 
This function normalizes HTML entities. It will convert &quot;AT&amp;T&quot; to the correct &quot;AT&amp;amp;T&quot;, &quot;&amp;#00058;&quot; to &quot;&amp;#58;&quot;, &quot;&amp;#XYZZY;&quot; to &quot;&amp;amp;#XYZZY;&quot; and so on. 
'; file='/wp-includes/kses.php, line: 1084'; params='@param string $string Content to normalize entities  '; return='string Content with normalized entities '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_normalize_entities2'; match='wp_kses_normalize_entities2'; definition='wp_kses_normalize_entities2($matches)'; description='Callback for wp_kses_normalize_entities() regular expression. 
This function helps wp_kses_normalize_entities() to only accept 16 bit values and nothing more for &amp;#number; entities. 
private '; file='/wp-includes/kses.php, line: 1131'; params='@param array $matches preg_replace_callback() matches array  '; return='string Correctly encoded entity '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_normalize_entities3'; match='wp_kses_normalize_entities3'; definition='wp_kses_normalize_entities3($matches)'; description='Callback for wp_kses_normalize_entities() for regular expression. 
This function helps wp_kses_normalize_entities() to only accept valid Unicode numeric entities in hex form. 
private 
'; file='/wp-includes/kses.php, line: 1157'; params='@param array $matches preg_replace_callback() matches array  '; return='string Correctly encoded entity '; type='function';}, 
	{name='wp_kses_post'; match='wp_kses_post'; definition='wp_kses_post($data)'; description='Sanitize content for allowed HTML tags for post content. 
Post content refers to the page contents of the &apos;post&apos; type and not $_POST data from forms. 
'; file='/wp-includes/kses.php, line: 1274'; params='@param string $data Post content to filter  '; return='string Filtered post content with allowed HTML tags and attributes intact. '; since='2.9.0 $allowedposttags '; type='function';}, 
	{name='wp_kses_split'; match='wp_kses_split'; definition='wp_kses_split($string, $allowed_html, $allowed_protocols)'; description='Searches for HTML tags, no matter how malformed. 
It also matches stray &quot;&gt;&quot; characters. 
'; file='/wp-includes/kses.php, line: 553'; params='@param string $string Content to filter  
@param array $allowed_html Allowed HTML elements  
@param array $allowed_protocols Allowed protocols to keep  '; return='string Content with fixed HTML tags '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_split2'; match='wp_kses_split2'; definition='wp_kses_split2($string, $allowed_html, $allowed_protocols)'; description='Callback for wp_kses_split for fixing malformed HTML tags. 
This function does a lot of work. It rejects some very malformed things like &lt;:::&gt;. It returns an empty string, if the element isn&apos;t allowed (look ma, no strip_tags()!). Otherwise it splits the tag into an element and an attribute list. 
After the tag is split into an element and an attribute list, it is run through another filter which will remove illegal attributes and once that is completed, will be returned. 

'; file='/wp-includes/kses.php, line: 592'; params='@param string $string Content to filter  
@param array $allowed_html Allowed HTML elements  
@param array $allowed_protocols Allowed protocols to keep  '; return='string Fixed HTML element '; since='1.0.0 '; uses='wp_kses_attr()'; type='function';}, 
	{name='wp_kses_stripslashes'; match='wp_kses_stripslashes'; definition='wp_kses_stripslashes($string)'; description='Strips slashes from in front of quotes. 
This function changes the character sequence \" to just \". It leaves all other slashes alone. It&apos;s really weird, but the quoting from preg_replace(//e) seems to require this. 
'; file='/wp-includes/kses.php, line: 966'; params='@param string $string String to strip slashes  '; return='string Fixed strings with quoted slashes '; since='1.0.0 '; type='function';}, 
	{name='wp_kses_version'; match='wp_kses_version'; definition='wp_kses_version()'; description='This function returns kses&apos; version number. 
'; file='/wp-includes/kses.php, line: 537'; return='string KSES Version Number '; since='1.0.0 '; type='function';}, 
	{name='wp_link_category_checklist'; match='wp_link_category_checklist'; definition='wp_link_category_checklist($link_id=0)'; description='{ '; file='/wp-admin/includes/template.php, line: 199'; type='function';}, 
	{name='wp_link_pages'; match='wp_link_pages'; definition='wp_link_pages($args=\'\')'; description='The formatted output of a list of pages. 
Displays page links for paginated posts (i.e. includes the . Quicktag one or more times). This tag must be within The Loop. 
The defaults for overwriting are: &apos;next_or_number&apos; - Default is &apos;number&apos; (string). Indicates whether page numbers should be used. Valid values are number and next. &apos;nextpagelink&apos; - Default is &apos;Next Page&apos; (string). Text for link to next page. of the bookmark. &apos;previouspagelink&apos; - Default is &apos;Previous Page&apos; (string). Text for link to previous page, if available. &apos;pagelink&apos; - Default is &apos;%&apos; (String).Format string for page numbers. The % in the parameter string will be replaced with the page number, so Page % generates &quot;Page 1&quot;, &quot;Page 2&quot;, etc. Defaults to %, just the page number. &apos;before&apos; - Default is &apos; 
Pages:&apos; (string). The html or text to prepend to each bookmarks. &apos;after&apos; - Default is &apos;&apos; (string). The html or text to append to each bookmarks. &apos;link_before&apos; - Default is &apos;&apos; (string). The html or text to prepend to each Pages link inside the tag. Also prepended to the current item, which is not linked. &apos;link_after&apos; - Default is &apos;&apos; (string). The html or text to append to each Pages link inside the tag. Also appended to the current item, which is not linked. 

'; file='/wp-includes/post-template.php, line: 625'; params='@param string array $args Optional. Overwrite the defaults.  '; return='string Formatted output in HTML. '; since='1.2.0 '; type='function';}, 
	{name='wp_list_authors'; match='wp_list_authors'; definition='wp_list_authors($args=\'\')'; description='List all the authors of the blog, with several options available. 
optioncount (boolean) (false): Show the count in parenthesis next to the author&apos;s name. exclude_admin (boolean) (true): Exclude the &apos;admin&apos; user that is installed bydefault. show_fullname (boolean) (false): Show their full names. hide_empty (boolean) (true): Don&apos;t show authors without any posts. feed (string) (&apos;&apos;): If isn&apos;t empty, show links to author&apos;s feeds. feed_image (string) (&apos;&apos;): If isn&apos;t empty, use this image to link to feeds. echo (boolean) (true): Set to false to return the output, instead of echoing. style (string) (&apos;list&apos;): Whether to display list of authors in list form or as a string. html (bool) (true): Whether to list the items in html form or plaintext. 
<code>1.2.0 array $args The argument array. null|string The output, if echo is set to false. </code> '; file='/wp-includes/author-template.php, line: 273'; type='function';}, 
	{name='wp_list_bookmarks'; match='wp_list_bookmarks'; definition='wp_list_bookmarks($args=\'\')'; description='Retrieve or echo all of the bookmarks. 
List of default arguments are as follows: &apos;orderby&apos; - Default is &apos;name&apos; (string). How to order the links by. String is based off of the bookmark scheme. &apos;order&apos; - Default is &apos;ASC&apos; (string). Either &apos;ASC&apos; or &apos;DESC&apos;. Orders in either ascending or descending order. &apos;limit&apos; - Default is -1 (integer) or show all. The amount of bookmarks to display. &apos;category&apos; - Default is empty string (string). Include the links in what category ID(s). &apos;category_name&apos; - Default is empty string (string). Get links by category name. &apos;hide_invisible&apos; - Default is 1 (integer). Whether to show (default) or hide links marked as &apos;invisible&apos;. &apos;show_updated&apos; - Default is 0 (integer). Will show the time of when the bookmark was last updated. &apos;echo&apos; - Default is 1 (integer). Whether to echo (default) or return the formatted bookmarks. &apos;categorize&apos; - Default is 1 (integer). Whether to show links listed by category (default) or show links in one column. &apos;show_description&apos; - Default is 0 (integer). Whether to show the description of the bookmark. 
These options define how the Category name will appear before the category links are displayed, if &apos;categorize&apos; is 1. If &apos;categorize&apos; is 0, then it will display for only the &apos;title_li&apos; string and only if &apos;title_li&apos; is not empty. &apos;title_li&apos; - Default is &apos;Bookmarks&apos; (translatable string). What to show before the links appear. &apos;title_before&apos; - Default is &apos; &apos; (string). The HTML or text to show before the &apos;title_li&apos; string. &apos;title_after&apos; - Default is &apos; 
&apos; (string). The HTML or text to show after the &apos;title_li&apos; string. &apos;class&apos; - Default is &apos;linkcat&apos; (string). The CSS class to use for the &apos;title_li&apos;. 
&apos;category_before&apos; - Default is &apos;&apos;. String must contain &apos;id&apos; and &apos;class&apos; to get the id of the category and the &apos;class&apos; argument. These are used for formatting in themes. Argument will be displayed before the &apos;title_before&apos; argument. &apos;category_after&apos; - Default is &apos;&apos; (string). The HTML or text that will appear after the list of links. 
These are only used if &apos;categorize&apos; is set to 1 or true. &apos;category_orderby&apos; - Default is &apos;name&apos;. How to order the bookmark category based on term scheme. &apos;category_order&apos; - Default is &apos;ASC&apos;. Set the order by either ASC (ascending) or DESC (descending). 
@see _walk_bookmarks() For other arguments that can be set in this function and passed to _walk_bookmarks(). get_bookmarks() For other arguments that can be set in this function and passed to get_bookmarks(). <code>2.1.0 uses 73. uses 74. string|array $args Optional. Overwrite the defaults of the function string|null Will only return if echo option is set to not echo. Default is not return anything. </code> '; file='/wp-includes/bookmark-template.php, line: 200'; type='function';}, 
	{name='wp_list_categories'; match='wp_list_categories'; definition='wp_list_categories($args=\'\')'; description='Display or retrieve the HTML list of categories. 
The list of arguments is below: &apos;show_option_all&apos; (string) - Text to display for showing all categories. &apos;orderby&apos; (string) default is &apos;ID&apos; - What column to use for ordering the categories. &apos;order&apos; (string) default is &apos;ASC&apos; - What direction to order categories. &apos;show_last_update&apos; (bool|int) default is 0 - See <code>walk_category_dropdown_tree()</code> &apos;show_count&apos; (bool|int) default is 0 - Whether to show how many posts are in the category. &apos;hide_empty&apos; (bool|int) default is 1 - Whether to hide categories that don&apos;t have any posts attached to them. &apos;use_desc_for_title&apos; (bool|int) default is 1 - Whether to use the description instead of the category title. &apos;feed&apos; - See <code>get_categories()</code> . &apos;feed_type&apos; - See <code>get_categories()</code> . &apos;feed_image&apos; - See <code>get_categories()</code> . &apos;child_of&apos; (int) default is 0 - See <code>get_categories()</code> . &apos;exclude&apos; (string) - See <code>get_categories()</code> . &apos;exclude_tree&apos; (string) - See <code>get_categories()</code> . &apos;echo&apos; (bool|int) default is 1 - Whether to display or retrieve content. &apos;current_category&apos; (int) - See <code>get_categories()</code> . &apos;hierarchical&apos; (bool) - See <code>get_categories()</code> . &apos;title_li&apos; (string) - See <code>get_categories()</code> . &apos;depth&apos; (int) - The max depth. 
'; file='/wp-includes/category-template.php, line: 417'; params='@param string array $args Optional. Override default arguments.  '; return='string HTML content only if &apos;echo&apos; argument is 0. '; since='2.1.0 '; type='function';}, 
	{name='wp_list_cats'; match='wp_list_cats'; definition='wp_list_cats($args=\'\')'; description='@see wp_list_categories() '; file='/wp-includes/deprecated.php, line: 655'; params='@param string array $args  '; return='unknown '; since='1.2 '; type='function';}, 
	{name='wp_list_comments'; match='wp_list_comments'; definition='wp_list_comments($args=array(), $comments=null)'; description='List comments 
Used in the comments.php template to list comments for a particular post 

'; file='/wp-includes/comment-template.php, line: 1413'; params='@param string array $args Formatting options  
@param array $comments Optional array of comment objects. Defaults to $wp_query->comments  '; since='2.7.0 '; type='function';}, 
	{name='wp_list_filter'; match='wp_list_filter'; definition='wp_list_filter($list, $args=array(), $operator=\'AND\')'; description='Filters a list of objects, based on a set of key =&gt; value arguments 
'; file='/wp-includes/functions.php, line: 3171'; params='@param array $list An array of objects to filter  
@param array $args An array of key => value arguments to match against each object  
@param string $operator The logical operation to perform: \'AND\' means all elements from the array must match; \'OR\' means only one element needs to match; \'NOT\' means no elements may match. The default is \'AND\'.  '; return='array '; since='3.1.0 '; type='function';}, 
	{name='wp_list_pages'; match='wp_list_pages'; definition='wp_list_pages($args=\'\')'; description='Retrieve or display list of pages in list (li) format. 
'; file='/wp-includes/post-template.php, line: 807'; params='@param array string $args Optional. Override default arguments.  '; return='string HTML content, if not displaying. '; since='1.5.0 '; type='function';}, 
	{name='wp_list_pluck'; match='wp_list_pluck'; definition='wp_list_pluck($list, $field)'; description='Pluck a certain field out of each object in a list 
'; file='/wp-includes/functions.php, line: 3203'; params='@param array $list A list of objects or arrays  
@param int string $field A field from the object to place instead of the entire object  '; return='array '; since='3.1.0 '; type='function';}, 
	{name='wp_list_post_revisions'; match='wp_list_post_revisions'; definition='wp_list_post_revisions($post_id=0, $args=null)'; description=''; file='/wp-includes/post-template.php, line: 1329'; type='function';}, 
	{name='wp_list_widget_controls'; match='wp_list_widget_controls'; definition='wp_list_widget_controls($sidebar)'; description='Show the widgets and their settings for a sidebar. Used in the the admin widget config screen. 
'; file='/wp-admin/includes/widgets.php, line: 67'; params='@param string $sidebar id slug of the sidebar  '; since='2.5.0 '; type='function';}, 
	{name='wp_list_widget_controls_dynamic_sidebar'; match='wp_list_widget_controls_dynamic_sidebar'; definition='wp_list_widget_controls_dynamic_sidebar($params)'; description='{ '; file='/wp-admin/includes/widgets.php, line: 92'; type='function';}, 
	{name='wp_list_widgets'; match='wp_list_widgets'; definition='wp_list_widgets()'; description='Display list of the available widgets. 
'; file='/wp-admin/includes/widgets.php, line: 14'; since='2.5.0 '; type='function';}, 
	{name='wp_load_alloptions'; match='wp_load_alloptions'; definition='wp_load_alloptions()'; description=''; file='/wp-includes/functions.php, line: 432'; type='function';}, 
	{name='wp_load_core_site_options'; match='wp_load_core_site_options'; definition='wp_load_core_site_options($site_id=null)'; description=''; file='/wp-includes/functions.php, line: 465'; type='function';}, 
	{name='wp_load_image'; match='wp_load_image'; definition='wp_load_image($file)'; description='Load an image from a string, if PHP supports it. 
'; file='/wp-includes/media.php, line: 242'; params='@param string $file Filename of the image to load.  '; return='resource The resulting image resource on success, Error string on failure. '; since='2.1.0 '; type='function';}, 
	{name='wp_localize_script'; match='wp_localize_script'; definition='wp_localize_script($handle, $object_name, $l10n)'; description='Localizes a script. 
Localizes only if script has already been added. 
@see <code>WP_Scripts::localize()</code> '; file='/wp-includes/functions.wp-scripts.php, line: 66'; since='r16 '; type='function';}, 
	{name='wp_login_form'; match='wp_login_form'; definition='wp_login_form($args=array())'; description='Provides a simple login form for use anywhere within WordPress. By default, it echoes the HTML immediately. Pass array(&apos;echo&apos;=&gt;false) to return the string instead. 
'; file='/wp-includes/general-template.php, line: 254'; params='@param array $args Configuration options to modify the form output  '; return='Void, or string containing the form '; since='3.0.0 '; type='function';}, 
	{name='wp_login_url'; match='wp_login_url'; definition='wp_login_url($redirect=\'\', $force_reauth=false)'; description='Returns the Log In URL. 
Returns the URL that allows the user to log in to the site 

'; file='/wp-includes/general-template.php, line: 234'; params='@param string $redirect Path to redirect to on login.  
@param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false.  '; return='string A log in url '; since='2.7.0 '; uses='site_url() To generate the log in URL 
apply_filters() calls \'login_url\' hook on final login url'; type='function';}, 
	{name='wp_loginout'; match='wp_loginout'; definition='wp_loginout($redirect=\'\', $echo=true)'; description='Display the Log In/Out link. 
Displays a link, which allows users to navigate to the Log In page to log in or log out depending on whether they are currently logged in. 

'; file='/wp-includes/general-template.php, line: 185'; params='@param string $redirect Optional path to redirect to on login/logout.  
@param boolean $echo Default to echo and not return the link.  '; since='1.5.0 '; uses='apply_filters() Calls \'loginout\' hook on HTML link content.'; type='function';}, 
	{name='wp_logout'; match='wp_logout'; definition='wp_logout()'; description='Log the current user out. 
'; file='/wp-includes/pluggable.php, line: 555'; since='2.5.0 '; type='function';}, 
	{name='wp_logout_url'; match='wp_logout_url'; definition='wp_logout_url($redirect=\'\')'; description='Returns the Log Out URL. 
Returns the URL that allows the user to log out of the site 

'; file='/wp-includes/general-template.php, line: 209'; params='@param string $redirect Path to redirect to on logout.  '; since='2.7.0 '; uses='wp_nonce_url() To protect against CSRF 
site_url() To generate the log in URL 
apply_filters() calls \'logout_url\' hook on final logout url'; type='function';}, 
	{name='wp_lostpassword_url'; match='wp_lostpassword_url'; definition='wp_lostpassword_url($redirect=\'\')'; description='Returns the Lost Password URL. 
Returns the URL that allows the user to retrieve the lost password 

'; file='/wp-includes/general-template.php, line: 309'; params='@param string $redirect Path to redirect to on login.  '; since='2.8.0 '; uses='site_url() To generate the lost password URL 
apply_filters() calls \'lostpassword_url\' hook on the lostpassword url'; type='function';}, 
	{name='wp_magic_quotes'; match='wp_magic_quotes'; definition='wp_magic_quotes()'; description='Add magic quotes to $_GET, $_POST, $_COOKIE, and $_SERVER. 
Also forces $_REQUEST to be $_GET + $_POST. If $_SERVER, $_COOKIE, or $_ENV are needed, use those superglobals directly. 
'; file='/wp-includes/load.php, line: 529'; since='3.0.0 '; type='function';}, 
	{name='wp_mail'; match='wp_mail'; definition='wp_mail($to, $subject, $message, $headers=\'\', $attachments=array())'; description='Send mail, similar to PHP&apos;s mail 
A true return value does not automatically mean that the user received the email successfully. It just only means that the method used was able to process the request without any errors. 
Using the two &apos;wp_mail_from&apos; and &apos;wp_mail_from_name&apos; hooks allow from creating a from address like &apos;Name &lt; email@address.com &gt;&apos; when both are set. If just &apos;wp_mail_from&apos; is set, then just the email address will be used with no name. 
The default content type is &apos;text/plain&apos; which does not allow using HTML. However, you can set the content type of the email by using the &apos;wp_mail_content_type&apos; filter. 
The default charset is based on the charset used on the blog. The charset can be set using the &apos;wp_mail_charset&apos; filter. 

'; file='/wp-includes/pluggable.php, line: 271'; params='@param string array $to Array or comma-separated list of email addresses to send message.  
@param string $subject Email subject  
@param string $message Message contents  
@param string array $headers Optional. Additional headers.  
@param string array $attachments Optional. Files to attach.  '; return='bool Whether the email contents were sent successfully. '; since='1.2.1 '; uses='apply_filters() Calls \'wp_mail\' hook on an array of all of the parameters. 
apply_filters() Calls \'wp_mail_from\' hook to get the from email address. 
apply_filters() Calls \'wp_mail_from_name\' hook to get the from address name. 
apply_filters() Calls \'wp_mail_content_type\' hook to get the email content type. 
apply_filters() Calls \'wp_mail_charset\' hook to get the email charset 
do_action_ref_array() Calls \'phpmailer_init\' hook on the reference to phpmailer object. 
 @'; type='function';}, 
	{name='wp_maintenance'; match='wp_maintenance'; definition='wp_maintenance()'; description='Dies with a maintenance message when conditions are met. 
Checks for a file in the WordPress root directory named &quot;.maintenance&quot;. This file will contain the variable $upgrading, set to the time the file was created. If the file was created less than 10 minutes ago, WordPress enters maintenance mode and displays a message. 
The default message can be replaced by using a drop-in (maintenance.php in the wp-content directory). 
'; file='/wp-includes/load.php, line: 146'; since='3.0.0 '; type='function';}, 
	{name='wp_make_link_relative'; match='wp_make_link_relative'; definition='wp_make_link_relative($link)'; description='Convert full URL paths to absolute paths. 
Removes the http or https protocols and the domain. Keeps the path &apos;/&apos; at the beginning, so it isn&apos;t a true relative link, but from the web root base. 
'; file='/wp-includes/formatting.php, line: 2402'; params='@param string $link Full URL path.  '; return='string Absolute path. '; since='2.1.0 '; type='function';}, 
	{name='wp_match_mime_types'; match='wp_match_mime_types'; definition='wp_match_mime_types($wildcard_mime_types, $real_mime_types)'; description='Check a MIME-Type against a list. 
If the wildcard_mime_types parameter is a string, it must be comma separated list. If the real_mime_types is a string, it is also comma separated to create the list. 
'; file='/wp-includes/post.php, line: 1885'; params='@param string array $wildcard_mime_types e.g. audio/mpeg or image (same as image/&lowast;) or flash (same as &lowast;flash&lowast;).  
@param string array $real_mime_types post_mime_type values  '; return='array array(wildcard=&gt;array(real types)) '; since='2.5.0 '; type='function';}, 
	{name='wp_max_upload_size'; match='wp_max_upload_size'; definition='wp_max_upload_size()'; description='{ '; file='/wp-admin/includes/template.php, line: 824'; type='function';}, 
	{name='wp_maybe_load_embeds'; match='wp_maybe_load_embeds'; definition='wp_maybe_load_embeds()'; description='Determines if default embed handlers should be loaded. 
Checks to make sure that the embeds library hasn&apos;t already been loaded. If it hasn&apos;t, then it will load the embeds library. 
'; file='/wp-includes/media.php, line: 1411'; since='2.9.0 '; type='function';}, 
	{name='wp_maybe_load_widgets'; match='wp_maybe_load_widgets'; definition='wp_maybe_load_widgets()'; description='Determines if Widgets library should be loaded. 
Checks to make sure that the widgets library hasn&apos;t already been loaded. If it hasn&apos;t, then it will load the widgets library and run an action hook. 
'; file='/wp-includes/functions.php, line: 3221'; since='2.2.0 '; uses='add_action() Calls \'_admin_menu\' hook with \'wp_widgets_add_menu\' value. '; type='function';}, 
	{name='wp_meta'; match='wp_meta'; definition='wp_meta()'; description='Theme container function for the &apos;wp_meta&apos; action. 
The &apos;wp_meta&apos; action can have several purposes, depending on how you use it, but one purpose might have been to allow for theme switching. 
'; file='/wp-includes/general-template.php, line: 359'; since='1.5.0 <code>Explanation of \'wp_meta\' action. uses 337. </code> '; type='function';}, 
	{name='wp_mime_type_icon'; match='wp_mime_type_icon'; definition='wp_mime_type_icon($mime=0)'; description='Retrieve the icon for a MIME type. 
'; file='/wp-includes/post.php, line: 4008'; params='@param string $mime MIME type  '; return='string|bool '; since='2.1.0 '; type='function';}, 
	{name='wp_mkdir_p'; match='wp_mkdir_p'; definition='wp_mkdir_p($target)'; description='Recursive directory creation based on full path. 
Will attempt to set permissions on folders. 
'; file='/wp-includes/functions.php, line: 2078'; params='@param string $target Full path to attempt to create.  '; return='bool Whether the path was created. True if path already exists. '; since='2.0.1 '; type='function';}, 
	{name='wp_nav_menu'; match='wp_nav_menu'; definition='wp_nav_menu($args=array())'; description='Displays a navigation menu. 
Optional $args contents: 
menu - The menu that is desired. Accepts (matching in order) id, slug, name. Defaults to blank. menu_class - CSS class to use for the ul element which forms the menu. Defaults to &apos;menu&apos;. menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented. container - Whether to wrap the ul, and what to wrap it with. Defaults to &apos;div&apos;. container_class - the class that is applied to the container. Defaults to &apos;menu-{menu slug}-container&apos;. container_id - The ID that is applied to the container. Defaults to blank. fallback_cb - If the menu doesn&apos;t exists, a callback function will fire. Defaults to &apos;wp_page_menu&apos;. Set to false for no fallback. before - Text before the link text. after - Text after the link text. link_before - Text before the link. link_after - Text after the link. echo - Whether to echo the menu or return it. Defaults to echo. depth - how many levels of the hierarchy are to be included. 0 means all. Defaults to 0. walker - allows a custom walker to be specified. theme_location - the location in the theme to be used. Must be registered with register_nav_menu() in order to be selectable by the user. items_wrap - How the list items should be wrapped. Defaults to a ul with an id and class. Uses printf() format with numbered placeholders. 
'; file='/wp-includes/nav-menu-template.php, line: 137'; params='@param array $args Arguments  '; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_item_link_meta_box'; match='wp_nav_menu_item_link_meta_box'; definition='wp_nav_menu_item_link_meta_box()'; description='Displays a metabox for the custom links menu item. 
'; file='/wp-admin/includes/nav-menu.php, line: 526'; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_item_post_type_meta_box'; match='wp_nav_menu_item_post_type_meta_box'; definition='wp_nav_menu_item_post_type_meta_box($object, $post_type)'; description='Displays a metabox for a post type menu item. 
'; file='/wp-admin/includes/nav-menu.php, line: 581'; params='@param string $object Not used.  
@param string $post_type The post type object.  '; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_item_taxonomy_meta_box'; match='wp_nav_menu_item_taxonomy_meta_box'; definition='wp_nav_menu_item_taxonomy_meta_box($object, $taxonomy)'; description='Displays a metabox for a taxonomy menu item. 
'; file='/wp-admin/includes/nav-menu.php, line: 802'; params='@param string $object Not used.  
@param string $taxonomy The taxonomy object.  '; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_locations_meta_box'; match='wp_nav_menu_locations_meta_box'; definition='wp_nav_menu_locations_meta_box()'; description='Displays a metabox for the nav menu theme locations. 
'; file='/wp-admin/includes/nav-menu.php, line: 478'; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_manage_columns'; match='wp_nav_menu_manage_columns'; definition='wp_nav_menu_manage_columns()'; description='Returns the columns for the nav menus page. 
'; file='/wp-admin/includes/nav-menu.php, line: 1138'; return='string|WP_Error $output The menu formatted to edit or error object on failure. '; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_max_depth'; match='wp_nav_menu_max_depth'; definition='wp_nav_menu_max_depth()'; description=''; file='/wp-admin/nav-menus.php, line: 439'; type='function';}, 
	{name='wp_nav_menu_post_type_meta_boxes'; match='wp_nav_menu_post_type_meta_boxes'; definition='wp_nav_menu_post_type_meta_boxes()'; description='Creates metaboxes for any post type menu item. 
'; file='/wp-admin/includes/nav-menu.php, line: 438'; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_setup'; match='wp_nav_menu_setup'; definition='wp_nav_menu_setup()'; description='Register nav menu metaboxes and advanced menu items 
'; file='/wp-admin/includes/nav-menu.php, line: 383'; since='3.0.0 '; type='function';}, 
	{name='wp_nav_menu_taxonomy_meta_boxes'; match='wp_nav_menu_taxonomy_meta_boxes'; definition='wp_nav_menu_taxonomy_meta_boxes()'; description='Creates metaboxes for any taxonomy menu item. 
'; file='/wp-admin/includes/nav-menu.php, line: 458'; since='3.0.0 '; type='function';}, 
	{name='wp_new_comment'; match='wp_new_comment'; definition='wp_new_comment($commentdata)'; description='Adds a new comment to the database. 
Filters new comment to ensure that the fields are sanitized and valid before inserting comment into database. Calls &apos;comment_post&apos; action with comment ID and whether comment is approved by WordPress. Also has &apos;preprocess_comment&apos; filter for processing the comment data before the function handles it. 
We use REMOTE_ADDR here directly. If you are behind a proxy, you should ensure that it is properly set, such as in wp-config.php, for your environment. See <code>http://core.trac.wordpress.org/ticket/9235</code> 

'; file='/wp-includes/comment.php, line: 1324'; params='@param array $commentdata Contains information on the comment.  '; return='int The ID of the comment after adding. '; since='1.5.0 '; uses='apply_filters() Calls \'preprocess_comment\' hook on $commentdata parameter array before processing 
do_action() Calls \'comment_post\' hook on $comment_ID returned from adding the comment and if the comment was approved. 
wp_filter_comment() Used to filter comment before adding comment. 
wp_allow_comment() checks to see if comment is approved. 
wp_insert_comment() Does the actual comment insertion to the database.'; type='function';}, 
	{name='wp_new_user_notification'; match='wp_new_user_notification'; definition='wp_new_user_notification($user_id, $plaintext_pass=\'\')'; description='Notify the blog admin of a new user, normally via email. 
'; file='/wp-includes/pluggable.php, line: 1250'; params='@param int $user_id User ID  
@param string $plaintext_pass Optional. The user\'s plaintext password  '; since='2.0 '; type='function';}, 
	{name='wp_next_scheduled'; match='wp_next_scheduled'; definition='wp_next_scheduled($hook, $args=array())'; description='Retrieve the next timestamp for a cron event. 
'; file='/wp-includes/cron.php, line: 176'; params='@param string $hook Action hook to execute when cron is run.  
@param array $args Optional. Arguments to pass to the hook\'s callback function.  '; return='bool|int The UNIX timestamp of the next time the scheduled event will occur. '; since='2.1.0 '; type='function';}, 
	{name='wp_nonce_ays'; match='wp_nonce_ays'; definition='wp_nonce_ays($action)'; description=''; file='/wp-includes/functions.php, line: 2728'; type='function';}, 
	{name='wp_nonce_field'; match='wp_nonce_field'; definition='wp_nonce_field($action=-1, $name=\"_wpnonce\", $referer=true, $echo=true)'; description=''; file='/wp-includes/functions.php, line: 1973'; type='function';}, 
	{name='wp_nonce_tick'; match='wp_nonce_tick'; definition='wp_nonce_tick()'; description='Get the time-dependent variable for nonce creation. 
A nonce has a lifespan of two ticks. Nonces in their second tick may be updated, e.g. by autosave. 
'; file='/wp-includes/pluggable.php, line: 1289'; return='int '; since='2.5 '; type='function';}, 
	{name='wp_nonce_url'; match='wp_nonce_url'; definition='wp_nonce_url($actionurl, $action=-1)'; description=''; file='/wp-includes/functions.php, line: 1940'; type='function';}, 
	{name='wp_not_installed'; match='wp_not_installed'; definition='wp_not_installed()'; description='Redirects to the installer if WordPress is not installed. 
Dies with an error message when multisite is enabled. 
'; file='/wp-includes/load.php, line: 423'; since='3.0.0 '; type='function';}, 
	{name='wp_notify_moderator'; match='wp_notify_moderator'; definition='wp_notify_moderator($comment_id)'; description='Notifies the moderator of the blog about a new comment that is awaiting approval. 

'; file='/wp-includes/pluggable.php, line: 1147'; params='@param int $comment_id Comment ID  '; return='bool Always returns true '; since='1.0 '; uses='$wpdb'; type='function';}, 
	{name='wp_notify_postauthor'; match='wp_notify_postauthor'; definition='wp_notify_postauthor($comment_id, $comment_type=\'\')'; description='Notify an author of a comment/trackback/pingback to one of their posts. 
'; file='/wp-includes/pluggable.php, line: 1046'; params='@param int $comment_id Comment ID  
@param string $comment_type Optional. The comment type either \'comment\' (default), \'trackback\', or \'pingback\'  '; return='bool False if user email does not exist. True on completion. '; since='1.0.0 '; type='function';}, 
	{name='wp_ob_end_flush_all'; match='wp_ob_end_flush_all'; definition='wp_ob_end_flush_all()'; description='Flush all output buffers for PHP 5.2. 
Make sure all output buffers are flushed before our singletons our destroyed. 
'; file='/wp-includes/functions.php, line: 3247'; since='2.2.0 '; type='function';}, 
	{name='wp_oembed_add_provider'; match='wp_oembed_add_provider'; definition='wp_oembed_add_provider($format, $provider, $regex=false)'; description='Adds a URL format and oEmbed provider URL pair. 
@see <code>WP_oEmbed</code> 
'; file='/wp-includes/media.php, line: 1397'; params='@param string $format The format of URL that this provider can handle. You can use asterisks as wildcards.  
@param string $provider The URL to the oEmbed provider.  
@param boolean $regex Whether the $format parameter is in a regex format.  '; since='2.9.0 '; uses='_wp_oembed_get_object()'; type='function';}, 
	{name='wp_oembed_get'; match='wp_oembed_get'; definition='wp_oembed_get($url, $args=\'\')'; description='Attempts to fetch the embed HTML for a provided URL using oEmbed. 
@see <code>WP_oEmbed</code> 
'; file='/wp-includes/media.php, line: 1379'; params='@param string $url The URL that should be embeded.  
@param array $args Addtional arguments and parameters.  '; return='string The original URL on failure or the embed HTML on success. '; since='2.9.0 '; uses='_wp_oembed_get_object() 
'; type='function';}, 
	{name='wp_old_slug_redirect'; match='wp_old_slug_redirect'; definition='wp_old_slug_redirect()'; description='Redirect old slugs to the correct permalink. 
Attempts to find the current slug from the past slugs. 

'; file='/wp-includes/query.php, line: 3483'; return='null If no link is found, null is returned. '; since='2.1.0 '; uses='$wp_query 
$wpdb'; type='function';}, 
	{name='wp_original_referer_field'; match='wp_original_referer_field'; definition='wp_original_referer_field($echo=true, $jump_back_to=\'current\')'; description=''; file='/wp-includes/functions.php, line: 2023'; type='function';}, 
	{name='wp_page_menu'; match='wp_page_menu'; definition='wp_page_menu($args=array())'; description='Display or retrieve list of pages with optional home link. 
The arguments are listed below and part of the arguments are for <code>wp_list_pages()</code> function. Check that function for more info on those arguments. 
sort_column - How to sort the list of pages. Defaults to page title. Use column for posts table. menu_class - Class to use for the div ID which contains the page list. Defaults to &apos;menu&apos;. echo - Whether to echo list or return it. Defaults to echo. link_before - Text before show_home argument text. link_after - Text after show_home argument text. show_home - If you set this argument, then it will display the link to the home page. The show_home argument really just needs to be set to the value of the text of the link. 
'; file='/wp-includes/post-template.php, line: 880'; params='@param array string $args  '; since='2.7.0 '; type='function';}, 
	{name='wp_parse_args'; match='wp_parse_args'; definition='wp_parse_args($args, $defaults=\'\')'; description='Merge user defined arguments into defaults array. 
This function is used throughout WordPress to allow for both string or array to be merged into another array. 
'; file='/wp-includes/functions.php, line: 3087'; params='@param string array $args Value to merge with $defaults  
@param array $defaults Array that serves as the defaults.  '; return='array Merged user defined values with defaults. '; since='2.2.0 '; type='function';}, 
	{name='wp_parse_auth_cookie'; match='wp_parse_auth_cookie'; definition='wp_parse_auth_cookie($cookie=\'\', $scheme=\'\')'; description='Parse a cookie into its components 
'; file='/wp-includes/pluggable.php, line: 659'; params='@param string $cookie  
@param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in  '; return='array Authentication cookie components '; since='2.7 '; type='function';}, 
	{name='wp_parse_id_list'; match='wp_parse_id_list'; definition='wp_parse_id_list($list)'; description='Clean up an array, comma- or space-separated list of IDs 
'; file='/wp-includes/functions.php, line: 3108'; params='@param array string $list  '; return='array Sanitized array of IDs '; since='3.0.0 '; type='function';}, 
	{name='wp_parse_str'; match='wp_parse_str'; definition='wp_parse_str($string, $array)'; description='Parses a string into variables to be stored in an array. 
Uses <code>parse_str()</code> and stripslashes if <code>magic_quotes_gpc</code> is on. 

'; file='/wp-includes/formatting.php, line: 2565'; params='@param string $string The string to be parsed.  
@param array $array Variables will be stored in this array.  '; since='2.2.1 '; uses='apply_filters() for the \'wp_parse_str\' filter.'; type='function';}, 
	{name='wp_password_change_notification'; match='wp_password_change_notification'; definition='wp_password_change_notification($user)'; description='Notify the blog admin of a user changing password, normally via email. 
'; file='/wp-includes/pluggable.php, line: 1228'; params='@param object $user User Object  '; since='2.7 '; type='function';}, 
	{name='wp_plugin_update_row'; match='wp_plugin_update_row'; definition='wp_plugin_update_row($file, $plugin_data)'; description=''; file='/wp-admin/includes/update.php, line: 185'; type='function';}, 
	{name='wp_plugin_update_rows'; match='wp_plugin_update_rows'; definition='wp_plugin_update_rows()'; description=''; file='/wp-admin/includes/update.php, line: 171'; type='function';}, 
	{name='wp_popular_terms_checklist'; match='wp_popular_terms_checklist'; definition='wp_popular_terms_checklist($taxonomy, $default=0, $number=10, $echo=true)'; description='{ '; file='/wp-admin/includes/template.php, line: 155'; type='function';}, 
	{name='wp_post_mime_type_where'; match='wp_post_mime_type_where'; definition='wp_post_mime_type_where($post_mime_types, $table_alias=\'\')'; description='Convert MIME types into SQL. 
'; file='/wp-includes/post.php, line: 1918'; params='@param string array $post_mime_types List of mime types or comma separated string of mime types.  
@param string $table_alias Optional. Specify a table alias, if needed.  '; return='string The SQL AND clause for mime searching. '; since='2.5.0 '; type='function';}, 
	{name='wp_post_revision_title'; match='wp_post_revision_title'; definition='wp_post_revision_title($revision, $link=true)'; description=''; file='/wp-includes/post-template.php, line: 1273'; type='function';}, 
	{name='wp_pre_kses_less_than'; match='wp_pre_kses_less_than'; definition='wp_pre_kses_less_than($text)'; description='Convert lone less than signs. 
KSES already converts lone greater than signs. 
'; file='/wp-includes/formatting.php, line: 2583'; params='@param string $text Text to be converted.  '; return='string Converted text. '; since='2.3.0 '; uses='wp_pre_kses_less_than_callback in the callback function. '; type='function';}, 
	{name='wp_pre_kses_less_than_callback'; match='wp_pre_kses_less_than_callback'; definition='wp_pre_kses_less_than_callback($matches)'; description='Callback function used by preg_replace. 
'; file='/wp-includes/formatting.php, line: 2596'; params='@param array $matches Populated by matches to preg_replace.  '; return='string The text returned after esc_html if needed. '; since='2.3.0 '; uses='esc_html to format the $matches text. '; type='function';}, 
	{name='wp_preload_dialogs'; match='wp_preload_dialogs'; definition='wp_preload_dialogs($init)'; description=''; file='/wp-admin/includes/post.php, line: 1734'; type='function';}, 
	{name='wp_print_editor_js'; match='wp_print_editor_js'; definition='wp_print_editor_js()'; description=''; file='/wp-admin/includes/post.php, line: 1769'; type='function';}, 
	{name='wp_print_footer_scripts'; match='wp_print_footer_scripts'; definition='wp_print_footer_scripts()'; description='Prints the scripts that were queued for the footer on the front end. 
'; file='/wp-includes/script-loader.php, line: 725'; since='2.8 '; type='function';}, 
	{name='wp_print_head_scripts'; match='wp_print_head_scripts'; definition='wp_print_head_scripts()'; description='Prints the script queue in the HTML head on the front end. 
Postpones the scripts that were queued for the footer. wp_print_footer_scripts() is called in the footer to print these scripts. 
'; file='/wp-includes/script-loader.php, line: 708'; since='2.8 '; type='function';}, 
	{name='wp_print_scripts'; match='wp_print_scripts'; definition='wp_print_scripts($handles=false)'; description='Prints script tags in document head. 
Called by admin-header.php and by wp_head hook. Since it is called by wp_head on every page load, the function does not instantiate the <code>WP_Scripts</code> object unless script names are explicitly passed. Does make use of already instantiated $wp_scripts if present. Use provided wp_print_scripts hook to register/enqueue new scripts. 
@see WP_Dependencies::print_scripts() '; file='/wp-includes/functions.wp-scripts.php, line: 21'; since='r16 '; type='function';}, 
	{name='wp_print_styles'; match='wp_print_styles'; definition='wp_print_styles($handles=false)'; description='Display styles that are in the queue or part of $handles. 

'; file='/wp-includes/functions.wp-styles.php, line: 20'; params='@param array bool $handles Styles to be printed. An empty array prints the queue, an array with one string prints that style, and an array of strings prints those styles.  '; return='bool True on success, false on failure. '; since='r79 '; uses='do_action() Calls \'wp_print_styles\' hook. '; type='function';}, 
	{name='wp_protect_special_option'; match='wp_protect_special_option'; definition='wp_protect_special_option($option)'; description=''; file='/wp-includes/functions.php, line: 403'; type='function';}, 
	{name='wp_prototype_before_jquery'; match='wp_prototype_before_jquery'; definition='wp_prototype_before_jquery($js_array)'; description='Reorder JavaScript scripts array to place prototype before jQuery. 
'; file='/wp-includes/script-loader.php, line: 535'; params='@param array $js_array JavaScript scripst array  '; return='array Reordered array, if needed. '; since='2.3.1 '; type='function';}, 
	{name='wp_publish_post'; match='wp_publish_post'; definition='wp_publish_post($post_id)'; description='Publish a post by transitioning the post status. 

'; file='/wp-includes/post.php, line: 2725'; params='@param int $post_id Post ID.  '; return='null '; since='2.1.0 '; uses='$wpdb 
do_action() Calls \'edit_post\', \'save_post\', and \'wp_insert_post\' on post_id and post data.'; type='function';}, 
	{name='wp_quicktags'; match='wp_quicktags'; definition='wp_quicktags()'; description=''; file='/wp-admin/includes/post.php, line: 1758'; type='function';}, 
	{name='wp_rand'; match='wp_rand'; definition='wp_rand($min=0, $max=0)'; description='Generates a random number 
'; file='/wp-includes/pluggable.php, line: 1585'; params='@param int $min Lower limit for the generated number (optional, default is 0)  
@param int $max Upper limit for the generated number (optional, default is 4294967295)  '; return='int A random number between min and max '; since='2.6.2 '; type='function';}, 
	{name='wp_redirect'; match='wp_redirect'; definition='wp_redirect($location, $status=302)'; description='Redirects to another page. 

'; file='/wp-includes/pluggable.php, line: 920'; params='@param string $location The path to redirect to  
@param int $status Status code to use  '; return='bool False if $location is not set '; since='1.5.1 '; uses='apply_filters() Calls \'wp_redirect\' hook on $location and $status.'; type='function';}, 
	{name='wp_referer_field'; match='wp_referer_field'; definition='wp_referer_field($echo=true)'; description=''; file='/wp-includes/functions.php, line: 1999'; type='function';}, 
	{name='wp_register'; match='wp_register'; definition='wp_register($before=\'< li >\', $after=\'</li >\', $echo=true)'; description='Display the Registration or Admin link. 
Display a link which allows the user to navigate to the registration page if not logged in and registration is enabled or to the dashboard if logged in. 

'; file='/wp-includes/general-template.php, line: 332'; params='@param string $before Text to output before the link (defaults to ).  
@param string $after Text to output after the link (defaults to ).  
@param boolean $echo Default to echo and not return the link.  '; since='1.5.0 '; uses='apply_filters() Calls \'register\' hook on register / admin link content.'; type='function';}, 
	{name='wp_register_script'; match='wp_register_script'; definition='wp_register_script($handle, $src, $deps=array(), $ver=false, $in_footer=false)'; description='Register new JavaScript file. 
'; file='/wp-includes/functions.wp-scripts.php, line: 48'; params='@param string $handle Script name  
@param string $src Script url  
@param array $deps (optional) Array of script names on which this script depends  
@param string bool $ver (optional) Script version (used for cache busting), set to NULL to disable  
@param bool $in_footer (optional) Whether to enqueue the script before </head> or before </body>  '; return='null '; since='r16 '; type='function';}, 
	{name='wp_register_sidebar_widget'; match='wp_register_sidebar_widget'; definition='wp_register_sidebar_widget($id, $name, $output_callback, $options=array())'; description='Register widget for use in sidebars. 
The default widget option is &apos;classname&apos; that can be override. 
The function can also be used to unregister widgets when $output_callback parameter is an empty string. 

'; file='/wp-includes/widgets.php, line: 603'; params='@param int string $id Widget ID.  
@param string $name Widget display title.  
@param callback $output_callback Run when widget is called.  
@param array string $options Optional. Widget Options.  
@param mixed $params mixed ... Widget parameters to add to widget.  '; return='null Will return if $output_callback is empty after removing widget. '; since='2.2.0 '; uses='$wp_registered_widgets Uses stored registered widgets. 
$wp_register_widget_defaults Retrieves widget defaults.'; type='function';}, 
	{name='wp_register_style'; match='wp_register_style'; definition='wp_register_style($handle, $src, $deps=array(), $ver=false, $media=\'all\')'; description='Register CSS style file. 
@see <code>WP_Styles::add()</code> For additional information. 
'; file='/wp-includes/functions.wp-styles.php, line: 52'; params='@param string $handle Name of the stylesheet.  
@param string bool $src Path to the stylesheet from the root directory of WordPress. Example: \'/css/mystyle.css\'.  
@param array $deps Array of handles of any stylesheet that this stylesheet depends on. (Stylesheets that must be loaded before this stylesheet.) Pass an empty array if there are no dependencies.  
@param string bool $ver String specifying the stylesheet version number. Set to NULL to disable. Used to ensure that the correct version is sent to the client regardless of caching.  
@param string $media The media for which this stylesheet has been defined.  '; since='r79 '; type='function';}, 
	{name='wp_register_widget_control'; match='wp_register_widget_control'; definition='wp_register_widget_control($id, $name, $control_callback, $options=array())'; description='Registers widget control callback for customizing options. 
The options contains the &apos;height&apos;, &apos;width&apos;, and &apos;id_base&apos; keys. The &apos;height&apos; option is never used. The &apos;width&apos; option is the width of the fully expanded control form, but try hard to use the default width. The &apos;id_base&apos; is for multi-widgets (widgets which allow multiple instances such as the text widget), an id_base must be provided. The widget id will end up looking like {$id_base}-{$unique_number}. 
'; file='/wp-includes/widgets.php, line: 716'; params='@param int string $id Sidebar ID.  
@param string $name Sidebar display name.  
@param callback $control_callback Run when sidebar is displayed.  
@param array string $options Optional. Widget options. See above long description.  
@param mixed $params mixed ... Optional. Additional parameters to add to widget.  '; since='2.2.0 '; type='function';}, 
	{name='wp_rel_nofollow'; match='wp_rel_nofollow'; definition='wp_rel_nofollow($text)'; description='Adds rel nofollow string to all HTML A elements in content. 
'; file='/wp-includes/formatting.php, line: 1399'; params='@param string $text Content that may contain HTML A elements.  '; return='string Converted content. '; since='1.5.0 '; type='function';}, 
	{name='wp_rel_nofollow_callback'; match='wp_rel_nofollow_callback'; definition='wp_rel_nofollow_callback($matches)'; description='Callback to used to add rel=nofollow string to HTML A element. 
Will remove already existing rel=&quot;nofollow&quot; and rel=&apos;nofollow&apos; from the string to prevent from invalidating (X)HTML. 
'; file='/wp-includes/formatting.php, line: 1418'; params='@param array $matches Single Match  '; return='string HTML A Element with rel nofollow. '; since='2.3.0 '; type='function';}, 
	{name='wp_remote_fopen'; match='wp_remote_fopen'; definition='wp_remote_fopen($uri)'; description='HTTP request for URI to retrieve content. 

'; file='/wp-includes/functions.php, line: 1541'; params='@param string $uri URI/URL of web page to retrieve.  '; return='bool|string HTTP content. False on failure. '; since='1.5.1 '; uses='wp_remote_get()'; type='function';}, 
	{name='wp_remote_get'; match='wp_remote_get'; definition='wp_remote_get($url, $args=array())'; description='Retrieve the raw response from the HTTP request using the GET method. 
@see wp_remote_request() For more information on the response array format. '; file='/wp-includes/http.php, line: 74'; params='@param string $url Site URL to retrieve.  
@param array $args Optional. Override the defaults.  '; return='WP_Error|array The response or <code>WP_Error</code> on failure. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_head'; match='wp_remote_head'; definition='wp_remote_head($url, $args=array())'; description='Retrieve the raw response from the HTTP request using the HEAD method. 
@see wp_remote_request() For more information on the response array format. '; file='/wp-includes/http.php, line: 106'; params='@param string $url Site URL to retrieve.  
@param array $args Optional. Override the defaults.  '; return='WP_Error|array The response or <code>WP_Error</code> on failure. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_post'; match='wp_remote_post'; definition='wp_remote_post($url, $args=array())'; description='Retrieve the raw response from the HTTP request using the POST method. 
@see wp_remote_request() For more information on the response array format. '; file='/wp-includes/http.php, line: 90'; params='@param string $url Site URL to retrieve.  
@param array $args Optional. Override the defaults.  '; return='WP_Error|array The response or <code>WP_Error</code> on failure. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_request'; match='wp_remote_request'; definition='wp_remote_request($url, $args=array())'; description='Retrieve the raw response from the HTTP request. 
The array structure is a little complex. 
$res = array( &apos;headers&apos; =&gt; array(), &apos;response&apos; =&gt; array(&apos;code&apos; =&gt; int, &apos;message&apos; =&gt; string) ); 
All of the headers in $res[&apos;headers&apos;] are with the name as the key and the value as the value. So to get the User-Agent, you would do the following. 
$user_agent = $res[&apos;headers&apos;][&apos;user-agent&apos;]; 
The body is the raw response content and can be retrieved from $res[&apos;body&apos;]. 
This function is called first to make the request and there are other API functions to abstract out the above convoluted setup. 
'; file='/wp-includes/http.php, line: 58'; params='@param string $url Site URL to retrieve.  
@param array $args Optional. Override the defaults.  '; return='WP_Error|array The response or <code>WP_Error</code> on failure. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_retrieve_body'; match='wp_remote_retrieve_body'; definition='wp_remote_retrieve_body($response)'; description='Retrieve only the body from the raw response. 
'; file='/wp-includes/http.php, line: 187'; params='@param array $response HTTP response.  '; return='string The body of the response. Empty string if no body or incorrect parameter given. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_retrieve_header'; match='wp_remote_retrieve_header'; definition='wp_remote_retrieve_header($response, $header)'; description='Retrieve a single header by name from the raw response. 
'; file='/wp-includes/http.php, line: 135'; params='@param array $response  
@param string $header Header name to retrieve value from.  '; return='string The header value. Empty string on if incorrect parameter given, or if the header doesnt exist. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_retrieve_headers'; match='wp_remote_retrieve_headers'; definition='wp_remote_retrieve_headers($response)'; description='Retrieve only the headers from the raw response. 
'; file='/wp-includes/http.php, line: 119'; params='@param array $response HTTP response.  '; return='array The headers of the response. Empty array if incorrect parameter given. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_retrieve_response_code'; match='wp_remote_retrieve_response_code'; definition='wp_remote_retrieve_response_code($response)'; description='Retrieve only the response code from the raw response. 
Will return an empty array if incorrect parameter value is given. 
'; file='/wp-includes/http.php, line: 155'; params='@param array $response HTTP response.  '; return='string the response code. Empty string on incorrect parameter given. '; since='2.7.0 '; type='function';}, 
	{name='wp_remote_retrieve_response_message'; match='wp_remote_retrieve_response_message'; definition='wp_remote_retrieve_response_message($response)'; description='Retrieve only the response message from the raw response. 
Will return an empty array if incorrect parameter value is given. 
'; file='/wp-includes/http.php, line: 172'; params='@param array $response HTTP response.  '; return='string The response message. Empty string on incorrect parameter given. '; since='2.7.0 '; type='function';}, 
	{name='wp_reschedule_event'; match='wp_reschedule_event'; definition='wp_reschedule_event($timestamp, $recurrence, $hook, $args=array())'; description='Reschedule a recurring event. 
'; file='/wp-includes/cron.php, line: 95'; params='@param int $timestamp Timestamp for when to run the event.  
@param string $recurrence How often the event should recur.  
@param string $hook Action hook to execute when cron is run.  
@param array $args Optional. Arguments to pass to the hook\'s callback function.  '; return='bool|null False on failure. Null when event is rescheduled. '; since='2.1.0 '; type='function';}, 
	{name='wp_reset_postdata'; match='wp_reset_postdata'; definition='wp_reset_postdata()'; description='After looping through a separate query, this function restores the $post global to the current post in the main query 
'; file='/wp-includes/query.php, line: 119'; since='3.0.0 '; uses='$wp_query '; type='function';}, 
	{name='wp_reset_query'; match='wp_reset_query'; definition='wp_reset_query()'; description='Destroy the previous query and set up a new query. 
This should be used after <code>query_posts()</code> and before another <code>query_posts()</code> . This will remove obscure bugs that occur when the previous wp_query object is not destroyed properly before another is set up. 
'; file='/wp-includes/query.php, line: 106'; since='2.3.0 '; uses='$wp_query '; type='function';}, 
	{name='wp_reset_vars'; match='wp_reset_vars'; definition='wp_reset_vars($vars)'; description='Resets global variables based on $_GET and $_POST 
This function resets global variables based on the names passed in the $vars array to the value of $_POST[$var] or $_GET[$var] or &apos;&apos; if neither is defined. 
'; file='/wp-admin/includes/misc.php, line: 244'; params='@param array $vars An array of globals to reset.  '; since='2.0.0 '; type='function';}, 
	{name='wp_restore_post_revision'; match='wp_restore_post_revision'; definition='wp_restore_post_revision($revision_id, $fields=null)'; description=''; file='/wp-includes/post.php, line: 4945'; type='function';}, 
	{name='wp_revoke_user'; match='wp_revoke_user'; definition='wp_revoke_user($id)'; description='Remove all capabilities from user. 
'; file='/wp-admin/includes/user.php, line: 325'; params='@param int $id User ID.  '; since='2.1.0 '; type='function';}, 
	{name='wp_richedit_pre'; match='wp_richedit_pre'; definition='wp_richedit_pre($text)'; description='Formats text for the rich text editor. 
The filter &apos;richedit_pre&apos; is applied here. If $text is empty the filter will be applied to an empty string. 
'; file='/wp-includes/formatting.php, line: 2152'; params='@param string $text The text to be formatted.  '; return='string The formatted text after filter is applied. '; since='2.0.0 '; type='function';}, 
	{name='wp_safe_redirect'; match='wp_safe_redirect'; definition='wp_safe_redirect($location, $status=302)'; description='Performs a safe (local) redirect, using wp_redirect(). 
Checks whether the $location is using an allowed host, if it has an absolute path. A plugin can therefore set or remove allowed host(s) to or from the list. 
If the host is not allowed, then the redirect is to wp-admin on the siteurl instead. This prevents malicious redirects which redirect to another host, but only used in a few places. 

'; file='/wp-includes/pluggable.php, line: 974'; return='void Does not return anything '; since='2.3 '; uses='wp_validate_redirect() To validate the redirect is to an allowed host.'; type='function';}, 
	{name='wp_salt'; match='wp_salt'; definition='wp_salt($scheme=\'auth\')'; description='Get salt to add to hashes to help prevent attacks. 
The secret key is located in two places: the database in case the secret key isn&apos;t defined in the second place, which is in the wp-config.php file. If you are going to set the secret key, then you must do so in the wp-config.php file. 
The secret key in the database is randomly generated and will be appended to the secret key that is in wp-config.php file in some instances. It is important to have the secret key defined or changed in wp-config.php. 
If you have installed WordPress 2.5 or later, then you will have the SECRET_KEY defined in the wp-config.php already. You will want to change the value in it because hackers will know what it is. If you have upgraded to WordPress 2.5 or later version from a version before WordPress 2.5, then you should add the constant to your wp-config.php file. 
Below is an example of how the SECRET_KEY constant is defined with a value. You must not copy the below example and paste into your wp-config.php. If you need an example, then you can have a <code>secret key created</code> for you. 
define(&apos;SECRET_KEY&apos;, &apos;mAry1HadA15|\\/|b17w55w1t3asSn09w&apos;); 
Salting passwords helps against tools which has stored hashed values of common dictionary strings. The added values makes it harder to crack if given salt string is not weak. 
'; file='/wp-includes/pluggable.php, line: 1383'; since='2.5 <code>Create a Secret Key for wp-config.php string $scheme Authentication scheme string Salt value </code> '; type='function';}, 
	{name='wp_sanitize_redirect'; match='wp_sanitize_redirect'; definition='wp_sanitize_redirect($location)'; description='Sanitizes a URL for use in a redirect. 
'; file='/wp-includes/pluggable.php, line: 946'; return='string redirect-sanitized URL '; since='2.3 '; type='function';}, 
	{name='wp_save_nav_menu_items'; match='wp_save_nav_menu_items'; definition='wp_save_nav_menu_items($menu_id=0, $menu_data=array())'; description='Save posted nav menu item data. 
'; file='/wp-admin/includes/nav-menu.php, line: 980'; params='@param int $menu_id The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item.  
@param array $menu_data The unsanitized posted menu item data.  '; return='array The database IDs of the items saved '; since='3.0.0 '; type='function';}, 
	{name='wp_save_post_revision'; match='wp_save_post_revision'; definition='wp_save_post_revision($post_id)'; description=''; file='/wp-includes/post.php, line: 4731'; type='function';}, 
	{name='wp_schedule_event'; match='wp_schedule_event'; definition='wp_schedule_event($timestamp, $recurrence, $hook, $args=array())'; description='Schedule a periodic event. 
Schedules a hook which will be executed by the WordPress actions core on a specific interval, specified by you. The action will trigger when someone visits your WordPress site, if the scheduled time has passed. 
Valid values for the recurrence are hourly, daily and twicedaily. These can be extended using the cron_schedules filter in wp_get_schedules(). 
Use wp_next_scheduled() to prevent duplicates 
'; file='/wp-includes/cron.php, line: 63'; params='@param int $timestamp Timestamp for when to run the event.  
@param string $recurrence How often the event should recur.  
@param string $hook Action hook to execute when cron is run.  
@param array $args Optional. Arguments to pass to the hook\'s callback function.  '; return='bool|null False on failure, null when complete with scheduling event. '; since='2.1.0 '; type='function';}, 
	{name='wp_schedule_single_event'; match='wp_schedule_single_event'; definition='wp_schedule_single_event($timestamp, $hook, $args=array())'; description='Schedules a hook to run only once. 
Schedules a hook which will be executed once by the WordPress actions core at a time which you specify. The action will fire off when someone visits your WordPress site, if the schedule time has passed. 
'; file='/wp-includes/cron.php, line: 22'; since='2.1.0 <code>int $timestamp Timestamp for when to run the event. string $hook Action hook to execute when cron is run. array $args Optional. Arguments to pass to the hook\'s callback function. </code> '; type='function';}, 
	{name='wp_schedule_update_checks'; match='wp_schedule_update_checks'; definition='wp_schedule_update_checks()'; description='Schedule core, theme, and plugin update checks. 
'; file='/wp-includes/update.php, line: 335'; since='3.1.0 '; type='function';}, 
	{name='wp_schedule_update_network_counts'; match='wp_schedule_update_network_counts'; definition='wp_schedule_update_network_counts()'; description='Schedule update of the network-wide counts for the current network. 
'; file='/wp-includes/ms-functions.php, line: 2051'; since='3.1.0 '; type='function';}, 
	{name='wp_scheduled_delete'; match='wp_scheduled_delete'; definition='wp_scheduled_delete()'; description='Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS. 
'; file='/wp-includes/functions.php, line: 4280'; since='2.9.0 '; type='function';}, 
	{name='wp_script_is'; match='wp_script_is'; definition='wp_script_is($handle, $list=\'queue\')'; description='Check whether script has been added to WordPress Scripts. 
The values for list defaults to &apos;queue&apos;, which is the same as enqueue for scripts. 
'; file='/wp-includes/functions.wp-scripts.php, line: 136'; params='@param string $handle Handle used to add script.  
@param string $list Optional, defaults to \'queue\'. Others values are \'registered\', \'queue\', \'done\', \'to_do\'  '; return='bool '; since='<code>WP</code> unknown; BP unknown '; type='function';}, 
	{name='wp_set_all_user_settings'; match='wp_set_all_user_settings'; definition='wp_set_all_user_settings($all)'; description=''; file='/wp-includes/functions.php, line: 992'; type='function';}, 
	{name='wp_set_auth_cookie'; match='wp_set_auth_cookie'; definition='wp_set_auth_cookie($user_id, $remember=false, $secure=\'\')'; description='Sets the authentication cookies based User ID. 
The $remember parameter increases the time that the cookie will be kept. The default the cookie is kept without remembering is two days. When $remember is set, the cookies will be kept for 14 days or two weeks. 
'; file='/wp-includes/pluggable.php, line: 709'; params='@param int $user_id User ID  
@param bool $remember Whether to remember the user  '; since='2.5 '; type='function';}, 
	{name='wp_set_comment_status'; match='wp_set_comment_status'; definition='wp_set_comment_status($comment_id, $comment_status, $wp_error=false)'; description='Sets the status of a comment. 
The &apos;wp_set_comment_status&apos; action is called after the comment is handled and will only be called, if the comment status is either &apos;hold&apos;, &apos;approve&apos;, or &apos;spam&apos;. If the comment status is not in the list, then false is returned and if the status is &apos;delete&apos;, then the comment is deleted without calling the action. 

'; file='/wp-includes/comment.php, line: 1381'; params='@param int $comment_id Comment ID.  
@param string $comment_status New comment status, either \'hold\', \'approve\', \'spam\', or \'delete\'.  
@param bool $wp_error Whether to return a  '; return='bool False on failure or deletion and true on success. '; since='1.0.0 '; uses='wp_transition_comment_status() Passes new and old comment status along with $comment object'; type='function';}, 
	{name='wp_set_current_user'; match='wp_set_current_user'; definition='wp_set_current_user($id, $name=\'\')'; description='Changes the current user by ID or name. 
Set $id to null and specify a name if you do not know a user&apos;s ID. 
Some WordPress functionality is based on the current user and not based on the signed in user. Therefore, it opens the ability to edit and perform actions on users who aren&apos;t signed in. 

'; file='/wp-includes/pluggable.php, line: 27'; params='@param int $id User ID  
@param string $name User\'s username  '; return='<code>WP_User</code> Current user User object '; since='2.0.3 '; uses='do_action() Calls \'set_current_user\' hook after setting the current user.'; type='function';}, 
	{name='wp_set_internal_encoding'; match='wp_set_internal_encoding'; definition='wp_set_internal_encoding()'; description='Sets internal encoding using mb_internal_encoding(). 
In most cases the default internal encoding is latin1, which is of no use, since we want to use the mb_ functions for utf-8 strings. 
'; file='/wp-includes/load.php, line: 513'; since='3.0.0 '; type='function';}, 
	{name='wp_set_lang_dir'; match='wp_set_lang_dir'; definition='wp_set_lang_dir()'; description='Sets the location of the language directory. 
To set directory manually, define WP_LANG_DIR in wp-config.php. 
If the language directory exists within WP_CONTENT_DIR that is used Otherwise if the language directory exists within WPINC, that&apos;s used Finally, If neither of the preceeding directories is found, WP_CONTENT_DIR/languages is used. 
The WP_LANG_DIR constant was introduced in 2.1.0. 
'; file='/wp-includes/load.php, line: 298'; since='3.0.0 '; type='function';}, 
	{name='wp_set_link_cats'; match='wp_set_link_cats'; definition='wp_set_link_cats($link_id=0, $link_categories=array())'; description='Update link with the specified link categories. 
'; file='/wp-admin/includes/bookmark.php, line: 226'; params='@param int $link_id ID of link to update  
@param array $link_categories Array of categories to  '; since='2.1.0 '; type='function';}, 
	{name='wp_set_object_terms'; match='wp_set_object_terms'; definition='wp_set_object_terms($object_id, $terms, $taxonomy, $append=false)'; description=''; file='/wp-includes/taxonomy.php, line: 2097'; type='function';}, 
	{name='wp_set_password'; match='wp_set_password'; definition='wp_set_password($password, $user_id)'; description='Updates the user&apos;s password with a new encrypted one. 
For integration with other applications, this function can be overwritten to instead use the other package password checking algorithm. 

'; file='/wp-includes/pluggable.php, line: 1634'; params='@param string $password The plaintext new user password  
@param int $user_id User ID  '; since='2.5 '; uses='$wpdb WordPress database object for queries 
wp_hash_password() Used to encrypt the user\'s password before passing to the database'; type='function';}, 
	{name='wp_set_post_categories'; match='wp_set_post_categories'; definition='wp_set_post_categories($post_ID=0, $post_categories=array())'; description='Set categories for a post. 
If the post categories parameter is not set, then the default category is going used. 
'; file='/wp-includes/post.php, line: 2936'; params='@param int $post_ID Post ID.  
@param array $post_categories Optional. List of categories.  '; return='bool|mixed '; since='2.1.0 '; type='function';}, 
	{name='wp_set_post_cats'; match='wp_set_post_cats'; definition='wp_set_post_cats($blogid=\'1\', $post_ID=0, $post_categories=array())'; description='Sets the categories that the post id belongs to. 
@see wp_set_post_categories() '; file='/wp-includes/deprecated.php, line: 764'; params='@param int $blogid Not used  
@param int $post_ID  
@param array $post_categories  '; return='unknown '; since='1.0.1 '; type='function';}, 
	{name='wp_set_post_lock'; match='wp_set_post_lock'; definition='wp_set_post_lock($post_id)'; description='Mark the post as currently being edited by the current user 
'; file='/wp-admin/includes/post.php, line: 1280'; params='@param int $post_id ID of the post to being edited  '; return='bool Returns false if the post doesn&apos;t exist of there is no current user '; since='2.5.0 '; type='function';}, 
	{name='wp_set_post_tags'; match='wp_set_post_tags'; definition='wp_set_post_tags($post_id=0, $tags=\'\', $append=false)'; description='Set the tags for a post. 

'; file='/wp-includes/post.php, line: 2888'; params='@param int $post_id Post ID.  
@param string $tags The tags to set for the post, separated by commas.  
@param bool $append If true, don\'t delete existing tags, just add on. If false, replace the tags with the new tags.  '; return='mixed Array of affected term IDs. <code>WP_Error</code> or false on failure. '; since='2.3.0 '; uses='wp_set_object_terms() Sets the tags for the post.'; type='function';}, 
	{name='wp_set_post_terms'; match='wp_set_post_terms'; definition='wp_set_post_terms($post_id=0, $tags=\'\', $taxonomy=\'post_tag\', $append=false)'; description='Set the terms for a post. 

'; file='/wp-includes/post.php, line: 2903'; params='@param int $post_id Post ID.  
@param string $tags The tags to set for the post, separated by commas.  
@param bool $append If true, don\'t delete existing tags, just add on. If false, replace the tags with the new tags.  '; return='mixed Array of affected term IDs. <code>WP_Error</code> or false on failure. '; since='2.8.0 '; uses='wp_set_object_terms() Sets the tags for the post.'; type='function';}, 
	{name='wp_set_sidebars_widgets'; match='wp_set_sidebars_widgets'; definition='wp_set_sidebars_widgets($sidebars_widgets)'; description='Set the sidebar widget option to update sidebars. 

'; file='/wp-includes/widgets.php, line: 1100'; params='@param array $sidebars_widgets Sidebar widgets and their settings.  '; since='2.2.0 '; type='function';}, 
	{name='wp_set_wpdb_vars'; match='wp_set_wpdb_vars'; definition='wp_set_wpdb_vars()'; description='Sets the database table prefix and the format specifiers for database table columns. 
Columns not listed here default to s. 
@see <code>wpdb::$field_types</code> Since 2.8.0 <code>wpdb::prepare()</code> <code>wpdb::insert()</code> <code>wpdb::update()</code> <code>wpdb::set_prefix()</code> '; file='/wp-includes/load.php, line: 353'; since='3.0.0 '; type='function';}, 
	{name='wp_setup_nav_menu_item'; match='wp_setup_nav_menu_item'; definition='wp_setup_nav_menu_item($menu_item)'; description='Decorates a menu item object with the shared navigation menu item properties. 
Properties: db_id: The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn&apos;t exist). object_id: The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories. type: The family of objects originally represented, such as &quot;post_type&quot; or &quot;taxonomy.&quot; object: The type of object originally represented, such as &quot;category,&quot; &quot;post&quot;, or &quot;attachment.&quot; type_label: The singular label used to describe this type of menu item. post_parent: The DB ID of the original object&apos;s parent object, if any (0 otherwise). menu_item_parent: The DB ID of the nav_menu_item that is this item&apos;s menu parent, if any. 0 otherwise. url: The URL to which this menu item points. title: The title of this menu item. target: The target attribute of the link element for this menu item. attr_title: The title attribute of the link element for this menu item. classes: The array of class attribute values for the link element of this menu item. xfn: The XFN relationship expressed in the link of this menu item. description: The description of this menu item. 
'; file='/wp-includes/nav-menu.php, line: 571'; params='@param object $menu_item The menu item to modify.  '; return='object $menu_item The menu item with standard menu item properties. '; since='3.0.0 '; type='function';}, 
	{name='wp_shake_js'; match='wp_shake_js'; definition='wp_shake_js()'; description=''; file='/wp-login.php, line: 143'; type='function';}, 
	{name='wp_shortlink_header'; match='wp_shortlink_header'; definition='wp_shortlink_header()'; description='Send a Link: rel=shortlink header if a shortlink is defined for the current page. 
Attached to the wp action. 
'; file='/wp-includes/link-template.php, line: 2434'; since='3.0.0 '; uses='wp_get_shortlink() '; type='function';}, 
	{name='wp_shortlink_wp_head'; match='wp_shortlink_wp_head'; definition='wp_shortlink_wp_head()'; description='Inject rel=sortlink into head if a shortlink is defined for the current page. 
Attached to the wp_head action. 
'; file='/wp-includes/link-template.php, line: 2416'; since='3.0.0 '; uses='wp_get_shortlink() '; type='function';}, 
	{name='wp_shrink_dimensions'; match='wp_shrink_dimensions'; definition='wp_shrink_dimensions($width, $height, $wmax=128, $hmax=96)'; description='Calculates the new dimentions for a downsampled image. 

'; file='/wp-admin/includes/deprecated.php, line: 52'; params='@param int $width Current width of the image  
@param int $height Current height of the image  
@param int $wmax Maximum wanted width  
@param int $hmax Maximum wanted height  '; return='mixed Array(height,width) of shrunk dimensions. '; since='2.0.0 '; type='function';}, 
	{name='wp_sidebar_description'; match='wp_sidebar_description'; definition='wp_sidebar_description($id)'; description='Retrieve description for a sidebar. 
When registering sidebars a &apos;description&apos; parameter can be included that describes the sidebar for display on the widget administration panel. 
'; file='/wp-includes/widgets.php, line: 673'; params='@param int string $id sidebar ID.  '; return='string Sidebar description, if available. Null on failure to retrieve description. '; since='2.9.0 '; type='function';}, 
	{name='wp_signon'; match='wp_signon'; definition='wp_signon($credentials=\'\', $secure_cookie=\'\')'; description='Authenticate user with remember capability. 
The credentials is an array that has &apos;user_login&apos;, &apos;user_password&apos;, and &apos;remember&apos; indices. If the credentials is not given, then the log in form will be assumed and used if set. 
The various authentication cookies will be set by this function and will be set for a longer period depending on if the &apos;remember&apos; credential is set to true. 
'; file='/wp-includes/user.php, line: 25'; params='@param array $credentials Optional. User info in order to sign on.  
@param bool $secure_cookie Optional. Whether to use secure cookie.  '; return='object Either <code>WP_Error</code> on failure, or <code>WP_User</code> on success. '; since='2.5.0 '; type='function';}, 
	{name='wp_spam_comment'; match='wp_spam_comment'; definition='wp_spam_comment($comment_id)'; description='Marks a comment as Spam 

'; file='/wp-includes/comment.php, line: 1060'; params='@param int $comment_id Comment ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'spam_comment\' before spamming 
do_action() on \'spammed_comment\' after spamming'; type='function';}, 
	{name='wp_specialchars'; match='wp_specialchars'; definition='wp_specialchars($string, $quote_style=ENT_NOQUOTES, $charset=false, $double_encode=false)'; description='Escaping for HTML blocks. 
@see esc_html() '; file='/wp-includes/deprecated.php, line: 2122'; type='function';}, 
	{name='wp_specialchars_decode'; match='wp_specialchars_decode'; definition='wp_specialchars_decode($string, $quote_style=ENT_NOQUOTES)'; description='Converts a number of HTML entities into their special characters. 
Specifically deals with: &amp;, &lt;, &gt;, \", and &apos;. 
$quote_style can be set to ENT_COMPAT to decode &quot; entities, or ENT_QUOTES to do both &quot; and &apos;. Default is ENT_NOQUOTES where no quotes are decoded. 
'; file='/wp-includes/formatting.php, line: 376'; params='@param string $string The text which is to be decoded.  
@param mixed $quote_style Optional. Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to \'single\', double if set to \'double\' or both if otherwise set. Default is ENT_NOQUOTES.  '; return='string The decoded text without HTML entities. '; since='2.8 '; type='function';}, 
	{name='wp_sprintf'; match='wp_sprintf'; definition='wp_sprintf($pattern)'; description='WordPress implementation of PHP sprintf() with filters. 
'; file='/wp-includes/formatting.php, line: 2612'; since='2.5.0 <code>string $pattern The string which formatted args are inserted. mixed $args,... Arguments to be formatted into the $pattern string. string The formatted string. </code> '; type='function';}, 
	{name='wp_sprintf_l'; match='wp_sprintf_l'; definition='wp_sprintf_l($pattern, $args)'; description='Localize list items before the rest of the content. 
The &apos;l&apos; must be at the first characters can then contain the rest of the content. The list items will have &apos;, &apos;, &apos;, and&apos;, and &apos; and &apos; added depending on the amount of list items in the $args parameter. 
'; file='/wp-includes/formatting.php, line: 2677'; params='@param string $pattern Content containing \'l\' at the beginning.  
@param array $args List items to prepend to the content and replace \'l\'.  '; return='string Localized list items and rest of the content. '; since='2.5.0 '; type='function';}, 
	{name='wp_start_object_cache'; match='wp_start_object_cache'; definition='wp_start_object_cache()'; description='Starts the WordPress object cache. 
If an object-cache.php file exists in the wp-content directory, it uses that drop-in as an external object cache. 
'; file='/wp-includes/load.php, line: 381'; since='3.0.0 '; type='function';}, 
	{name='wp_strip_all_tags'; match='wp_strip_all_tags'; definition='wp_strip_all_tags($string, $remove_breaks=false)'; description='Properly strip all HTML tags including script and style 
'; file='/wp-includes/formatting.php, line: 2828'; params='@param string $string String containing HTML tags  
@param bool $remove_breaks optional Whether to remove left over line breaks and white space chars  '; return='string The processed string. '; since='2.9.0 '; type='function';}, 
	{name='wp_style_is'; match='wp_style_is'; definition='wp_style_is($handle, $list=\'queue\')'; description='Check whether style has been added to WordPress Styles. 
The values for list defaults to &apos;queue&apos;, which is the same as wp_enqueue_style(). 

'; file='/wp-includes/functions.wp-styles.php, line: 134'; params='@param string $handle Name of the stylesheet.  
@param string $list Values are \'registered\', \'done\', \'queue\' and \'to_do\'.  '; return='bool True on success, false on failure. '; since='<code>WP</code> unknown; BP unknown '; type='function';}, 
	{name='wp_style_loader_src'; match='wp_style_loader_src'; definition='wp_style_loader_src($src, $handle)'; description='Administration Screen CSS for changing the styles. 
If installing the &apos;wp-admin/&apos; directory will be replaced with &apos;./&apos;. 
The $_wp_admin_css_colors global manages the Administration Screens CSS stylesheet that is loaded. The option that is set is &apos;admin_color&apos; and is the color and key for the array. The value for the color key is an object with a &apos;url&apos; parameter that has the URL path to the CSS file. 
The query from $src parameter will be appended to the URL that is given from the $_wp_admin_css_colors array value URL. 

'; file='/wp-includes/script-loader.php, line: 590'; params='@param string $src Source URL.  
@param string $handle Either \'colors\' or \'colors-rtl\'.  '; return='string URL path to CSS stylesheet for Administration Screens. '; since='2.6.0 '; uses='$_wp_admin_css_colors'; type='function';}, 
	{name='wp_suspend_cache_invalidation'; match='wp_suspend_cache_invalidation'; definition='wp_suspend_cache_invalidation($suspend=true)'; description='Suspend cache invalidation. 
Turns cache invalidation on and off. Useful during imports where you don&apos;t wont to do invalidations every time a post is inserted. Callers must be sure that what they are doing won&apos;t lead to an inconsistent cache when invalidation is suspended. 
'; file='/wp-includes/functions.php, line: 3696'; params='@param bool $suspend Whether to suspend or enable cache invalidation  '; return='bool The current suspend setting '; since='2.7.0 '; type='function';}, 
	{name='wp_tag_cloud'; match='wp_tag_cloud'; definition='wp_tag_cloud($args=\'\')'; description='Display tag cloud. 
The text size is set by the &apos;smallest&apos; and &apos;largest&apos; arguments, which will use the &apos;unit&apos; argument value for the CSS text size unit. The &apos;format&apos; argument can be &apos;flat&apos; (default), &apos;list&apos;, or &apos;array&apos;. The flat value for the &apos;format&apos; argument will separate tags with spaces. The list value for the &apos;format&apos; argument will format the tags in a UL HTML list. The array value for the &apos;format&apos; argument will return in PHP array type format. 
The &apos;orderby&apos; argument will accept &apos;name&apos; or &apos;count&apos; and defaults to &apos;name&apos;. The &apos;order&apos; is the direction to sort, defaults to &apos;ASC&apos; and can be &apos;DESC&apos;. 
The &apos;number&apos; argument is how many tags to return. By default, the limit will be to return the top 45 tags in the tag cloud list. 
The &apos;topic_count_text_callback&apos; argument is a function, which, given the count of the posts with that tag, returns a text for the tooltip of the tag link. 
The &apos;exclude&apos; and &apos;include&apos; arguments are used for the <code>get_tags()</code> function. Only one should be used, because only one will be used and the other ignored, if they are both set. 
'; file='/wp-includes/category-template.php, line: 526'; params='@param array string $args Optional. Override default arguments.  '; return='array Generated tag cloud, only if no failures and &apos;array&apos; is set for the &apos;format&apos; argument. '; since='2.3.0 '; type='function';}, 
	{name='wp_tempnam'; match='wp_tempnam'; definition='wp_tempnam($filename=\'\', $dir=\'\')'; description='Returns a filename of a Temporary unique file. Please note that the calling function must unlink() this itself. 
The filename is based off the passed parameter or defaults to the current unix timestamp, while the directory can either be passed as well, or by leaving it blank, default to a writable temporary directory. 
'; file='/wp-admin/includes/file.php, line: 168'; params='@param string $filename (optional) Filename to base the Unique file off  
@param string $dir (optional) Directory to store the file in  '; return='string a writable filename '; since='2.6.0 '; type='function';}, 
	{name='wp_terms_checklist'; match='wp_terms_checklist'; definition='wp_terms_checklist($post_id=0, $args=array())'; description='Taxonomy independent version of wp_category_checklist 
'; file='/wp-admin/includes/template.php, line: 84'; params='@param int $post_id  
@param array $args  '; since='3.0.0 '; type='function';}, 
	{name='wp_text_diff'; match='wp_text_diff'; definition='wp_text_diff($left_string, $right_string, $args=null)'; description='Displays a human readable HTML representation of the difference between two strings. 
The Diff is available for getting the changes between versions. The output is HTML, so the primary use is for displaying the changes. If the two strings are equivalent, then an empty string will be returned. 
The arguments supported and can be changed are listed below. 
&apos;title&apos; : Default is an empty string. Titles the diff in a manner compatible with the output. &apos;title_left&apos; : Default is an empty string. Change the HTML to the left of the title. &apos;title_right&apos; : Default is an empty string. Change the HTML to the right of the title. 
@see wp_parse_args() Used to change defaults to user defined settings. 
'; file='/wp-includes/pluggable.php, line: 1770'; params='@param string $left_string \"old\" (left) version of string  
@param string $right_string \"new\" (right) version of string  
@param string array $args Optional. Change \'title\', \'title_left\', and \'title_right\' defaults.  '; return='string Empty string if strings are equivalent or HTML with differences. '; since='2.6 '; uses=' 
'; type='function';}, 
	{name='wp_theme_update_row'; match='wp_theme_update_row'; definition='wp_theme_update_row($theme_key, $theme)'; description=''; file='/wp-admin/includes/update.php, line: 264'; type='function';}, 
	{name='wp_theme_update_rows'; match='wp_theme_update_rows'; definition='wp_theme_update_rows()'; description=''; file='/wp-admin/includes/update.php, line: 249'; type='function';}, 
	{name='wp_throttle_comment_flood'; match='wp_throttle_comment_flood'; definition='wp_throttle_comment_flood($block, $time_lastcomment, $time_newcomment)'; description='Whether comment should be blocked because of comment flood. 
'; file='/wp-includes/comment.php, line: 1294'; params='@param bool $block Whether plugin has already blocked comment.  
@param int $time_lastcomment Timestamp for last comment.  
@param int $time_newcomment Timestamp for new comment.  '; return='bool Whether comment should be blocked. '; since='2.1.0 '; type='function';}, 
	{name='wp_timezone_choice'; match='wp_timezone_choice'; definition='wp_timezone_choice($selected_zone)'; description='Gives a nicely formatted list of timezone strings // temporary! Not in final 
'; file='/wp-includes/functions.php, line: 4141'; params='@param string $selected_zone Selected Zone  '; return='string '; since='2.9.0 '; type='function';}, 
	{name='wp_timezone_override_offset'; match='wp_timezone_override_offset'; definition='wp_timezone_override_offset()'; description='gmt_offset modification for smart timezone handling 
Overrides the gmt_offset option if we have a timezone_string available 
'; file='/wp-includes/functions.php, line: 4073'; return='float|bool '; since='2.8.0 '; type='function';}, 
	{name='wp_timezone_supported'; match='wp_timezone_supported'; definition='wp_timezone_supported()'; description='Check for PHP timezone support 

'; file='/wp-includes/deprecated.php, line: 2613'; return='bool '; since='2.9.0 '; type='function';}, 
	{name='wp_tiny_mce'; match='wp_tiny_mce'; definition='wp_tiny_mce($teeny=false, $settings=false)'; description=''; file='/wp-admin/includes/post.php, line: 1429'; type='function';}, 
	{name='wp_title'; match='wp_title'; definition='wp_title($sep=\'&raquo;\', $display=true, $seplocation=\'\')'; description='Display or retrieve page title for all areas of blog. 
By default, the page title will display the separator before the page title, so that the blog title will be before the page title. This is not good for title display, since the blog title shows up on most tabs and not what is important, which is the page that the user is looking at. 
There are also SEO benefits to having the blog title after or to the &apos;right&apos; or the page title. However, it is mostly common sense to have the blog title to the right with most browsers supporting tabs. You can achieve this by using the seplocation parameter and setting the value to &apos;right&apos;. This change was introduced around 2.5.0, in case backwards compatibility of themes is important. 
'; file='/wp-includes/general-template.php, line: 528'; params='@param string $sep Optional, default is \'\'. How to separate the various items within the page title.  
@param bool $display Optional, default is true. Whether to display or retrieve title.  
@param string $seplocation Optional. Direction to display title, \'right\'.  '; return='string|null String on retrieve, null when displaying. '; since='1.0.0 '; type='function';}, 
	{name='wp_title_rss'; match='wp_title_rss'; definition='wp_title_rss($sep=\'&#187;\')'; description=''; file='/wp-includes/feed.php, line: 100'; type='function';}, 
	{name='wp_transition_comment_status'; match='wp_transition_comment_status'; definition='wp_transition_comment_status($new_status, $old_status, $comment)'; description='Call hooks for when a comment status transition occurs. 
Calls hooks for comment status transitions. If the new comment status is not the same as the previous comment status, then two hooks will be ran, the first is &apos;transition_comment_status&apos; with new status, old status, and comment data. The next action called is &apos;comment_OLDSTATUS_to_NEWSTATUS&apos; the NEWSTATUS is the $new_status parameter and the OLDSTATUS is $old_status parameter; it has the comment data. 
The final action will run whether or not the comment statuses are the same. The action is named &apos;comment_NEWSTATUS_COMMENTTYPE&apos;, NEWSTATUS is from the $new_status parameter and COMMENTTYPE is comment_type comment data. 
'; file='/wp-includes/comment.php, line: 1153'; params='@param string $new_status New comment status.  
@param string $old_status Previous comment status.  
@param object $comment Comment data.  '; since='2.7.0 '; type='function';}, 
	{name='wp_transition_post_status'; match='wp_transition_post_status'; definition='wp_transition_post_status($new_status, $old_status, $post)'; description='Transition the post status of a post. 
Calls hooks to transition post status. 
The first is &apos;transition_post_status&apos; with new status, old status, and post data. 
The next action called is &apos;OLDSTATUS_to_NEWSTATUS&apos; the &apos;NEWSTATUS&apos; is the $new_status parameter and the &apos;OLDSTATUS&apos; is $old_status parameter; it has the post data. 
The final action is named &apos;NEWSTATUS_POSTTYPE&apos;, &apos;NEWSTATUS&apos; is from the $new_status parameter and POSTTYPE is post_type post data. 
'; file='/wp-includes/post.php, line: 2984'; since='2.3.0 <code>uses 555. uses 556. uses 557. string $new_status Transition to this post status. string $old_status Previous post status. object $post Post data. </code> '; type='function';}, 
	{name='wp_trash_comment'; match='wp_trash_comment'; definition='wp_trash_comment($comment_id)'; description='Moves a comment to the Trash 
If trash is disabled, comment is permanently deleted. 

'; file='/wp-includes/comment.php, line: 1001'; params='@param int $comment_id Comment ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'trash_comment\' before trashing 
do_action() on \'trashed_comment\' after trashing 
wp_delete_comment() if trash is disabled'; type='function';}, 
	{name='wp_trash_post'; match='wp_trash_post'; definition='wp_trash_post($post_id=0)'; description='Moves a post or page to the Trash 
If trash is disabled, the post or page is permanently deleted. 

'; file='/wp-includes/post.php, line: 2076'; params='@param int $post_id Post ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'trash_post\' before trashing 
do_action() on \'trashed_post\' after trashing 
wp_delete_post() if trash is disabled'; type='function';}, 
	{name='wp_trash_post_comments'; match='wp_trash_post_comments'; definition='wp_trash_post_comments($post=null)'; description='Moves comments for a post to the trash 

'; file='/wp-includes/post.php, line: 2146'; params='@param int $post Post ID or object.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'trash_post_comments\' before trashing 
do_action() on \'trashed_post_comments\' after trashing'; type='function';}, 
	{name='wp_trim_excerpt'; match='wp_trim_excerpt'; definition='wp_trim_excerpt($text)'; description='Generates an excerpt from the content, if needed. 
The excerpt word amount will be 55 words and if the amount is greater than that, then the string &apos; [...]&apos; will be appended to the excerpt. If the string is less than 55 words, then the content will be returned as is. 
The 55 word limit can be modified by plugins/themes using the excerpt_length filter The &apos; [...]&apos; string can be modified by plugins/themes using the excerpt_more filter 
'; file='/wp-includes/formatting.php, line: 1845'; params='@param string $text The excerpt. If set to empty an excerpt is generated.  '; return='string The excerpt. '; since='1.5.0 '; type='function';}, 
	{name='wp_unique_filename'; match='wp_unique_filename'; definition='wp_unique_filename($dir, $filename, $unique_filename_callback=null)'; description='Get a filename that is sanitized and unique for the given directory. 
If the filename is not unique, then a number will be added to the filename before the extension, and will continue adding numbers until the filename is unique. 
The callback is passed three parameters, the first one is the directory, the second is the filename, and the third is the extension. 
'; file='/wp-includes/functions.php, line: 2298'; params='@param string $dir  
@param string $filename  
@param mixed $unique_filename_callback Callback.  '; return='string New filename, if given wasn&apos;t unique. '; since='2.5.0 '; type='function';}, 
	{name='wp_unique_post_slug'; match='wp_unique_post_slug'; definition='wp_unique_post_slug($slug, $post_ID, $post_status, $post_type, $post_parent)'; description='Computes a unique slug for the post, when given the desired slug and some post details. 
'; file='/wp-includes/post.php, line: 2800'; params='@param string $slug the desired slug (post_name)  
@param integer $post_ID  
@param string $post_status no uniqueness checks are made if the post is still draft or pending  
@param string $post_type  
@param integer $post_parent  '; return='string unique slug for the post, based on $post_name (with a -1, -2, etc. suffix) '; since='2.8.0 '; type='function';}, 
	{name='wp_unique_term_slug'; match='wp_unique_term_slug'; definition='wp_unique_term_slug($slug, $term)'; description=''; file='/wp-includes/taxonomy.php, line: 2192'; type='function';}, 
	{name='wp_unregister_GLOBALS'; match='wp_unregister_GLOBALS'; definition='wp_unregister_GLOBALS()'; description='Turn register globals off. 
'; file='/wp-includes/load.php, line: 17'; return='null Will return null if register_globals PHP directive was disabled '; since='2.1.0 '; type='function';}, 
	{name='wp_unregister_sidebar_widget'; match='wp_unregister_sidebar_widget'; definition='wp_unregister_sidebar_widget($id)'; description='Remove widget from sidebar. 
'; file='/wp-includes/widgets.php, line: 691'; params='@param int string $id Widget ID.  '; since='2.2.0 '; type='function';}, 
	{name='wp_unregister_widget_control'; match='wp_unregister_widget_control'; definition='wp_unregister_widget_control($id)'; description='Remove control callback for widget. 

'; file='/wp-includes/widgets.php, line: 818'; params='@param int string $id Widget ID.  '; since='2.2.0 '; uses='wp_register_widget_control() Unregisters by using empty callback.'; type='function';}, 
	{name='wp_unschedule_event'; match='wp_unschedule_event'; definition='wp_unschedule_event($timestamp, $hook, $args=array())'; description='Unschedule a previously scheduled cron job. 
The $timestamp and $hook parameters are required, so that the event can be identified. 
'; file='/wp-includes/cron.php, line: 136'; params='@param int $timestamp Timestamp for when to run the event.  
@param string $hook Action hook, the execution of which will be unscheduled.  
@param array $args Arguments to pass to the hook\'s callback function. Although not passed to a callback function, these arguments are used to uniquely identify the scheduled event, so they should be the same as those used when originally scheduling the event.  '; since='2.1.0 '; type='function';}, 
	{name='wp_unspam_comment'; match='wp_unspam_comment'; definition='wp_unspam_comment($comment_id)'; description='Removes a comment from the Spam 

'; file='/wp-includes/comment.php, line: 1085'; params='@param int $comment_id Comment ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'unspam_comment\' before unspamming 
do_action() on \'unspammed_comment\' after unspamming'; type='function';}, 
	{name='wp_untrash_comment'; match='wp_untrash_comment'; definition='wp_untrash_comment($comment_id)'; description='Removes a comment from the Trash 

'; file='/wp-includes/comment.php, line: 1030'; params='@param int $comment_id Comment ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'untrash_comment\' before untrashing 
do_action() on \'untrashed_comment\' after untrashing'; type='function';}, 
	{name='wp_untrash_post'; match='wp_untrash_post'; definition='wp_untrash_post($post_id=0)'; description='Restores a post or page from the Trash 

'; file='/wp-includes/post.php, line: 2111'; params='@param int $post_id Post ID.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'untrash_post\' before undeletion 
do_action() on \'untrashed_post\' after undeletion'; type='function';}, 
	{name='wp_untrash_post_comments'; match='wp_untrash_post_comments'; definition='wp_untrash_post_comments($post=null)'; description='Restore comments for a post from the trash 

'; file='/wp-includes/post.php, line: 2187'; params='@param int $post Post ID or object.  '; return='mixed False on failure '; since='2.9.0 '; uses='do_action() on \'untrash_post_comments\' before trashing 
do_action() on \'untrashed_post_comments\' after trashing'; type='function';}, 
	{name='wp_update_attachment_metadata'; match='wp_update_attachment_metadata'; definition='wp_update_attachment_metadata($post_id, $data)'; description='Update metadata for an attachment. 
'; file='/wp-includes/post.php, line: 3880'; params='@param int $post_id Attachment ID.  
@param array $data Attachment data.  '; return='int '; since='2.1.0 '; type='function';}, 
	{name='wp_update_category'; match='wp_update_category'; definition='wp_update_category($catarr)'; description='Aliases wp_insert_category() with minimal args. 
If you want to update only some fields of an existing category, call this function with only the new values set inside $catarr. 
'; file='/wp-admin/includes/taxonomy.php, line: 151'; params='@param array $catarr The \'cat_ID\' value is required. All other keys are optional.  '; return='int|bool The ID number of the new or updated Category on success. Zero or FALSE on failure. '; since='2.0.0 '; type='function';}, 
	{name='wp_update_comment'; match='wp_update_comment'; definition='wp_update_comment($commentarr)'; description='Updates an existing comment in the database. 
Filters the comment and makes sure certain fields are valid before updating. 

'; file='/wp-includes/comment.php, line: 1441'; params='@param array $commentarr Contains information on the comment.  '; return='int Comment was updated if value is 1, or was not updated if value is 0. '; since='2.0.0 '; uses='$wpdb 
wp_transition_comment_status() Passes new and old comment status along with $comment object'; type='function';}, 
	{name='wp_update_comment_count'; match='wp_update_comment_count'; definition='wp_update_comment_count($post_id, $do_deferred=false)'; description='Updates the comment count for post(s). 
When $do_deferred is false (is by default) and the comments have been set to be deferred, the post_id will be added to a queue, which will be updated at a later date and only updated once per post ID. 
If the comments have not be set up to be deferred, then the post will be updated. When $do_deferred is set to true, then all previous deferred post IDs will be updated along with the current $post_id. 
@see wp_update_comment_count_now() For what could cause a false return value '; file='/wp-includes/comment.php, line: 1527'; params='@param int $post_id Post ID  
@param bool $do_deferred Whether to process previously deferred post comment counts  '; return='bool True on success, false on failure '; since='2.1.0 '; type='function';}, 
	{name='wp_update_comment_count_now'; match='wp_update_comment_count_now'; definition='wp_update_comment_count_now($post_id)'; description='Updates the comment count for the post. 

'; file='/wp-includes/comment.php, line: 1559'; params='@param int $post_id Post ID  '; return='bool False on &apos;0&apos; $post_id or if post with ID does not exist. True on success. '; since='2.5.0 '; uses='$wpdb 
do_action() Calls \'wp_update_comment_count\' hook on $post_id, $new, and $old 
do_action() Calls \'edit_posts\' hook on $post_id and $post'; type='function';}, 
	{name='wp_update_core'; match='wp_update_core'; definition='wp_update_core($current, $feedback=\'\')'; description=''; file='/wp-admin/includes/update.php, line: 289'; type='function';}, 
	{name='wp_update_link'; match='wp_update_link'; definition='wp_update_link($linkdata)'; description='Update a link in the database. 
'; file='/wp-admin/includes/bookmark.php, line: 247'; params='@param array $linkdata Link data to update.  '; return='int|WP_Error Value 0 or <code>WP_Error</code> on failure. The updated link ID on success. '; since='2.0.0 '; type='function';}, 
	{name='wp_update_nav_menu_item'; match='wp_update_nav_menu_item'; definition='wp_update_nav_menu_item($menu_id=0, $menu_item_db_id=0, $menu_item_data=array())'; description='Save the properties of a menu item or create a new one. 
'; file='/wp-includes/nav-menu.php, line: 269'; params='@param int $menu_id The ID of the menu. Required. If \"0\", makes the menu item a draft orphan.  
@param int $menu_item_db_id The ID of the menu item. If \"0\", creates a new menu item.  
@param array $menu_item_data The menu item\'s data.  '; return='int The menu item&apos;s database ID or <code>WP_Error</code> object on failure. '; since='3.0.0 '; type='function';}, 
	{name='wp_update_nav_menu_object'; match='wp_update_nav_menu_object'; definition='wp_update_nav_menu_object($menu_id=0, $menu_data=array())'; description='Save the properties of a menu or create a new menu with those properties. 
'; file='/wp-includes/nav-menu.php, line: 206'; params='@param int $menu_id The ID of the menu or \"0\" to create a new menu.  
@param array $menu_data The array of menu data.  '; return='int|error object The menu&apos;s ID or <code>WP_Error</code> object. '; since='3.0.0 '; type='function';}, 
	{name='wp_update_network_counts'; match='wp_update_network_counts'; definition='wp_update_network_counts()'; description='Update the network-wide counts for the current network. 
'; file='/wp-includes/ms-functions.php, line: 2064'; since='3.1.0 '; type='function';}, 
	{name='wp_update_plugin'; match='wp_update_plugin'; definition='wp_update_plugin($plugin, $feedback=\'\')'; description=''; file='/wp-admin/includes/update.php, line: 215'; type='function';}, 
	{name='wp_update_plugins'; match='wp_update_plugins'; definition='wp_update_plugins()'; description=''; file='/wp-includes/update.php, line: 118'; type='function';}, 
	{name='wp_update_post'; match='wp_update_post'; definition='wp_update_post($postarr=array())'; description='Update a post with new post data. 
The date does not have to be set for drafts. You can set the date and it will not be overridden. 
'; file='/wp-includes/post.php, line: 2674'; params='@param array object $postarr Post data. Arrays are expected to be escaped, objects are not.  '; return='int 0 on failure, Post ID on success. '; since='1.0.0 '; type='function';}, 
	{name='wp_update_term'; match='wp_update_term'; definition='wp_update_term($term_id, $taxonomy, $args=array())'; description=''; file='/wp-includes/taxonomy.php, line: 2270'; type='function';}, 
	{name='wp_update_term_count'; match='wp_update_term_count'; definition='wp_update_term_count($terms, $taxonomy, $do_deferred=false)'; description=''; file='/wp-includes/taxonomy.php, line: 2400'; type='function';}, 
	{name='wp_update_term_count_now'; match='wp_update_term_count_now'; definition='wp_update_term_count_now($terms, $taxonomy)'; description='Perform term count update immediately. 
'; file='/wp-includes/taxonomy.php, line: 2435'; params='@param array $terms The term_taxonomy_id of terms to update.  
@param string $taxonomy The context of the term.  '; return='bool Always true when complete. '; since='2.5.0 '; type='function';}, 
	{name='wp_update_theme'; match='wp_update_theme'; definition='wp_update_theme($theme, $feedback=\'\')'; description=''; file='/wp-admin/includes/update.php, line: 240'; type='function';}, 
	{name='wp_update_themes'; match='wp_update_themes'; definition='wp_update_themes()'; description=''; file='/wp-includes/update.php, line: 200'; type='function';}, 
	{name='wp_update_user'; match='wp_update_user'; definition='wp_update_user($userdata)'; description='Update an user in the database. 
It is possible to update a user&apos;s password by specifying the &apos;user_pass&apos; value in the $userdata parameter array. 
If $userdata does not contain an &apos;ID&apos; key, then a new user will be created and the new user&apos;s ID will be returned. 
If current user&apos;s password is being updated, then the cookies will be cleared. 
@see wp_insert_user() For what fields can be set in $userdata 
'; file='/wp-includes/user.php, line: 1546'; params='@param array $userdata An array of user data.  '; return='int The updated user&apos;s ID. '; since='2.0.0 '; uses='wp_insert_user() Used to update existing user or add new one if user doesn\'t exist already'; type='function';}, 
	{name='wp_upload_bits'; match='wp_upload_bits'; definition='wp_upload_bits($name, $deprecated, $bits, $time=null)'; description='Create a file in the upload folder with given content. 
If there is an error, then the key &apos;error&apos; will exist with the error message. If success, then the key &apos;file&apos; will have the unique file path, the &apos;url&apos; key will have the link to the new file. and the &apos;error&apos; key will be set to false. 
This function will not move an uploaded file to the upload folder. It will create a new file with the content in $bits parameter. If you move the upload file, read the content of the uploaded file, and then you can give the filename and content to this function, which will add it to the upload folder. 
The permissions will be set on the new file automatically by this function. 
'; file='/wp-includes/functions.php, line: 2366'; params='@param string $name  
@param null $deprecated Never used. Set to null.  
@param mixed $bits File content  
@param string $time Optional. Time formatted in \'yyyy/mm\'.  '; return='array '; since='2.0.0 '; type='function';}, 
	{name='wp_upload_dir'; match='wp_upload_dir'; definition='wp_upload_dir($time=null)'; description='Get an array containing the current upload directory&apos;s path and url. 
Checks the &apos;upload_path&apos; option, which should be from the web root folder, and if it isn&apos;t empty it will be used. If it is empty, then the path will be &apos;WP_CONTENT_DIR/uploads&apos;. If the &apos;UPLOADS&apos; constant is defined, then it will override the &apos;upload_path&apos; option and &apos;WP_CONTENT_DIR/uploads&apos; path. 
The upload URL path is set either by the &apos;upload_url_path&apos; option or by using the &apos;WP_CONTENT_URL&apos; constant and appending &apos;/uploads&apos; to the path. 
If the &apos;uploads_use_yearmonth_folders&apos; is set to true (checkbox if checked in the administration settings panel), then the time will be used. The format will be year first and then month. 
If the path couldn&apos;t be created, then an error will be returned with the key &apos;error&apos; containing the error message. The error suggests that the parent directory is not writable by the server. 
On success, the returned array will have many indices: &apos;path&apos; - base directory and sub directory or full path to upload directory. &apos;url&apos; - base url and sub directory or absolute URL to upload directory. &apos;subdir&apos; - sub directory if uploads use year/month folders option is on. &apos;basedir&apos; - path without subdir. &apos;baseurl&apos; - URL path without subdir. &apos;error&apos; - set to false. 

'; file='/wp-includes/functions.php, line: 2218'; params='@param string $time Optional. Time formatted in \'yyyy/mm\'.  '; return='array See above for description. '; since='2.0.0 '; uses='apply_filters() Calls \'upload_dir\' on returned array.'; type='function';}, 
	{name='wp_user_settings'; match='wp_user_settings'; definition='wp_user_settings()'; description=''; file='/wp-includes/functions.php, line: 830'; type='function';}, 
	{name='wp_validate_auth_cookie'; match='wp_validate_auth_cookie'; definition='wp_validate_auth_cookie($cookie=\'\', $scheme=\'\')'; description='Validates authentication cookie. 
The checks include making sure that the authentication cookie is set and pulling in the contents (if $cookie is not used). 
Makes sure the cookie is not expired. Verifies the hash in cookie is what is should be and compares the two. 
'; file='/wp-includes/pluggable.php, line: 577'; params='@param string $cookie Optional. If used, will validate contents instead of cookie\'s  
@param string $scheme Optional. The cookie scheme to use: auth, secure_auth, or logged_in  '; return='bool|int False if invalid cookie, User ID if valid. '; since='2.5 '; type='function';}, 
	{name='wp_validate_redirect'; match='wp_validate_redirect'; definition='wp_validate_redirect($location, $default=\'\')'; description='Validates a URL for use in a redirect. 
Checks whether the $location is using an allowed host, if it has an absolute path. A plugin can therefore set or remove allowed host(s) to or from the list. 
If the host is not allowed, then the redirect is to $default supplied 

'; file='/wp-includes/pluggable.php, line: 1003'; params='@param string $location The redirect to validate  
@param string $default The value to return is $location is not allowed  '; return='string redirect-sanitized URL '; since='2.8.1 '; uses='apply_filters() Calls \'allowed_redirect_hosts\' on an array containing WordPress host string and $location host string.'; type='function';}, 
	{name='wp_verify_nonce'; match='wp_verify_nonce'; definition='wp_verify_nonce($nonce, $action=-1)'; description='Verify that correct nonce was used with time limit. 
The user is given an amount of time to use the token, so therefore, since the UID and $action remain the same, the independent variable is the time. 
'; file='/wp-includes/pluggable.php, line: 1309'; params='@param string $nonce Nonce that was used in the form to verify  
@param string int $action Should give context to what is taking place and be the same when nonce was created.  '; return='bool Whether the nonce check passed or failed. '; since='2.0.3 '; type='function';}, 
	{name='wp_version_check'; match='wp_version_check'; definition='wp_version_check()'; description=''; file='/wp-includes/update.php, line: 22'; type='function';}, 
	{name='wp_widget_control'; match='wp_widget_control'; definition='wp_widget_control($sidebar_args)'; description='Meta widget used to display the control form for a widget. 
Called from dynamic_sidebar(). 
'; file='/wp-admin/includes/widgets.php, line: 136'; params='@param array $sidebar_args  '; return='array '; since='2.5.0 '; type='function';}, 
	{name='wp_widget_description'; match='wp_widget_description'; definition='wp_widget_description($id)'; description='Retrieve description for widget. 
When registering widgets, the options can also include &apos;description&apos; that describes the widget for display on the widget administration panel or in the theme. 
'; file='/wp-includes/widgets.php, line: 652'; params='@param int string $id Widget ID.  '; return='string Widget description, if available. Null on failure to retrieve description. '; since='2.5.0 '; type='function';}, 
	{name='wp_widgets_add_menu'; match='wp_widgets_add_menu'; definition='wp_widgets_add_menu()'; description='Append the Widgets menu to the themes main menu. 
'; file='/wp-includes/functions.php, line: 3234'; since='2.2.0 '; uses='$submenu The administration submenu list. '; type='function';}, 
	{name='wp_write_post'; match='wp_write_post'; definition='wp_write_post()'; description='Creates a new post from the &quot;Write Post&quot; form using $_POST information. 
'; file='/wp-admin/includes/post.php, line: 533'; return='unknown '; since='2.1.0 '; type='function';}, 
	{name='wp_xmlrpc_server::__construct'; match='__construct'; definition='__construct()'; description='Register all of the XMLRPC methods that XMLRPC server understands. 
Sets up server and method property. Passes XMLRPC methods through the &apos;xmlrpc_methods&apos; filter to allow plugins to extend or replace XMLRPC methods. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 35'; return='<code>wp_xmlrpc_server</code> '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::_getOptions'; match='_getOptions'; definition='_getOptions($options)'; description='Retrieve blog options value from list. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1491'; params='@param array $options Options to retrieve.  '; return='array '; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::_multisite_getUsersBlogs'; match='_multisite_getUsersBlogs'; definition='_multisite_getUsersBlogs($args)'; description='Private function for retrieving a users blogs for multisite setups 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1751'; type='method';}, 
	{name='wp_xmlrpc_server::addTwoNumbers'; match='addTwoNumbers'; definition='addTwoNumbers($args)'; description='Test XMLRPC API by adding two numbers for client. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 140'; params='@param array $args Method Parameters.  '; return='int '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::add_enclosure_if_new'; match='add_enclosure_if_new'; definition='add_enclosure_if_new($post_ID, $enclosure)'; description=''; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2434'; type='method';}, 
	{name='wp_xmlrpc_server::attach_uploads'; match='attach_uploads'; definition='attach_uploads($post_ID, $post_content)'; description='Attach upload to a post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2462'; params='@param int $post_ID Post ID.  
@param string $post_content Post Content for attachment.  '; since='2.1.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_deletePost'; match='blogger_deletePost'; definition='blogger_deletePost($args)'; description='Remove a post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2109'; params='@param array $args Method parameters.  '; return='bool True when post is deleted. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_editPost'; match='blogger_editPost'; definition='blogger_editPost($args)'; description='Edit a post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2055'; params='@param array $args Method parameters.  '; return='bool true when done. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_getPost'; match='blogger_getPost'; definition='blogger_getPost($args)'; description='Retrieve post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1819'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_getRecentPosts'; match='blogger_getRecentPosts'; definition='blogger_getRecentPosts($args)'; description='Retrieve list of recent posts. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1861'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_getTemplate'; match='blogger_getTemplate'; definition='blogger_getTemplate($args)'; description='Retrieve blog_filename content. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1922'; params='@param array $args Method parameters.  '; return='string '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_getUserInfo'; match='blogger_getUserInfo'; definition='blogger_getUserInfo($args)'; description='Retrieve user&apos;s data. 
Gives your client some info about you, so you don&apos;t have to. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1785'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_getUsersBlogs'; match='blogger_getUsersBlogs'; definition='blogger_getUsersBlogs($args)'; description='Retrieve blogs that user owns. 
Will make more sense once we support multiple blogs. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1719'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_newPost'; match='blogger_newPost'; definition='blogger_newPost($args)'; description='Create new post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2001'; params='@param array $args Method parameters.  '; return='int '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::blogger_setTemplate'; match='blogger_setTemplate'; definition='blogger_setTemplate($args)'; description='Updates the content of blog_filename. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1961'; params='@param array $args Method parameters.  '; return='bool True when done. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::escape'; match='escape'; definition='escape($array)'; description='Sanitize string or array of strings for database. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 204'; params='@param string array $array Sanitize single string or array of strings.  '; return='string|array Type matches $array and sanitized for the database. '; since='1.5.2 '; type='method';}, 
	{name='wp_xmlrpc_server::get_custom_fields'; match='get_custom_fields'; definition='get_custom_fields($post_id)'; description='Retrieve custom fields for post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 230'; params='@param int $post_id Post ID.  '; return='array Custom fields, if exist. '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::initialise_blog_option_info'; match='initialise_blog_option_info'; definition='initialise_blog_option_info()'; description='Set up blog options property. 
Passes property through &apos;xmlrpc_blog_options&apos; filter. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 288'; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::login'; match='login'; definition='login($username, $password)'; description='Log user in. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 179'; params='@param string $username User\'s username.  
@param string $password User\'s password.  '; return='mixed <code>WP_User</code> object if authentication passed, false otherwise '; since='2.8 '; type='method';}, 
	{name='wp_xmlrpc_server::login_pass_ok'; match='login_pass_ok'; definition='login_pass_ok($user_login, $user_pass)'; description='Check user&apos;s credentials. 
@see <code>wp_xmlrpc_server::login</code> '; file='/wp-includes/class-wp-xmlrpc-server.php, line: 157'; params='@param string $user_login User\'s username.  
@param string $user_pass User\'s password.  '; return='bool Whether authentication passed. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_getCategoryList'; match='mt_getCategoryList'; definition='mt_getCategoryList($args)'; description='Retrieve list of all categories on blog. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3180'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_getPostCategories'; match='mt_getPostCategories'; definition='mt_getPostCategories($args)'; description='Retrieve post categories. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3218'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_getRecentPostTitles'; match='mt_getRecentPostTitles'; definition='mt_getRecentPostTitles($args)'; description='Retrieve the post titles of recent posts. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3118'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_getTrackbackPings'; match='mt_getTrackbackPings'; definition='mt_getTrackbackPings($args)'; description='Retrieve trackbacks sent to a given post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3324'; params='@param array $args Method parameters.  '; return='mixed '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_publishPost'; match='mt_publishPost'; definition='mt_publishPost($args)'; description='Sets a post&apos;s publish status to &apos;publish&apos;. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3366'; params='@param array $args Method parameters.  '; return='int '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_setPostCategories'; match='mt_setPostCategories'; definition='mt_setPostCategories($args)'; description='Sets categories for a post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3258'; params='@param array $args Method parameters.  '; return='bool True on success. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_supportedMethods'; match='mt_supportedMethods'; definition='mt_supportedMethods($args)'; description='Retrieve an array of methods supported by this server. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3292'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mt_supportedTextFilters'; match='mt_supportedTextFilters'; definition='mt_supportedTextFilters($args)'; description='Retrieve an empty array because we don&apos;t support per-post text filters. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3311'; params='@param array $args Method parameters.  '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mw_editPost'; match='mw_editPost'; definition='mw_editPost($args)'; description='Edit a post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2483'; params='@param array $args Method parameters.  '; return='bool True on success. '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mw_getCategories'; match='mw_getCategories'; definition='mw_getCategories($args)'; description='Retrieve the list of categories on a given blog. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2988'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mw_getPost'; match='mw_getPost'; definition='mw_getPost($args)'; description='Retrieve post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2758'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mw_getRecentPosts'; match='mw_getRecentPosts'; definition='mw_getRecentPosts($args)'; description='Retrieve list of recent posts. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2877'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::mw_newMediaObject'; match='mw_newMediaObject'; definition='mw_newMediaObject($args)'; description='Uploads a file, following your settings. 
Adapted from a patch by Johann Richard. 
<code>1.5.0 array $args Method parameters. array </code> '; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3035'; type='method';}, 
	{name='wp_xmlrpc_server::mw_newPost'; match='mw_newPost'; definition='mw_newPost($args)'; description='Create a new post. 
The &apos;content_struct&apos; argument must contain: title description mt_excerpt mt_text_more mt_keywords mt_tb_ping_urls categories 
Also, it can optionally contain: wp_slug wp_password wp_page_parent_id wp_page_order wp_author_id post_status | page_status - can be &apos;draft&apos;, &apos;private&apos;, &apos;publish&apos;, or &apos;pending&apos; mt_allow_comments - can be &apos;open&apos; or &apos;closed&apos; mt_allow_pings - can be &apos;open&apos; or &apos;closed&apos; date_created_gmt dateCreated 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 2176'; params='@param array $args Method parameters. Contains: '; return='int '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::pingback_extensions_getPingbacks'; match='pingback_extensions_getPingbacks'; definition='pingback_extensions_getPingbacks($args)'; description='Retrieve array of URLs that pingbacked the given URL. 
Specs on http://www.aquarionics.com/misc/archives/blogite/0198.html 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3578'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::pingback_ping'; match='pingback_ping'; definition='pingback_ping($args)'; description='Retrieves a pingback and registers it. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 3408'; params='@param array $args Method parameters.  '; return='array '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::sayHello'; match='sayHello'; definition='sayHello($args)'; description='Test XMLRPC API by saying, &quot;Hello!&quot; to client. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 128'; params='@param array $args Method Parameters.  '; return='string '; since='1.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::serve_request'; match='serve_request'; definition='serve_request()'; description=''; file='/wp-includes/class-wp-xmlrpc-server.php, line: 116'; type='method';}, 
	{name='wp_xmlrpc_server::set_custom_fields'; match='set_custom_fields'; definition='set_custom_fields($post_id, $fields)'; description='Set custom fields for post. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 259'; params='@param int $post_id Post ID.  
@param array $fields Custom fields.  '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_deleteCategory'; match='wp_deleteCategory'; definition='wp_deleteCategory($args)'; description='Remove category. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 917'; params='@param array $args Method parameters.  '; return='mixed See <code>wp_delete_term()</code> for return info. '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_deleteComment'; match='wp_deleteComment'; definition='wp_deleteComment($args)'; description='Delete a comment. 
By default, the comment will be moved to the trash instead of deleted. See <code>wp_delete_comment()</code> for more information on this behavior. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1123'; params='@param array $args Method parameters. Contains: '; return='mixed <code>wp_delete_comment()</code> '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_deletePage'; match='wp_deletePage'; definition='wp_deletePage($args)'; description='Delete page. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 634'; params='@param array $args Method parameters.  '; return='bool True, if success. '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_editComment'; match='wp_editComment'; definition='wp_editComment($args)'; description='Edit comment. 
Besides the common blog_id, username, and password arguments, it takes a comment_id integer and a content_struct array as last argument. 
The allowed keys in the content_struct array are: &apos;author&apos; &apos;author_url&apos; &apos;author_email&apos; &apos;content&apos; &apos;date_created_gmt&apos; &apos;status&apos;. Common statuses are &apos;approve&apos;, &apos;hold&apos;, &apos;spam&apos;. See <code>get_comment_statuses()</code> for more details 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1172'; params='@param array $args array . Contains: '; return='bool True, on success. '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_editPage'; match='wp_editPage'; definition='wp_editPage($args)'; description='Edit page. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 673'; params='@param array $args Method parameters.  '; return='unknown '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getAuthors'; match='wp_getAuthors'; definition='wp_getAuthors($args)'; description='Retrieve authors list. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 781'; params='@param array $args Method parameters.  '; return='array '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getComment'; match='wp_getComment'; definition='wp_getComment($args)'; description='Retrieve comment. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 981'; params='@param array $args Method parameters.  '; return='array '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getCommentCount'; match='wp_getCommentCount'; definition='wp_getCommentCount($args)'; description='Retrieve comment count. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1353'; params='@param array $args Method parameters.  '; return='array '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getCommentStatusList'; match='wp_getCommentStatusList'; definition='wp_getCommentStatusList($args)'; description='Retrieve all of the comment status. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1327'; params='@param array $args Method parameters.  '; return='array '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getComments'; match='wp_getComments'; definition='wp_getComments($args)'; description='Retrieve comments. 
Besides the common blog_id, username, and password arguments, it takes a filter array as last argument. 
Accepted &apos;filter&apos; keys are &apos;status&apos;, &apos;post_id&apos;, &apos;offset&apos;, and &apos;number&apos;. 
The defaults are as follows: &apos;status&apos; - Default is &apos;&apos;. Filter by status (e.g., &apos;approve&apos;, &apos;hold&apos;) &apos;post_id&apos; - Default is &apos;&apos;. The post where the comment is posted. Empty string shows all comments. &apos;number&apos; - Default is 10. Total number of media items to retrieve. &apos;offset&apos; - Default is 0. See <code>WP_Query::query()</code> for more. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1054'; params='@param array $args Method parameters.  '; return='array. Contains a collection of comments. See <code>wp_xmlrpc_server::wp_getComment()</code> for a description of each item contents '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getMediaItem'; match='wp_getMediaItem'; definition='wp_getMediaItem($args)'; description='Retrieve a media item by ID 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1564'; params='@param array $args Method parameters. Contains: '; return='array. Assocciative array containing: &apos;date_created_gmt&apos; &apos;parent&apos; &apos;link&apos; &apos;thumbnail&apos; &apos;title&apos; &apos;caption&apos; &apos;description&apos; &apos;metadata&apos; '; since='3.1.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getMediaLibrary'; match='wp_getMediaLibrary'; definition='wp_getMediaLibrary($args)'; description='Retrieves a collection of media library items (or attachments) 
Besides the common blog_id, username, and password arguments, it takes a filter array as last argument. 
Accepted &apos;filter&apos; keys are &apos;parent_id&apos;, &apos;mime_type&apos;, &apos;offset&apos;, and &apos;number&apos;. 
The defaults are as follows: &apos;number&apos; - Default is 5. Total number of media items to retrieve. &apos;offset&apos; - Default is 0. See <code>WP_Query::query()</code> for more. &apos;parent_id&apos; - Default is &apos;&apos;. The post where the media item is attached. Empty string shows all media items. 0 shows unattached media items. &apos;mime_type&apos; - Default is &apos;&apos;. Filter by mime type (e.g., &apos;image/jpeg&apos;, &apos;application/pdf&apos;) 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1627'; params='@param array $args Method parameters. Contains: '; return='array. Contains a collection of media items. See <code>wp_xmlrpc_server::wp_getMediaItem()</code> for a description of each item contents '; since='3.1.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getOptions'; match='wp_getOptions'; definition='wp_getOptions($args)'; description='Retrieve blog options. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1465'; params='@param array $args Method parameters.  '; return='array '; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPage'; match='wp_getPage'; definition='wp_getPage($args)'; description='Retrieve page. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 452'; params='@param array $args Method parameters. Contains: '; return='array '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPageList'; match='wp_getPageList'; definition='wp_getPageList($args)'; description='Retrieve page list. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 720'; params='@param array $args Method parameters.  '; return='unknown '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPageStatusList'; match='wp_getPageStatusList'; definition='wp_getPageStatusList($args)'; description='Retrieve page statuses. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1412'; params='@param array $args Method parameters.  '; return='array '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPageTemplates'; match='wp_getPageTemplates'; definition='wp_getPageTemplates($args)'; description='Retrieve page templates. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1438'; params='@param array $args Method parameters.  '; return='array '; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPages'; match='wp_getPages'; definition='wp_getPages($args)'; description='Retrieve Pages. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 557'; params='@param array $args Method parameters. Contains: '; return='array '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPostFormats'; match='wp_getPostFormats'; definition='wp_getPostFormats($args)'; description='Retrives a list of post formats used by the site 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1674'; params='@param array $args Method parameters. Contains: '; return='array '; since='3.1 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getPostStatusList'; match='wp_getPostStatusList'; definition='wp_getPostStatusList($args)'; description='Retrieve post statuses. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1386'; params='@param array $args Method parameters.  '; return='array '; since='2.5.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getTags'; match='wp_getTags'; definition='wp_getTags($args)'; description='Get list of all tags 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 817'; params='@param array $args Method parameters.  '; return='array '; since='2.7 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_getUsersBlogs'; match='wp_getUsersBlogs'; definition='wp_getUsersBlogs($args)'; description='Retrieve the blogs of the user. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 395'; params='@param array $args Method parameters. Contains: '; return='array. Contains: &apos;isAdmin&apos; &apos;url&apos; &apos;blogid&apos; &apos;blogName&apos; &apos;xmlrpc&apos; - url of xmlrpc endpoint '; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_newCategory'; match='wp_newCategory'; definition='wp_newCategory($args)'; description='Create new category. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 858'; params='@param array $args Method parameters.  '; return='int Category ID. '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_newComment'; match='wp_newComment'; definition='wp_newComment($args)'; description='Create new comment. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1244'; params='@param array $args Method parameters.  '; return='mixed <code>wp_new_comment()</code> '; since='2.7.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_newPage'; match='wp_newPage'; definition='wp_newPage($args)'; description='Create new page. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 603'; params='@param array $args Method parameters. See  '; return='unknown '; since='2.2.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_setOptions'; match='wp_setOptions'; definition='wp_setOptions($args)'; description='Update blog options. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 1515'; params='@param array $args Method parameters.  '; return='unknown '; since='2.6.0 '; type='method';}, 
	{name='wp_xmlrpc_server::wp_suggestCategories'; match='wp_suggestCategories'; definition='wp_suggestCategories($args)'; description='Retrieve category list. 
'; file='/wp-includes/class-wp-xmlrpc-server.php, line: 944'; params='@param array $args Method parameters.  '; return='array '; since='2.2.0 '; type='method';}, 
	{name='wpautop'; match='wpautop'; definition='wpautop($pee, $br=1)'; description='Replaces double line-breaks with paragraph elements. 
A group of regex replaces used to identify text formatted with newlines and replace double line-breaks with HTML paragraph tags. The remaining line-breaks after conversion become &lt; &gt; tags, unless $br is set to &apos;0&apos; or &apos;false&apos;. 
'; file='/wp-includes/formatting.php, line: 170'; params='@param string $pee The text which has to be formatted.  
@param int bool $br Optional. If set, this will convert all remaining line-breaks after paragraphing. Default true.  '; return='string Text which has been converted into correct paragraph tags. '; since='0.71 '; type='function';}, 
	{name='wpdb::__construct'; match='__construct'; definition='__construct($dbuser, $dbpassword, $dbname, $dbhost)'; description='Connects to the database server and selects a database 
PHP5 style constructor for compatibility with PHP5. Does the actual setting up of the class properties and connection to the database. 
<code>2.0.8 string $dbuser MySQL database user string $dbpassword MySQL database password string $dbname MySQL database name string $dbhost MySQL database host </code> '; file='/wp-includes/wp-db.php, line: 478'; type='method';}, 
	{name='wpdb::__destruct'; match='__destruct'; definition='__destruct()'; description='PHP5 style destructor and will run when database object is destroyed. 
@see <code>wpdb::__construct()</code> '; file='/wp-includes/wp-db.php, line: 501'; return='bool true '; since='2.0.8 '; type='method';}, 
	{name='wpdb::_escape'; match='_escape'; definition='_escape($data)'; description='Escape data. Works on arrays. 

'; file='/wp-includes/wp-db.php, line: 790'; params='@param string array $data  '; return='string|array escaped '; since='2.8.0 '; uses=' 
 '; type='method';}, 
	{name='wpdb::_insert_replace_helper'; match='_insert_replace_helper'; definition='_insert_replace_helper($table, $data, $format=null, $type=\'INSERT\')'; description='Helper function for insert and replace. 
Runs an insert or replace query based on $type argument. 
@see <code>wpdb::prepare()</code> <code>wpdb::$field_types</code> wp_set_wpdb_vars() '; file='/wp-includes/wp-db.php, line: 1182'; params='@param string $table table name  
@param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).  
@param array string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data. A format is one of \'d\', \'s\' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in  '; return='int|false The number of rows affected, or false on error. '; since='3.0.0 '; type='method';}, 
	{name='wpdb::_real_escape'; match='_real_escape'; definition='_real_escape($string)'; description='Real escape, using mysql_real_escape_string() or addslashes() 
@see mysql_real_escape_string() addslashes() 
'; file='/wp-includes/wp-db.php, line: 772'; params='@param string $string to escape  '; return='string escaped '; since='2.8.0 '; type='method';}, 
	{name='wpdb::_weak_escape'; match='_weak_escape'; definition='_weak_escape($string)'; description='Weak escape, using addslashes() 
@see addslashes() 
'; file='/wp-includes/wp-db.php, line: 757'; params='@param string $string  '; return='string '; since='2.8.0 '; type='method';}, 
	{name='wpdb::bail'; match='bail'; definition='bail($message, $error_code=\'500\')'; description='Wraps errors in a nice header and footer and dies. 
Will not die if <code>wpdb::$show_errors</code> is true 
'; file='/wp-includes/wp-db.php, line: 1455'; params='@param string $message The Error message  
@param string $error_code Optional. A Computer readable string to identify the error.  '; return='false|void '; since='1.5.0 '; type='method';}, 
	{name='wpdb::check_database_version'; match='check_database_version'; definition='check_database_version()'; description='Whether MySQL database is at least the required minimum version. 

'; file='/wp-includes/wp-db.php, line: 1475'; return='<code>WP_Error</code> '; since='2.5.0 '; uses='$wp_version 
$required_mysql_version'; type='method';}, 
	{name='wpdb::db_connect'; match='db_connect'; definition='db_connect()'; description='Connect to and select database 
'; file='/wp-includes/wp-db.php, line: 1015'; since='3.0.0 '; type='method';}, 
	{name='wpdb::db_version'; match='db_version'; definition='db_version()'; description='The database version number. 
'; file='/wp-includes/wp-db.php, line: 1549'; return='false|string false on failure, version number on success '; since='2.7.0 '; type='method';}, 
	{name='wpdb::escape'; match='escape'; definition='escape($data)'; description='Escapes content for insertion into the database using addslashes(), for security. 
Works on arrays. 
'; file='/wp-includes/wp-db.php, line: 814'; params='@param string array $data to escape  '; return='string|array escaped as query safe string '; since='0.71 '; type='method';}, 
	{name='wpdb::escape_by_ref'; match='escape_by_ref'; definition='escape_by_ref($string)'; description='Escapes content by reference for insertion into the database, for security 
'; file='/wp-includes/wp-db.php, line: 837'; params='@param string $string to escape  '; return='void '; since='2.3.0 '; uses=' '; type='method';}, 
	{name='wpdb::flush'; match='flush'; definition='flush()'; description='Kill cached query results. 
'; file='/wp-includes/wp-db.php, line: 1004'; return='void '; since='0.71 '; type='method';}, 
	{name='wpdb::get_blog_prefix'; match='get_blog_prefix'; definition='get_blog_prefix($blog_id=null)'; description='Gets blog prefix. 
'; file='/wp-includes/wp-db.php, line: 625'; params='@param int $blog_id Optional.  '; return='string Blog prefix. '; since='3.0.0 '; uses='is_multisite() '; type='method';}, 
	{name='wpdb::get_caller'; match='get_caller'; definition='get_caller()'; description='Retrieve the name of the function that called wpdb. 
Searches up the list of functions until it reaches the one that would most logically had called this method. 
'; file='/wp-includes/wp-db.php, line: 1529'; return='string The name of the calling function '; since='2.5.0 '; type='method';}, 
	{name='wpdb::get_col'; match='get_col'; definition='get_col($query=null, $x=0)'; description='Retrieve one column from the database. 
Executes a SQL query and returns the column from the SQL result. If the SQL result contains more than one column, this function returns the column specified. If $query is null, this function returns the specified column from the previous SQL result. 
'; file='/wp-includes/wp-db.php, line: 1328'; params='@param string null $query Optional. SQL query. Defaults to previous query.  
@param int $x Optional. Column to return. Indexed from 0.  '; return='array Database query result. Array indexed from 0 by SQL result row number. '; since='0.71 '; type='method';}, 
	{name='wpdb::get_col_info'; match='get_col_info'; definition='get_col_info($info_type=\'name\', $col_offset=-1)'; description='Retrieve column metadata from the last query. 
'; file='/wp-includes/wp-db.php, line: 1401'; params='@param string $info_type Optional. Type one of name, table, def, max_length, not_null, primary_key, multiple_key, unique_key, numeric, blob, type, unsigned, zerofill  
@param int $col_offset Optional. 0: col name. 1: which table the col\'s in. 2: col\'s max length. 3: if the col is numeric. 4: col\'s type  '; return='mixed Column Results '; since='0.71 '; type='method';}, 
	{name='wpdb::get_results'; match='get_results'; definition='get_results($query=null, $output=OBJECT)'; description='Retrieve an entire SQL result set from the database (i.e., many rows) 
Executes a SQL query and returns the entire SQL result. 
'; file='/wp-includes/wp-db.php, line: 1353'; params='@param string $query SQL query.  
@param string $output Optional. Any of ARRAY_A | ARRAY_N | OBJECT | OBJECT_K constants. With one of the first three, return an array of rows indexed from 0 by SQL result row number. Each row is an associative array (column => value, ...), a numerically indexed array (0 => value, ...), or an object. ( ->column = value ), respectively. With OBJECT_K, return an associative array of row objects keyed by the value of each row\'s first column\'s value. Duplicate keys are discarded.  '; return='mixed Database query results '; since='0.71 '; type='method';}, 
	{name='wpdb::get_row'; match='get_row'; definition='get_row($query=null, $output=OBJECT, $y=0)'; description='Retrieve one row from the database. 
Executes a SQL query and returns the row from the SQL result. 
'; file='/wp-includes/wp-db.php, line: 1294'; params='@param string null $query SQL query.  
@param string $output Optional. one of ARRAY_A | ARRAY_N | OBJECT constants. Return an associative array (column => value, ...), a numerically indexed array (0 => value, ...) or an object ( ->column = value ), respectively.  
@param int $y Optional. Row to return. Indexed from 0.  '; return='mixed Database query result in format specifed by $output or null on failure '; since='0.71 '; type='method';}, 
	{name='wpdb::get_var'; match='get_var'; definition='get_var($query=null, $x=0, $y=0)'; description='Retrieve one variable from the database. 
Executes a SQL query and returns the value from the SQL result. If the SQL result contains more than one column and/or more than one row, this function returns the value in the column and row specified. If $query is null, this function returns the value in the specified column and row from the previous SQL result. 
'; file='/wp-includes/wp-db.php, line: 1267'; params='@param string null $query Optional. SQL query. Defaults to null, use the result from the previous query.  
@param int $x Optional. Column of value to return. Indexed from 0.  
@param int $y Optional. Row of value to return. Indexed from 0.  '; return='string|null Database query result (as string), or null on failure '; since='0.71 '; type='method';}, 
	{name='wpdb::has_cap'; match='has_cap'; definition='has_cap($db_cap)'; description='Determine if a database supports a particular feature 
@see <code>wpdb::db_version()</code> '; file='/wp-includes/wp-db.php, line: 1504'; params='@param string $db_cap the feature  '; return='bool '; since='2.7.0 '; type='method';}, 
	{name='wpdb::hide_errors'; match='hide_errors'; definition='hide_errors()'; description='Disables showing of database errors. 
By default database errors are not shown. 
@see <code>wpdb::show_errors()</code> '; file='/wp-includes/wp-db.php, line: 975'; return='bool Whether showing of errors was active '; since='0.71 '; type='method';}, 
	{name='wpdb::init_charset'; match='init_charset'; definition='init_charset()'; description='Set $this-&gt;charset and $this-&gt;collate 
'; file='/wp-includes/wp-db.php, line: 510'; since='3.1.0 '; type='method';}, 
	{name='wpdb::insert'; match='insert'; definition='insert($table, $data, $format=null)'; description='Insert a row into a table. 
<code>wpdb::insert</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; &apos;bar&apos; ) ) <code>wpdb::insert</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; 1337 ), array( &apos;s&apos;, &apos;d&apos; ) ) 
@see <code>wpdb::prepare()</code> <code>wpdb::$field_types</code> wp_set_wpdb_vars() '; file='/wp-includes/wp-db.php, line: 1138'; params='@param string $table table name  
@param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).  
@param array string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data. A format is one of \'d\', \'s\' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in  '; return='int|false The number of rows inserted, or false on error. '; since='2.5.0 '; type='method';}, 
	{name='wpdb::prepare'; match='prepare'; definition='prepare($query=null)'; description='Prepares a SQL query for safe execution. Uses sprintf()-like syntax. 
The following directives can be used in the query format string: d (decimal number) s (string) %% (literal percentage sign - no argument needed) 
Both d and s are to be left unquoted in the query string and they need an argument passed for them. Literals (%) as parts of the query must be properly written as %%. 
This function only supports a small subset of the sprintf syntax; it only supports d (decimal number), s (string). Does not support sign, padding, alignment, width or precision specifiers. Does not support argument numbering/swapping. 
May be called like <code>sprintf()</code> or like <code>vsprintf()</code> . 
Both d and s should be left unquoted in the query string. 
<code>wpdb::prepare</code> ( &quot;SELECT &lowast; FROM `table` WHERE `column` = %s AND `field` = %d&quot;, &apos;foo&apos;, 1337 ) <code>wpdb::prepare</code> ( &quot;SELECT DATE_FORMAT(`field`, &apos;%%c&apos;) FROM `table` WHERE `column` = %s&quot;, &apos;foo&apos; ); 
<code>Description of syntax. 2.3.0 string $query Query statement with sprintf()-like placeholders array|mixed $args The array of variables to substitute into the query\'s placeholders if being called like </code> '; file='/wp-includes/wp-db.php, line: 877'; type='method';}, 
	{name='wpdb::print_error'; match='print_error'; definition='print_error($str=\'\')'; description='Print SQL/DB error. 

'; file='/wp-includes/wp-db.php, line: 902'; params='@param string $str The error to display  '; return='bool False if the showing of errors is disabled. '; since='0.71 '; type='method';}, 
	{name='wpdb::query'; match='query'; definition='query($query)'; description='Perform a MySQL database query, using current database connection. 
More information can be found on the codex page. 
'; file='/wp-includes/wp-db.php, line: 1054'; params='@param string $query Database query  '; return='int|false Number of rows affected/selected or false on error '; since='0.71 '; type='method';}, 
	{name='wpdb::replace'; match='replace'; definition='replace($table, $data, $format=null)'; description='Replace a row into a table. 
<code>wpdb::replace</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; &apos;bar&apos; ) ) <code>wpdb::replace</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; 1337 ), array( &apos;s&apos;, &apos;d&apos; ) ) 
@see <code>wpdb::prepare()</code> <code>wpdb::$field_types</code> wp_set_wpdb_vars() '; file='/wp-includes/wp-db.php, line: 1161'; params='@param string $table table name  
@param array $data Data to insert (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).  
@param array string $format Optional. An array of formats to be mapped to each of the value in $data. If string, that format will be used for all of the values in $data. A format is one of \'d\', \'s\' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in  '; return='int|false The number of rows affected, or false on error. '; since='3.0.0 '; type='method';}, 
	{name='wpdb::select'; match='select'; definition='select($db, $dbh=null)'; description='Selects a database using the current database connection. 
The database name will be changed based on the current database connection. On failure, the execution will bail and display an DB error. 
'; file='/wp-includes/wp-db.php, line: 729'; params='@param string $db MySQL database name  
@param resource $dbh Optional link identifier.  '; return='null Always null. '; since='0.71 '; type='method';}, 
	{name='wpdb::set_blog_id'; match='set_blog_id'; definition='set_blog_id($blog_id, $site_id=0)'; description='Sets blog id. 
'; file='/wp-includes/wp-db.php, line: 599'; params='@param int $blog_id  
@param int $site_id Optional.  '; return='string previous blog id '; since='3.0.0 '; type='method';}, 
	{name='wpdb::set_charset'; match='set_charset'; definition='set_charset($dbh, $charset=null, $collate=null)'; description='Sets the connection&apos;s character set. 
'; file='/wp-includes/wp-db.php, line: 534'; params='@param resource $dbh The resource given by mysql_connect  
@param string $charset The character set (optional)  
@param string $collate The collation (optional)  '; since='3.1.0 '; type='method';}, 
	{name='wpdb::set_prefix'; match='set_prefix'; definition='set_prefix($prefix, $set_table_names=true)'; description='Sets the table prefix for the WordPress tables. 
'; file='/wp-includes/wp-db.php, line: 560'; params='@param string $prefix Alphanumeric name for the new prefix.  '; return='string|WP_Error Old prefix or <code>WP_Error</code> on error '; since='2.5.0 '; type='method';}, 
	{name='wpdb::show_errors'; match='show_errors'; definition='show_errors($show=true)'; description='Enables showing of database errors. 
This function should be used only to enable showing of errors. <code>wpdb::hide_errors()</code> should be used instead for hiding of errors. However, this function can be used to enable and disable showing of database errors. 
@see <code>wpdb::hide_errors()</code> '; file='/wp-includes/wp-db.php, line: 959'; params='@param bool $show Whether to show or hide errors  '; return='bool Old value for showing errors. '; since='0.71 '; type='method';}, 
	{name='wpdb::supports_collation'; match='supports_collation'; definition='supports_collation()'; description='Whether the database supports collation. 
Called when WordPress is generating the table scheme. 
'; file='/wp-includes/wp-db.php, line: 1491'; return='bool True if collation is supported, false if version does not '; since='2.5.0 '; type='method';}, 
	{name='wpdb::suppress_errors'; match='suppress_errors'; definition='suppress_errors($suppress=true)'; description='Whether to suppress database errors. 
By default database errors are suppressed, with a simple call to this function they can be enabled. 
@see <code>wpdb::hide_errors()</code> '; file='/wp-includes/wp-db.php, line: 992'; params='@param bool $suppress Optional. New value. Defaults to true.  '; return='bool Old value '; since='2.5.0 '; type='method';}, 
	{name='wpdb::tables'; match='tables'; definition='tables($scope=\'all\', $prefix=true, $blog_id=0)'; description='Returns an array of WordPress tables. 
Also allows for the CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE to override the WordPress users and usersmeta tables that would otherwise be determined by the prefix. 
The scope argument can take one of the following: 
&apos;all&apos; - returns &apos;all&apos; and &apos;global&apos; tables. No old tables are returned. &apos;blog&apos; - returns the blog-level tables for the queried blog. &apos;global&apos; - returns the global tables for the installation, returning multisite tables only if running multisite. &apos;ms_global&apos; - returns the multisite global tables, regardless if current installation is multisite. &apos;old&apos; - returns tables which are deprecated. 

'; file='/wp-includes/wp-db.php, line: 667'; params='@param string $scope Optional. Can be all, global, ms_global, blog, or old tables. Defaults to all.  
@param bool $prefix Optional. Whether to include table prefixes. Default true. If blog prefix is requested, then the custom users and usermeta tables will be mapped.  
@param int $blog_id Optional. The blog_id to prefix. Defaults to  '; return='array Table names. When a prefix is requested, the key is the unprefixed table name. '; since='3.0.0 '; uses=' 
 
 
 
is_multisite()'; type='method';}, 
	{name='wpdb::timer_start'; match='timer_start'; definition='timer_start()'; description='Starts the timer, for debugging purposes. 
'; file='/wp-includes/wp-db.php, line: 1424'; return='true '; since='1.5.0 '; type='method';}, 
	{name='wpdb::timer_stop'; match='timer_stop'; definition='timer_stop()'; description='Stops the debugging timer. 
'; file='/wp-includes/wp-db.php, line: 1437'; return='int Total time spent on the query, in milliseconds '; since='1.5.0 '; type='method';}, 
	{name='wpdb::update'; match='update'; definition='update($table, $data, $where, $format=null, $where_format=null)'; description='Update a row in the table 
<code>wpdb::update</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; &apos;bar&apos; ), array( &apos;ID&apos; =&gt; 1 ) ) <code>wpdb::update</code> ( &apos;table&apos;, array( &apos;column&apos; =&gt; &apos;foo&apos;, &apos;field&apos; =&gt; 1337 ), array( &apos;ID&apos; =&gt; 1 ), array( &apos;s&apos;, &apos;d&apos; ), array( &apos;d&apos; ) ) 
@see <code>wpdb::prepare()</code> <code>wpdb::$field_types</code> wp_set_wpdb_vars() '; file='/wp-includes/wp-db.php, line: 1222'; params='@param string $table table name  
@param array $data Data to update (in column => value pairs). Both $data columns and $data values should be \"raw\" (neither should be SQL escaped).  
@param array $where A named array of WHERE clauses (in column => value pairs). Multiple clauses will be joined with ANDs. Both $where columns and $where values should be \"raw\".  
@param array string $format Optional. An array of formats to be mapped to each of the values in $data. If string, that format will be used for all of the values in $data. A format is one of \'d\', \'s\' (decimal number, string). If omitted, all values in $data will be treated as strings unless otherwise specified in  
@param array string $format_where Optional. An array of formats to be mapped to each of the values in $where. If string, that format will be used for all of the items in $where. A format is one of \'d\', \'s\' (decimal number, string). If omitted, all values in $where will be treated as strings.  '; return='int|false The number of rows updated, or false on error. '; since='2.5.0 '; type='method';}, 
	{name='wpmu_activate_signup'; match='wpmu_activate_signup'; definition='wpmu_activate_signup($key)'; description='Activate a signup. 
Hook to &apos;wpmu_activate_user&apos; or &apos;wpmu_activate_blog&apos; for events that should happen only when users or sites are self-created (since those actions are not called when users and sites are created by a Super Admin). 

'; file='/wp-includes/ms-functions.php, line: 920'; params='@param string $key The activation key provided to the user.  '; return='array An array containing information about the activated user and/or blog '; since='MU '; uses='wp_generate_password() 
wpmu_welcome_user_notification() 
add_user_to_blog() 
add_new_user_to_blog() 
wpmu_create_user() 
wpmu_create_blog() 
wpmu_welcome_notification()'; type='function';}, 
	{name='wpmu_activate_stylesheet'; match='wpmu_activate_stylesheet'; definition='wpmu_activate_stylesheet()'; description=''; file='/wp-activate.php, line: 24'; type='function';}, 
	{name='wpmu_admin_do_redirect'; match='wpmu_admin_do_redirect'; definition='wpmu_admin_do_redirect($url=\'\')'; description='Redirect a user based on $_GET or $_POST arguments. 
The function looks for redirect arguments in the following order: 1) $_GET[&apos;ref&apos;] 2) $_POST[&apos;ref&apos;] 3) $_SERVER[&apos;HTTP_REFERER&apos;] 4) $_GET[&apos;redirect&apos;] 5) $_POST[&apos;redirect&apos;] 6) $url 

'; file='/wp-includes/ms-functions.php, line: 410'; params='@param string $url  '; since='MU '; uses='wpmu_admin_redirect_add_updated_param()'; type='function';}, 
	{name='wpmu_admin_redirect_add_updated_param'; match='wpmu_admin_redirect_add_updated_param'; definition='wpmu_admin_redirect_add_updated_param($url=\'\')'; description='Adds an &apos;updated=true&apos; argument to a URL. 
'; file='/wp-includes/ms-functions.php, line: 446'; params='@param string $url  '; return='string '; since='MU '; type='function';}, 
	{name='wpmu_checkAvailableSpace'; match='wpmu_checkAvailableSpace'; definition='wpmu_checkAvailableSpace()'; description='Determines if the available space defined by the admin has been exceeded by the user. 
@see is_upload_space_available() '; file='/wp-admin/includes/ms-deprecated.php, line: 26'; type='function';}, 
	{name='wpmu_create_blog'; match='wpmu_create_blog'; definition='wpmu_create_blog($domain, $path, $title, $user_id, $meta=\'\', $site_id=1)'; description='Create a site. 
This function runs when a user self-registers a new site as well as when a Super Admin creates a new site. Hook to &apos;wpmu_new_blog&apos; for events that should affect all new sites. 
On subdirectory installs, $domain is the same as the main site&apos;s domain, and the path is the subdirectory name (eg &apos;example.com&apos; and &apos;/blog1/&apos;). On subdomain installs, $domain is the new subdomain + root domain (eg &apos;blog1.example.com&apos;), and $path is &apos;/&apos;. 

'; file='/wp-includes/ms-functions.php, line: 1043'; params='@param string $domain The new site\'s domain.  
@param string $path The new site\'s path.  
@param string $title The new site\'s title.  
@param int $user_id The user ID of the new site\'s admin.  
@param array $meta Optional. Used to set initial site options.  
@param int $site_id Optional. Only relevant on multi-network installs.  '; return='mixed Returns <code>WP_Error</code> object on failure, int $blog_id on success '; since='MU '; uses='domain_exists() 
insert_blog() 
wp_install_defaults() 
add_user_to_blog()'; type='function';}, 
	{name='wpmu_create_user'; match='wpmu_create_user'; definition='wpmu_create_user($user_name, $password, $email)'; description='Create a user. 
This function runs when a user self-registers as well as when a Super Admin creates a new user. Hook to &apos;wpmu_new_user&apos; for events that should affect all new users, but only on Multisite (otherwise use &apos;user_register&apos;). 

'; file='/wp-includes/ms-functions.php, line: 1001'; params='@param string $user_name The new user\'s login name.  
@param string $password The new user\'s password.  
@param string $email The new user\'s email address.  '; return='mixed Returns false on failure, or int $user_id on success '; since='MU '; uses='wp_create_user()'; type='function';}, 
	{name='wpmu_current_site'; match='wpmu_current_site'; definition='wpmu_current_site()'; description='Sets current_site object. 
'; file='/wp-includes/ms-load.php, line: 135'; return='object $current_site object '; since='3.0.0 '; type='function';}, 
	{name='wpmu_delete_blog'; match='wpmu_delete_blog'; definition='wpmu_delete_blog($blog_id, $drop=false)'; description='Delete a blog 
'; file='/wp-admin/includes/ms.php, line: 55'; params='@param int $blog_id Blog ID  
@param bool $drop True if blog\'s table should be dropped. Default is false.  '; return='void '; since='3.0.0 '; type='function';}, 
	{name='wpmu_delete_user'; match='wpmu_delete_user'; definition='wpmu_delete_user($id)'; description=''; file='/wp-admin/includes/ms.php, line: 138'; type='function';}, 
	{name='wpmu_get_blog_allowedthemes'; match='wpmu_get_blog_allowedthemes'; definition='wpmu_get_blog_allowedthemes($blog_id=0)'; description=''; file='/wp-admin/includes/ms.php, line: 180'; type='function';}, 
	{name='wpmu_log_new_registrations'; match='wpmu_log_new_registrations'; definition='wpmu_log_new_registrations($blog_id, $user_id)'; description='Logs user registrations. 
'; file='/wp-includes/ms-functions.php, line: 1627'; params='@param int $blog_id  
@param int $user_id  '; since='MU '; type='function';}, 
	{name='wpmu_menu'; match='wpmu_menu'; definition='wpmu_menu()'; description=''; file='/wp-admin/includes/ms-deprecated.php, line: 15'; type='function';}, 
	{name='wpmu_signup_blog'; match='wpmu_signup_blog'; definition='wpmu_signup_blog($domain, $path, $title, $user, $user_email, $meta=\'\')'; description='Record site signup information for future activation. 

'; file='/wp-includes/ms-functions.php, line: 726'; params='@param string $domain The requested domain.  
@param string $path The requested path.  
@param string $title The requested site title.  
@param string $user The user\'s requested login name.  
@param string $user_email The user\'s email address.  
@param array $meta By default, contains the requested privacy setting and lang_id.  '; since='MU '; uses='wpmu_signup_blog_notification()'; type='function';}, 
	{name='wpmu_signup_blog_notification'; match='wpmu_signup_blog_notification'; definition='wpmu_signup_blog_notification($domain, $path, $title, $user, $user_email, $key, $meta=\'\')'; description='Notify user of signup success. 
This is the notification function used when site registration is enabled. 
Filter &apos;wpmu_signup_blog_notification&apos; to bypass this function or replace it with your own notification behavior. 
Filter &apos;wpmu_signup_blog_notification_email&apos; and &apos;wpmu_signup_blog_notification_email&apos; to change the content and subject line of the email sent to newly registered users. 
'; file='/wp-includes/ms-functions.php, line: 809'; params='@param string $domain The new blog domain.  
@param string $path The new blog path.  
@param string $title The site title.  
@param string $user The user\'s login name.  
@param string $user_email The user\'s email address.  
@param array $meta By default, contains the requested privacy setting and lang_id.  
@param string $key The activation key created in wpmu_signup_blog()  '; return='bool '; since='MU '; type='function';}, 
	{name='wpmu_signup_stylesheet'; match='wpmu_signup_stylesheet'; definition='wpmu_signup_stylesheet()'; description=''; file='/wp-signup.php, line: 37'; type='function';}, 
	{name='wpmu_signup_user'; match='wpmu_signup_user'; definition='wpmu_signup_user($user, $user_email, $meta=\'\')'; description='Record user signup information for future activation. 
This function is used when user registration is open but new site registration is not. 

'; file='/wp-includes/ms-functions.php, line: 762'; params='@param string $user The user\'s requested login name.  
@param string $user_email The user\'s email address.  
@param array $meta By default, this is an empty array.  '; since='MU '; uses='wpmu_signup_user_notification()'; type='function';}, 
	{name='wpmu_signup_user_notification'; match='wpmu_signup_user_notification'; definition='wpmu_signup_user_notification($user, $user_email, $key, $meta=\'\')'; description='Notify user of signup success. 
This is the notification function used when no new site has been requested. 
Filter &apos;wpmu_signup_user_notification&apos; to bypass this function or replace it with your own notification behavior. 
Filter &apos;wpmu_signup_user_notification_email&apos; and &apos;wpmu_signup_user_notification_subject&apos; to change the content and subject line of the email sent to newly registered users. 
'; file='/wp-includes/ms-functions.php, line: 870'; params='@param string $user The user\'s login name.  
@param string $user_email The user\'s email address.  
@param array $meta By default, an empty array.  
@param string $key The activation key created in wpmu_signup_user()  '; return='bool '; since='MU '; type='function';}, 
	{name='wpmu_update_blogs_date'; match='wpmu_update_blogs_date'; definition='wpmu_update_blogs_date()'; description='Update the last_updated field for the current blog. 
'; file='/wp-includes/ms-blogs.php, line: 16'; since='MU '; type='function';}, 
	{name='wpmu_validate_blog_signup'; match='wpmu_validate_blog_signup'; definition='wpmu_validate_blog_signup($blogname, $blog_title, $user=\'\')'; description='Processes new site registrations. 
Checks the data provided by the user during blog signup. Verifies the validity and uniqueness of blog paths and domains. 
This function prevents the current user from registering a new site with a blogname equivalent to another user&apos;s login name. Passing the $user parameter to the function, where $user is the other user, is effectively an override of this limitation. 
Filter &apos;wpmu_validate_blog_signup&apos; if you want to modify the way that WordPress validates new site signups. 

'; file='/wp-includes/ms-functions.php, line: 630'; params='@param string $blogname The blog name provided by the user. Must be unique.  
@param string $blog_title The blog title provided by the user.  '; return='array Contains the new site data and error messages. '; since='MU '; uses='domain_exists() 
username_exists()'; type='function';}, 
	{name='wpmu_validate_user_signup'; match='wpmu_validate_user_signup'; definition='wpmu_validate_user_signup($user_name, $user_email)'; description='Processes new user registrations. 
Checks the data provided by the user during signup. Verifies the validity and uniqueness of user names and user email addresses, and checks email addresses against admin-provided domain whitelists and blacklists. 
The hook &apos;wpmu_validate_user_signup&apos; provides an easy way to modify the signup process. The value $result, which is passed to the hook, contains both the user-provided info and the error messages created by the function. &apos;wpmu_validate_user_signup&apos; allows you to process the data in any way you&apos;d like, and unset the relevant errors if necessary. 

'; file='/wp-includes/ms-functions.php, line: 516'; params='@param string $user_name The login name provided by the user.  
@param string $user_email The email provided by the user.  '; return='array Contains username, email, and error messages. '; since='MU '; uses='is_email_address_unsafe() 
username_exists() 
email_exists()'; type='function';}, 
	{name='wpmu_welcome_notification'; match='wpmu_welcome_notification'; definition='wpmu_welcome_notification($blog_id, $user_id, $password, $title, $meta=\'\')'; description='Notify a user that her blog activation has been successful. 
Filter &apos;wpmu_welcome_notification&apos; to disable or bypass. 
Filter &apos;update_welcome_email&apos; and &apos;update_welcome_subject&apos; to modify the content and subject line of the notification email. 
'; file='/wp-includes/ms-functions.php, line: 1299'; params='@param int $blog_id  
@param int $user_id  
@param string $password  
@param string $title The new blog\'s title  
@param array $meta Optional. Not used in the default function, but is passed along to hooks for customization.  '; return='bool '; since='MU '; type='function';}, 
	{name='wpmu_welcome_user_notification'; match='wpmu_welcome_user_notification'; definition='wpmu_welcome_user_notification($user_id, $password, $meta=\'\')'; description='Notify a user that her account activation has been successful. 
Filter &apos;wpmu_welcome_user_notification&apos; to disable or bypass. 
Filter &apos;update_welcome_user_email&apos; and &apos;update_welcome_user_subject&apos; to modify the content and subject line of the notification email. 
'; file='/wp-includes/ms-functions.php, line: 1363'; params='@param int $user_id  
@param string $password  
@param array $meta Optional. Not used in the default function, but is passed along to hooks for customization.  '; return='bool '; since='MU '; type='function';}, 
	{name='wptexturize'; match='wptexturize'; definition='wptexturize($text)'; description='Replaces common plain text characters into formatted entities 
As an example, &apos;cause today&apos;s effort makes it worth tomorrow&apos;s &quot;holiday&quot;... Becomes: &amp;#8217;cause today&amp;#8217;s effort makes it worth tomorrow&amp;#8217;s &amp;#8220;holiday&amp;#8221;&amp;#8230; Code within certain html blocks are skipped. 

'; file='/wp-includes/formatting.php, line: 29'; params='@param string $text The text to be formatted  '; return='string The string replaced with html entities '; since='0.71 '; uses='$wp_cockneyreplace Array of formatted entities for certain common phrases'; type='function';}, 
	{name='write_post'; match='write_post'; definition='write_post()'; description='Calls wp_write_post() and handles the errors. 
'; file='/wp-admin/includes/post.php, line: 644'; return='unknown '; since='2.0.0 '; type='function';}, 
	{name='xfn_check'; match='xfn_check'; definition='xfn_check($class, $value=\'\', $deprecated=\'\')'; description='Display checked checkboxes attribute for xfn microformat options. 
'; file='/wp-admin/includes/meta-boxes.php, line: 724'; params='@param string $class  
@param string $value  
@param mixed $deprecated Never used.  '; since='1.0.1 '; type='function';}, 
	{name='xmlrpc_getpostcategory'; match='xmlrpc_getpostcategory'; definition='xmlrpc_getpostcategory($content)'; description=''; file='/wp-includes/functions.php, line: 1087'; type='function';}, 
	{name='xmlrpc_getposttitle'; match='xmlrpc_getposttitle'; definition='xmlrpc_getposttitle($content)'; description=''; file='/wp-includes/functions.php, line: 1061'; type='function';}, 
	{name='xmlrpc_removepostdata'; match='xmlrpc_removepostdata'; definition='xmlrpc_removepostdata($content)'; description=''; file='/wp-includes/functions.php, line: 1108'; type='function';}, 
	{name='zeroise'; match='zeroise'; definition='zeroise($number, $threshold)'; description='Add leading zeros when necessary. 
If you set the threshold to &apos;4&apos; and the number is &apos;10&apos;, then you will get back &apos;0010&apos;. If you set the number to &apos;4&apos; and the number is &apos;5000&apos;, then you will get back &apos;5000&apos;. 
Uses sprintf to append the amount of zeros based on the $threshold parameter and the size of the number. If the number is large enough, then no zeros will be appended. 
'; file='/wp-includes/formatting.php, line: 1152'; params='@param mixed $number Number to append zeros to if not greater than threshold.  
@param int $threshold Digit places number needs to be to not have zeros added.  '; return='string Adds leading zeros to number if needed. '; since='0.71 '; type='function';}
)
